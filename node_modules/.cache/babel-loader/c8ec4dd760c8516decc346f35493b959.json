{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber | Unit}`\n   *   Start of the range\n   * - `end: number | BigNumber | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function UnitUnitUnit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function UnitUnitUnitBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n\n    return arr;\n  }\n\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n\n\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n\n    return array;\n  }\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n\n\n  function _parse(str) {\n    var args = str.split(':'); // number\n\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n\n    if (invalid) {\n      return null;\n    }\n\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n\n      default:\n        return null;\n    }\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/matrix/range.js"],"names":["factory","noBignumber","noMatrix","name","dependencies","createRange","_ref","typed","config","matrix","bignumber","smaller","smallerEq","larger","largerEq","add","isPositive","string","_strRange","numberNumber","start","end","_out","_range","numberNumberNumber","step","numberNumberBoolean","includeEnd","numberNumberNumberBoolean","BigNumberBigNumber","BigNumber","constructor","BigNumberBigNumberBigNumber","BigNumberBigNumberBoolean","BigNumberBigNumberBigNumberBoolean","UnitUnitUnit","UnitUnitUnitBoolean","arr","str","r","_parse","SyntaxError","number","undefined","array","ongoing","x","push","args","split","nums","map","arg","Number","invalid","some","num","isNaN","length"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { noBignumber, noMatrix } from '../../utils/noop.js';\nvar name = 'range';\nvar dependencies = ['typed', 'config', '?matrix', '?bignumber', 'smaller', 'smallerEq', 'larger', 'largerEq', 'add', 'isPositive'];\nexport var createRange = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    bignumber,\n    smaller,\n    smallerEq,\n    larger,\n    largerEq,\n    add,\n    isPositive\n  } = _ref;\n  /**\n   * Create an array from a range.\n   * By default, the range end is excluded. This can be customized by providing\n   * an extra parameter `includeEnd`.\n   *\n   * Syntax:\n   *\n   *     math.range(str [, includeEnd])               // Create a range from a string,\n   *                                                  // where the string contains the\n   *                                                  // start, optional step, and end,\n   *                                                  // separated by a colon.\n   *     math.range(start, end [, includeEnd])        // Create a range with start and\n   *                                                  // end and a step size of 1.\n   *     math.range(start, end, step [, includeEnd])  // Create a range with start, step,\n   *                                                  // and end.\n   *\n   * Where:\n   *\n   * - `str: string`\n   *   A string 'start:end' or 'start:step:end'\n   * - `start: {number | BigNumber | Unit}`\n   *   Start of the range\n   * - `end: number | BigNumber | Unit`\n   *   End of the range, excluded by default, included when parameter includeEnd=true\n   * - `step: number | BigNumber | Unit`\n   *   Step size. Default value is 1.\n   * - `includeEnd: boolean`\n   *   Option to specify whether to include the end or not. False by default.\n   *\n   * Examples:\n   *\n   *     math.range(2, 6)        // [2, 3, 4, 5]\n   *     math.range(2, -3, -1)   // [2, 1, 0, -1, -2]\n   *     math.range('2:1:6')     // [2, 3, 4, 5]\n   *     math.range(2, 6, true)  // [2, 3, 4, 5, 6]\n   *     math.range(math.unit(2, 'm'), math.unit(-3, 'm'), math.unit(-1, 'm')) // [2 m, 1 m, 0 m , -1 m, -2 m]\n   *\n   * See also:\n   *\n   *     ones, zeros, size, subset\n   *\n   * @param {*} args   Parameters describing the ranges `start`, `end`, and optional `step`.\n   * @return {Array | Matrix} range\n   */\n  return typed(name, {\n    // TODO: simplify signatures when typed-function supports default values and optional arguments\n\n    // TODO: a number or boolean should not be converted to string here\n    string: _strRange,\n    'string, boolean': _strRange,\n    'number, number': function numberNumber(start, end) {\n      return _out(_range(start, end, 1, false));\n    },\n    'number, number, number': function numberNumberNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'number, number, boolean': function numberNumberBoolean(start, end, includeEnd) {\n      return _out(_range(start, end, 1, includeEnd));\n    },\n    'number, number, number, boolean': function numberNumberNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(start, end) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), false));\n    },\n    'BigNumber, BigNumber, BigNumber': function BigNumberBigNumberBigNumber(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'BigNumber, BigNumber, boolean': function BigNumberBigNumberBoolean(start, end, includeEnd) {\n      var BigNumber = start.constructor;\n      return _out(_range(start, end, new BigNumber(1), includeEnd));\n    },\n    'BigNumber, BigNumber, BigNumber, boolean': function BigNumberBigNumberBigNumberBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    },\n    'Unit, Unit, Unit': function UnitUnitUnit(start, end, step) {\n      return _out(_range(start, end, step, false));\n    },\n    'Unit, Unit, Unit, boolean': function UnitUnitUnitBoolean(start, end, step, includeEnd) {\n      return _out(_range(start, end, step, includeEnd));\n    }\n  });\n  function _out(arr) {\n    if (config.matrix === 'Matrix') {\n      return matrix ? matrix(arr) : noMatrix();\n    }\n    return arr;\n  }\n  function _strRange(str, includeEnd) {\n    var r = _parse(str);\n    if (!r) {\n      throw new SyntaxError('String \"' + str + '\" is no valid range');\n    }\n    if (config.number === 'BigNumber') {\n      if (bignumber === undefined) {\n        noBignumber();\n      }\n      return _out(_range(bignumber(r.start), bignumber(r.end), bignumber(r.step)), includeEnd);\n    } else {\n      return _out(_range(r.start, r.end, r.step, includeEnd));\n    }\n  }\n\n  /**\n   * Create a range with numbers or BigNumbers\n   * @param {number | BigNumber | Unit} start\n   * @param {number | BigNumber | Unit} end\n   * @param {number | BigNumber | Unit} step\n   * @param {boolean} includeEnd\n   * @returns {Array} range\n   * @private\n   */\n  function _range(start, end, step, includeEnd) {\n    var array = [];\n    var ongoing = isPositive(step) ? includeEnd ? smallerEq : smaller : includeEnd ? largerEq : larger;\n    var x = start;\n    while (ongoing(x, end)) {\n      array.push(x);\n      x = add(x, step);\n    }\n    return array;\n  }\n\n  /**\n   * Parse a string into a range,\n   * The string contains the start, optional step, and end, separated by a colon.\n   * If the string does not contain a valid range, null is returned.\n   * For example str='0:2:11'.\n   * @param {string} str\n   * @return {{start: number, end: number, step: number} | null} range Object containing properties start, end, step\n   * @private\n   */\n  function _parse(str) {\n    var args = str.split(':');\n\n    // number\n    var nums = args.map(function (arg) {\n      // use Number and not parseFloat as Number returns NaN on invalid garbage in the string\n      return Number(arg);\n    });\n    var invalid = nums.some(function (num) {\n      return isNaN(num);\n    });\n    if (invalid) {\n      return null;\n    }\n    switch (nums.length) {\n      case 2:\n        return {\n          start: nums[0],\n          end: nums[1],\n          step: 1\n        };\n      case 3:\n        return {\n          start: nums[0],\n          end: nums[2],\n          step: nums[1]\n        };\n      default:\n        return null;\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}