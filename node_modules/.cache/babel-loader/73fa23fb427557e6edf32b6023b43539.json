{"ast":null,"code":"import { matrix, multiply, add, subtract, identity, divide, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = math.matrix(initialEstimate);\n    this.covariance = math.matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = math.multiply(this.covariance, math.divide(this.estimate, math.add(this.lambda, math.multiply(measurement, this.covariance, measurement)))); // Update estimate\n\n    this.estimate = math.add(this.estimate, math.multiply(gain, math.subtract(measurement, math.multiply(measurement, this.estimate)))); // Update covariance\n\n    this.covariance = math.multiply(this.covariance, math.inv(math.add(math.identity(this.covariance.size()[0]), math.multiply(math.multiply(measurement, this.covariance), measurement))));\n    return this.estimate.toArray();\n  }\n\n}\n\nexport default AdaptiveFilter;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/src/pages/AdjustPsotion/SensorFusion.js"],"names":["matrix","multiply","add","subtract","identity","divide","inv","AdaptiveFilter","constructor","initialEstimate","initialCovariance","lambda","estimate","math","covariance","update","measurement","gain","size","toArray"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,GAA3B,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,MAApD,EAA4DC,GAA5D,QAAuE,QAAvE;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,iBAAlB,EAAqCC,MAArC,EAA6C;AACtD,SAAKC,QAAL,GAAgBC,IAAI,CAACb,MAAL,CAAYS,eAAZ,CAAhB;AACA,SAAKK,UAAL,GAAkBD,IAAI,CAACb,MAAL,CAAYU,iBAAZ,CAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd,CAHsD,CAGhC;AACvB;;AAEDI,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB;AACA,UAAMC,IAAI,GAAGJ,IAAI,CAACZ,QAAL,CACX,KAAKa,UADM,EAEXD,IAAI,CAACR,MAAL,CAAY,KAAKO,QAAjB,EAA2BC,IAAI,CAACX,GAAL,CAAS,KAAKS,MAAd,EAAsBE,IAAI,CAACZ,QAAL,CAAce,WAAd,EAA2B,KAAKF,UAAhC,EAA4CE,WAA5C,CAAtB,CAA3B,CAFW,CAAb,CAFkB,CAOlB;;AACA,SAAKJ,QAAL,GAAgBC,IAAI,CAACX,GAAL,CAAS,KAAKU,QAAd,EAAwBC,IAAI,CAACZ,QAAL,CAAcgB,IAAd,EAAoBJ,IAAI,CAACV,QAAL,CAAca,WAAd,EAA2BH,IAAI,CAACZ,QAAL,CAAce,WAAd,EAA2B,KAAKJ,QAAhC,CAA3B,CAApB,CAAxB,CAAhB,CARkB,CAUlB;;AACA,SAAKE,UAAL,GAAkBD,IAAI,CAACZ,QAAL,CAAc,KAAKa,UAAnB,EAA+BD,IAAI,CAACP,GAAL,CAASO,IAAI,CAACX,GAAL,CAASW,IAAI,CAACT,QAAL,CAAc,KAAKU,UAAL,CAAgBI,IAAhB,GAAuB,CAAvB,CAAd,CAAT,EAAmDL,IAAI,CAACZ,QAAL,CAAcY,IAAI,CAACZ,QAAL,CAAce,WAAd,EAA2B,KAAKF,UAAhC,CAAd,EAA2DE,WAA3D,CAAnD,CAAT,CAA/B,CAAlB;AAEA,WAAO,KAAKJ,QAAL,CAAcO,OAAd,EAAP;AACD;;AArBkB;;AAwBrB,eAAeZ,cAAf","sourcesContent":["import { matrix, multiply, add, subtract, identity, divide, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = math.matrix(initialEstimate);\n    this.covariance = math.matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = math.multiply(\n      this.covariance,\n      math.divide(this.estimate, math.add(this.lambda, math.multiply(measurement, this.covariance, measurement)))\n    );\n\n    // Update estimate\n    this.estimate = math.add(this.estimate, math.multiply(gain, math.subtract(measurement, math.multiply(measurement, this.estimate))));\n\n    // Update covariance\n    this.covariance = math.multiply(this.covariance, math.inv(math.add(math.identity(this.covariance.size()[0]), math.multiply(math.multiply(measurement, this.covariance), measurement))));\n\n    return this.estimate.toArray();\n  }\n}\n\nexport default AdaptiveFilter;\n"]},"metadata":{},"sourceType":"module"}