{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'schur';\nvar dependencies = ['typed', 'matrix', 'identity', 'multiply', 'qr', 'norm', 'subtract'];\nexport var createSchur = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    identity,\n    multiply,\n    qr,\n    norm,\n    subtract\n  } = _ref;\n  /**\n   *\n   * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n   * and T is upper quasi-triangular.\n   * https://en.wikipedia.org/wiki/Schur_decomposition\n   *\n   * Syntax:\n   *\n   *     math.schur(A)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 0], [-4, 3]]\n   *     math.schur(A) // returns {T: [[3, 4], [0, 1]], R: [[0, 1], [-1, 0]]}\n   *\n   * See also:\n   *\n   *     sylvester, lyap, qr\n   *\n   * @param {Array | Matrix} A  Matrix A\n   * @return {{U: Array | Matrix, T: Array | Matrix}} Object containing both matrix U and T of the Schur Decomposition A=UTU'\n   */\n\n  return typed(name, {\n    Array: function Array(X) {\n      var r = _schur(matrix(X));\n\n      return {\n        U: r.U.valueOf(),\n        T: r.T.valueOf()\n      };\n    },\n    Matrix: function Matrix(X) {\n      return _schur(X);\n    }\n  });\n\n  function _schur(X) {\n    var n = X.size()[0];\n    var A = X;\n    var U = identity(n);\n    var k = 0;\n    var A0;\n\n    do {\n      A0 = A;\n      var QR = qr(A);\n      var Q = QR.Q;\n      var R = QR.R;\n      A = multiply(R, Q);\n      U = multiply(U, Q);\n\n      if (k++ > 100) {\n        break;\n      }\n    } while (norm(subtract(A, A0)) > 1e-4);\n\n    return {\n      U,\n      T: A\n    };\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/decomposition/schur.js"],"names":["factory","name","dependencies","createSchur","_ref","typed","matrix","identity","multiply","qr","norm","subtract","Array","X","r","_schur","U","valueOf","T","Matrix","n","size","A","k","A0","QR","Q","R"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,OAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,UAApB,EAAgC,UAAhC,EAA4C,IAA5C,EAAkD,MAAlD,EAA0D,UAA1D,CAAnB;AACA,OAAO,IAAIC,WAAW,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC1E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,QAHE;AAIFC,IAAAA,QAJE;AAKFC,IAAAA,EALE;AAMFC,IAAAA,IANE;AAOFC,IAAAA;AAPE,MAQAP,IARJ;AASA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBW,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeC,CAAf,EAAkB;AACvB,UAAIC,CAAC,GAAGC,MAAM,CAACT,MAAM,CAACO,CAAD,CAAP,CAAd;;AACA,aAAO;AACLG,QAAAA,CAAC,EAAEF,CAAC,CAACE,CAAF,CAAIC,OAAJ,EADE;AAELC,QAAAA,CAAC,EAAEJ,CAAC,CAACI,CAAF,CAAID,OAAJ;AAFE,OAAP;AAID,KAPgB;AAQjBE,IAAAA,MAAM,EAAE,SAASA,MAAT,CAAgBN,CAAhB,EAAmB;AACzB,aAAOE,MAAM,CAACF,CAAD,CAAb;AACD;AAVgB,GAAP,CAAZ;;AAYA,WAASE,MAAT,CAAgBF,CAAhB,EAAmB;AACjB,QAAIO,CAAC,GAAGP,CAAC,CAACQ,IAAF,GAAS,CAAT,CAAR;AACA,QAAIC,CAAC,GAAGT,CAAR;AACA,QAAIG,CAAC,GAAGT,QAAQ,CAACa,CAAD,CAAhB;AACA,QAAIG,CAAC,GAAG,CAAR;AACA,QAAIC,EAAJ;;AACA,OAAG;AACDA,MAAAA,EAAE,GAAGF,CAAL;AACA,UAAIG,EAAE,GAAGhB,EAAE,CAACa,CAAD,CAAX;AACA,UAAII,CAAC,GAAGD,EAAE,CAACC,CAAX;AACA,UAAIC,CAAC,GAAGF,EAAE,CAACE,CAAX;AACAL,MAAAA,CAAC,GAAGd,QAAQ,CAACmB,CAAD,EAAID,CAAJ,CAAZ;AACAV,MAAAA,CAAC,GAAGR,QAAQ,CAACQ,CAAD,EAAIU,CAAJ,CAAZ;;AACA,UAAIH,CAAC,KAAK,GAAV,EAAe;AACb;AACD;AACF,KAVD,QAUSb,IAAI,CAACC,QAAQ,CAACW,CAAD,EAAIE,EAAJ,CAAT,CAAJ,GAAwB,IAVjC;;AAWA,WAAO;AACLR,MAAAA,CADK;AAELE,MAAAA,CAAC,EAAEI;AAFE,KAAP;AAID;AACF,CAlE8C,CAAxC","sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'schur';\nvar dependencies = ['typed', 'matrix', 'identity', 'multiply', 'qr', 'norm', 'subtract'];\nexport var createSchur = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    identity,\n    multiply,\n    qr,\n    norm,\n    subtract\n  } = _ref;\n  /**\n   *\n   * Performs a real Schur decomposition of the real matrix A = UTU' where U is orthogonal\n   * and T is upper quasi-triangular.\n   * https://en.wikipedia.org/wiki/Schur_decomposition\n   *\n   * Syntax:\n   *\n   *     math.schur(A)\n   *\n   * Examples:\n   *\n   *     const A = [[1, 0], [-4, 3]]\n   *     math.schur(A) // returns {T: [[3, 4], [0, 1]], R: [[0, 1], [-1, 0]]}\n   *\n   * See also:\n   *\n   *     sylvester, lyap, qr\n   *\n   * @param {Array | Matrix} A  Matrix A\n   * @return {{U: Array | Matrix, T: Array | Matrix}} Object containing both matrix U and T of the Schur Decomposition A=UTU'\n   */\n  return typed(name, {\n    Array: function Array(X) {\n      var r = _schur(matrix(X));\n      return {\n        U: r.U.valueOf(),\n        T: r.T.valueOf()\n      };\n    },\n    Matrix: function Matrix(X) {\n      return _schur(X);\n    }\n  });\n  function _schur(X) {\n    var n = X.size()[0];\n    var A = X;\n    var U = identity(n);\n    var k = 0;\n    var A0;\n    do {\n      A0 = A;\n      var QR = qr(A);\n      var Q = QR.Q;\n      var R = QR.R;\n      A = multiply(R, Q);\n      U = multiply(U, Q);\n      if (k++ > 100) {\n        break;\n      }\n    } while (norm(subtract(A, A0)) > 1e-4);\n    return {\n      U,\n      T: A\n    };\n  }\n});"]},"metadata":{},"sourceType":"module"}