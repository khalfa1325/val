{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\n\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\n\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n\n      if (is1d(array)) {\n        return self(...array);\n      }\n\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n    var zero = new BigNumber(0);\n\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n\n    return a.lt(zero) ? a.neg() : a;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/gcd.js"],"names":["factory","createMatAlgo01xDSid","createMatAlgo04xSidSid","createMatAlgo10xSids","createMatrixAlgorithmSuite","gcdNumber","ArgumentsError","name","dependencies","gcdTypes","gcdManyTypesSignature","concat","is1d","array","some","element","Array","isArray","createGcd","_ref","typed","matrix","equalScalar","BigNumber","DenseMatrix","matAlgo01xDSid","matAlgo04xSidSid","matAlgo10xSids","matrixAlgorithmSuite","_gcdBigNumber","x","y","gcd","SS","DS","Ss","referToSelf","self","a","b","args","res","i","length","Matrix","toArray","isInt","Error","zero","isZero","r","mod","lt","neg"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo04xSidSid } from '../../type/matrix/utils/matAlgo04xSidSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { gcdNumber } from '../../plain/number/index.js';\nimport { ArgumentsError } from '../../error/ArgumentsError.js';\nvar name = 'gcd';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'DenseMatrix', 'concat'];\nvar gcdTypes = 'number | BigNumber | Fraction | Matrix | Array';\nvar gcdManyTypesSignature = \"\".concat(gcdTypes, \", \").concat(gcdTypes, \", ...\").concat(gcdTypes);\nfunction is1d(array) {\n  return !array.some(element => Array.isArray(element));\n}\nexport var createGcd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo04xSidSid = createMatAlgo04xSidSid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the greatest common divisor for two or more values or arrays.\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.gcd(a, b)\n   *    math.gcd(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.gcd(8, 12)              // returns 4\n   *    math.gcd(-4, 6)              // returns 2\n   *    math.gcd(25, 15, -10)        // returns 5\n   *\n   *    math.gcd([8, -4], [12, 6])   // returns [4, 2]\n   *\n   * See also:\n   *\n   *    lcm, xgcd\n   *\n   * @param {... number | BigNumber | Fraction | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Fraction | Array | Matrix}                           The greatest common divisor\n   */\n  return typed(name, {\n    'number, number': gcdNumber,\n    'BigNumber, BigNumber': _gcdBigNumber,\n    'Fraction, Fraction': (x, y) => x.gcd(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo04xSidSid,\n    DS: matAlgo01xDSid,\n    Ss: matAlgo10xSids\n  }), {\n    [gcdManyTypesSignature]: typed.referToSelf(self => (a, b, args) => {\n      var res = self(a, b);\n      for (var i = 0; i < args.length; i++) {\n        res = self(res, args[i]);\n      }\n      return res;\n    }),\n    Array: typed.referToSelf(self => array => {\n      if (array.length === 1 && Array.isArray(array[0]) && is1d(array[0])) {\n        return self(...array[0]);\n      }\n      if (is1d(array)) {\n        return self(...array);\n      }\n      throw new ArgumentsError('gcd() supports only 1d matrices!');\n    }),\n    Matrix: typed.referToSelf(self => matrix => {\n      return self(matrix.toArray());\n    })\n  });\n\n  /**\n   * Calculate gcd for BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns greatest common denominator of a and b\n   * @private\n   */\n  function _gcdBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function gcd must be integer numbers');\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    var zero = new BigNumber(0);\n    while (!b.isZero()) {\n      var r = a.mod(b);\n      a = b;\n      b = r;\n    }\n    return a.lt(zero) ? a.neg() : a;\n  }\n});"]},"metadata":{},"sourceType":"module"}