{"ast":null,"code":"import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { setSafeProperty } from '../../../utils/customs.js';\nexport function assignFactory(_ref) {\n  var {\n    subset,\n    matrix\n  } = _ref;\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        var result = matrix(object).subset(index, value).valueOf(); // shallow copy all (updated) items into the original array\n\n        result.forEach((item, index) => {\n          object[index] = item;\n        });\n        return object;\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/node/utils/assign.js"],"names":["errorTransform","setSafeProperty","assignFactory","_ref","subset","matrix","assign","object","index","value","Array","isArray","result","valueOf","forEach","item","isObjectProperty","TypeError","getObjectProperty","err"],"mappings":"AAAA,SAASA,cAAT,QAA+B,yCAA/B;AACA,SAASC,eAAT,QAAgC,2BAAhC;AACA,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AAClC,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACE;;AACA,SAAO,SAASG,MAAT,CAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,KAA/B,EAAsC;AAC3C,QAAI;AACF,UAAIC,KAAK,CAACC,OAAN,CAAcJ,MAAd,CAAJ,EAA2B;AACzB,YAAIK,MAAM,GAAGP,MAAM,CAACE,MAAD,CAAN,CAAeH,MAAf,CAAsBI,KAAtB,EAA6BC,KAA7B,EAAoCI,OAApC,EAAb,CADyB,CAGzB;;AACAD,QAAAA,MAAM,CAACE,OAAP,CAAe,CAACC,IAAD,EAAOP,KAAP,KAAiB;AAC9BD,UAAAA,MAAM,CAACC,KAAD,CAAN,GAAgBO,IAAhB;AACD,SAFD;AAGA,eAAOR,MAAP;AACD,OARD,MAQO,IAAIA,MAAM,IAAI,OAAOA,MAAM,CAACH,MAAd,KAAyB,UAAvC,EAAmD;AACxD;AACA,eAAOG,MAAM,CAACH,MAAP,CAAcI,KAAd,EAAqBC,KAArB,CAAP;AACD,OAHM,MAGA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AACrC;AACA,eAAOH,MAAM,CAACG,MAAD,EAASC,KAAT,EAAgBC,KAAhB,CAAb;AACD,OAHM,MAGA,IAAI,OAAOF,MAAP,KAAkB,QAAtB,EAAgC;AACrC,YAAI,CAACC,KAAK,CAACQ,gBAAN,EAAL,EAA+B;AAC7B,gBAAMC,SAAS,CAAC,iDAAD,CAAf;AACD;;AACDhB,QAAAA,eAAe,CAACM,MAAD,EAASC,KAAK,CAACU,iBAAN,EAAT,EAAoCT,KAApC,CAAf;AACA,eAAOF,MAAP;AACD,OANM,MAMA;AACL,cAAM,IAAIU,SAAJ,CAAc,gDAAd,CAAN;AACD;AACF,KAxBD,CAwBE,OAAOE,GAAP,EAAY;AACZ,YAAMnB,cAAc,CAACmB,GAAD,CAApB;AACD;AACF,GA5BD;AA6BD","sourcesContent":["import { errorTransform } from '../../transform/utils/errorTransform.js';\nimport { setSafeProperty } from '../../../utils/customs.js';\nexport function assignFactory(_ref) {\n  var {\n    subset,\n    matrix\n  } = _ref;\n  /**\n   * Replace part of an object:\n   *\n   * - Assign a property to an object\n   * - Replace a part of a string\n   * - Replace a matrix subset\n   *\n   * @param {Object | Array | Matrix | string} object\n   * @param {Index} index\n   * @param {*} value\n   * @return {Object | Array | Matrix | string} Returns the original object\n   *                                            except in case of a string\n   */\n  // TODO: change assign to return the value instead of the object\n  return function assign(object, index, value) {\n    try {\n      if (Array.isArray(object)) {\n        var result = matrix(object).subset(index, value).valueOf();\n\n        // shallow copy all (updated) items into the original array\n        result.forEach((item, index) => {\n          object[index] = item;\n        });\n        return object;\n      } else if (object && typeof object.subset === 'function') {\n        // Matrix\n        return object.subset(index, value);\n      } else if (typeof object === 'string') {\n        // TODO: move setStringSubset into a separate util file, use that\n        return subset(object, index, value);\n      } else if (typeof object === 'object') {\n        if (!index.isObjectProperty()) {\n          throw TypeError('Cannot apply a numeric index as object property');\n        }\n        setSafeProperty(object, index.getObjectProperty(), value);\n        return object;\n      } else {\n        throw new TypeError('Cannot apply index: unsupported type of object');\n      }\n    } catch (err) {\n      throw errorTransform(err);\n    }\n  };\n}"]},"metadata":{},"sourceType":"module"}