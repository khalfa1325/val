{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'freqz';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'divide', 'matrix'];\nexport var createFreqz = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    divide,\n    matrix\n  } = _ref;\n  /**\n     * Calculates the frequency response of a filter given its numerator and denominator coefficients.\n     *\n     * Syntax:\n     *    math.freqz(b, a)\n     *    math.freqz(b, a, w)\n     *\n     * Examples:\n     *   math.freqz([1, 2], [1, 2, 3], 4) // returns { h: [0.5 + 0i, 0.4768589245763655 + 0.2861153547458193i, 0.25000000000000006 + 0.75i, -0.770976571635189 + 0.4625859429811135i], w: [0, 0.7853981633974483, 1.5707963267948966, 2.356194490192345 ] }\n     *   math.freqz([1, 2], [1, 2, 3], [0, 1]) // returns { h: [0.5 + 0i, 0.45436781 + 0.38598051i], w: [0, 1] }\n     *\n     * See also:\n     *  zpk2tf\n     *\n     * @param {Array.<number>} b The numerator coefficients of the filter.\n     * @param {Array.<number>} a The denominator coefficients of the filter.\n     * @param {Array.<number>} [w] A vector of frequencies (in radians/sample) at which the frequency response is to be computed or the number of points to compute (if a number is not provided, the default is 512 points)\n     * @returns {Object} An object with two properties: h, a vector containing the complex frequency response, and w, a vector containing the normalized frequencies (in radians/sample) at which the response was computed.\n     *\n     *\n     */\n\n  return typed(name, {\n    'Array, Array': function ArrayArray(b, a) {\n      var w = createBins(512);\n      return _freqz(b, a, w);\n    },\n    'Array, Array, Array': function ArrayArrayArray(b, a, w) {\n      return _freqz(b, a, w);\n    },\n    'Array, Array, number': function ArrayArrayNumber(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n\n      var w2 = createBins(w);\n      return _freqz(b, a, w2);\n    },\n    'Matrix, Matrix': function MatrixMatrix(b, a) {\n      // console.log('here')\n      var _w = createBins(512);\n\n      var {\n        w,\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n\n      return {\n        w: matrix(w),\n        h: matrix(h)\n      };\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(b, a, w) {\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), w.valueOf());\n\n      return {\n        h: matrix(h),\n        w: matrix(w)\n      };\n    },\n    'Matrix, Matrix, number': function MatrixMatrixNumber(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n\n      var _w = createBins(w);\n\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n\n      return {\n        h: matrix(h),\n        w: matrix(_w)\n      };\n    }\n  });\n\n  function _freqz(b, a, w) {\n    var num = [];\n    var den = [];\n\n    for (var i = 0; i < w.length; i++) {\n      var sumNum = Complex(0, 0);\n      var sumDen = Complex(0, 0);\n\n      for (var j = 0; j < b.length; j++) {\n        sumNum = add(sumNum, multiply(b[j], Complex(Math.cos(-j * w[i]), Math.sin(-j * w[i]))));\n      }\n\n      for (var _j = 0; _j < a.length; _j++) {\n        sumDen = add(sumDen, multiply(a[_j], Complex(Math.cos(-_j * w[i]), Math.sin(-_j * w[i]))));\n      }\n\n      num.push(sumNum);\n      den.push(sumDen);\n    }\n\n    var h = [];\n\n    for (var _i = 0; _i < num.length; _i++) {\n      h.push(divide(num[_i], den[_i]));\n    }\n\n    return {\n      h,\n      w\n    };\n  }\n\n  function createBins(n) {\n    var bins = [];\n\n    for (var i = 0; i < n; i++) {\n      bins.push(i / n * Math.PI);\n    }\n\n    return bins;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/signal/freqz.js"],"names":["factory","name","dependencies","createFreqz","_ref","typed","add","multiply","Complex","divide","matrix","ArrayArray","b","a","w","createBins","_freqz","ArrayArrayArray","ArrayArrayNumber","Error","w2","MatrixMatrix","_w","h","valueOf","MatrixMatrixMatrix","MatrixMatrixNumber","num","den","i","length","sumNum","sumDen","j","Math","cos","sin","_j","push","_i","n","bins","PI"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'freqz';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'divide', 'matrix'];\nexport var createFreqz = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    divide,\n    matrix\n  } = _ref;\n  /**\n     * Calculates the frequency response of a filter given its numerator and denominator coefficients.\n     *\n     * Syntax:\n     *    math.freqz(b, a)\n     *    math.freqz(b, a, w)\n     *\n     * Examples:\n     *   math.freqz([1, 2], [1, 2, 3], 4) // returns { h: [0.5 + 0i, 0.4768589245763655 + 0.2861153547458193i, 0.25000000000000006 + 0.75i, -0.770976571635189 + 0.4625859429811135i], w: [0, 0.7853981633974483, 1.5707963267948966, 2.356194490192345 ] }\n     *   math.freqz([1, 2], [1, 2, 3], [0, 1]) // returns { h: [0.5 + 0i, 0.45436781 + 0.38598051i], w: [0, 1] }\n     *\n     * See also:\n     *  zpk2tf\n     *\n     * @param {Array.<number>} b The numerator coefficients of the filter.\n     * @param {Array.<number>} a The denominator coefficients of the filter.\n     * @param {Array.<number>} [w] A vector of frequencies (in radians/sample) at which the frequency response is to be computed or the number of points to compute (if a number is not provided, the default is 512 points)\n     * @returns {Object} An object with two properties: h, a vector containing the complex frequency response, and w, a vector containing the normalized frequencies (in radians/sample) at which the response was computed.\n     *\n     *\n     */\n  return typed(name, {\n    'Array, Array': function ArrayArray(b, a) {\n      var w = createBins(512);\n      return _freqz(b, a, w);\n    },\n    'Array, Array, Array': function ArrayArrayArray(b, a, w) {\n      return _freqz(b, a, w);\n    },\n    'Array, Array, number': function ArrayArrayNumber(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n      var w2 = createBins(w);\n      return _freqz(b, a, w2);\n    },\n    'Matrix, Matrix': function MatrixMatrix(b, a) {\n      // console.log('here')\n      var _w = createBins(512);\n      var {\n        w,\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n      return {\n        w: matrix(w),\n        h: matrix(h)\n      };\n    },\n    'Matrix, Matrix, Matrix': function MatrixMatrixMatrix(b, a, w) {\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), w.valueOf());\n      return {\n        h: matrix(h),\n        w: matrix(w)\n      };\n    },\n    'Matrix, Matrix, number': function MatrixMatrixNumber(b, a, w) {\n      if (w < 0) {\n        throw new Error('w must be a positive number');\n      }\n      var _w = createBins(w);\n      var {\n        h\n      } = _freqz(b.valueOf(), a.valueOf(), _w);\n      return {\n        h: matrix(h),\n        w: matrix(_w)\n      };\n    }\n  });\n  function _freqz(b, a, w) {\n    var num = [];\n    var den = [];\n    for (var i = 0; i < w.length; i++) {\n      var sumNum = Complex(0, 0);\n      var sumDen = Complex(0, 0);\n      for (var j = 0; j < b.length; j++) {\n        sumNum = add(sumNum, multiply(b[j], Complex(Math.cos(-j * w[i]), Math.sin(-j * w[i]))));\n      }\n      for (var _j = 0; _j < a.length; _j++) {\n        sumDen = add(sumDen, multiply(a[_j], Complex(Math.cos(-_j * w[i]), Math.sin(-_j * w[i]))));\n      }\n      num.push(sumNum);\n      den.push(sumDen);\n    }\n    var h = [];\n    for (var _i = 0; _i < num.length; _i++) {\n      h.push(divide(num[_i], den[_i]));\n    }\n    return {\n      h,\n      w\n    };\n  }\n  function createBins(n) {\n    var bins = [];\n    for (var i = 0; i < n; i++) {\n      bins.push(i / n * Math.PI);\n    }\n    return bins;\n  }\n});"]},"metadata":{},"sourceType":"module"}