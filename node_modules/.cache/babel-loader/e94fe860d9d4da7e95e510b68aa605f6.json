{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     math.polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n\n            var _denom = unaryMinus(multiply(3, _a));\n\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)), // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            } // OK, we have three distinct roots\n\n\n            var Ccubed;\n\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n\n              return r;\n            });\n          }\n\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/polynomialRoot.js"],"names":["factory","name","dependencies","createPolynomialRoot","_ref","typed","isZero","equalScalar","add","subtract","multiply","divide","sqrt","unaryMinus","cbrt","typeOf","im","re","constant","restCoeffs","coeffs","length","pop","RangeError","concat","c","b","a","denom","d1","d2","discriminant","d","_c","_b","_a","_denom","D0_1","D0_2","D1_1","D1_2","Delta0","Delta1","discriminant1","discriminant2","Ccubed","allRoots","rawRoots","toArray","map","C","r"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'polynomialRoot';\nvar dependencies = ['typed', 'isZero', 'equalScalar', 'add', 'subtract', 'multiply', 'divide', 'sqrt', 'unaryMinus', 'cbrt', 'typeOf', 'im', 're'];\nexport var createPolynomialRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    isZero,\n    equalScalar,\n    add,\n    subtract,\n    multiply,\n    divide,\n    sqrt,\n    unaryMinus,\n    cbrt,\n    typeOf,\n    im,\n    re\n  } = _ref;\n  /**\n   * Finds the numerical values of the distinct roots of a polynomial with real or complex coefficients.\n   * Currently operates only on linear, quadratic, and cubic polynomials using the standard\n   * formulas for the roots.\n   *\n   * Syntax:\n   *\n   *     math.polynomialRoot(constant, linearCoeff, quadraticCoeff, cubicCoeff)\n   *\n   * Examples:\n   *     // linear\n   *     math.polynomialRoot(6, 3)                                        // [-2]\n   *     math.polynomialRoot(math.complex(6,3), 3)                        // [-2 - i]\n   *     math.polynomialRoot(math.complex(6,3), math.complex(2,1))        // [-3 + 0i]\n   *     // quadratic\n   *     math.polynomialRoot(2, -3, 1)                                    // [2, 1]\n   *     math.polynomialRoot(8, 8, 2)                                     // [-2]\n   *     math.polynomialRoot(-2, 0, 1)                                    // [1.4142135623730951, -1.4142135623730951]\n   *     math.polynomialRoot(2, -2, 1)                                    // [1 + i, 1 - i]\n   *     math.polynomialRoot(math.complex(1,3), math.complex(-3, -2), 1)  // [2 + i, 1 + i]\n   *     // cubic\n   *     math.polynomialRoot(-6, 11, -6, 1)                               // [1, 3, 2]\n   *     math.polynomialRoot(-8, 0, 0, 1)                                 // [-1 - 1.7320508075688774i, 2, -1 + 1.7320508075688774i]\n   *     math.polynomialRoot(0, 8, 8, 2)                                  // [0, -2]\n   *     math.polynomialRoot(1, 1, 1, 1)                                  // [-1 + 0i, 0 - i, 0 + i]\n   *\n   * See also:\n   *     cbrt, sqrt\n   *\n   * @param {... number | Complex} coeffs\n   *     The coefficients of the polynomial, starting with with the constant coefficent, followed\n   *     by the linear coefficient and subsequent coefficients of increasing powers.\n   * @return {Array} The distinct roots of the polynomial\n   */\n\n  return typed(name, {\n    'number|Complex, ...number|Complex': (constant, restCoeffs) => {\n      var coeffs = [constant, ...restCoeffs];\n      while (coeffs.length > 0 && isZero(coeffs[coeffs.length - 1])) {\n        coeffs.pop();\n      }\n      if (coeffs.length < 2) {\n        throw new RangeError(\"Polynomial [\".concat(constant, \", \").concat(restCoeffs, \"] must have a non-zero non-constant coefficient\"));\n      }\n      switch (coeffs.length) {\n        case 2:\n          // linear\n          return [unaryMinus(divide(coeffs[0], coeffs[1]))];\n        case 3:\n          {\n            // quadratic\n            var [c, b, a] = coeffs;\n            var denom = multiply(2, a);\n            var d1 = multiply(b, b);\n            var d2 = multiply(4, a, c);\n            if (equalScalar(d1, d2)) return [divide(unaryMinus(b), denom)];\n            var discriminant = sqrt(subtract(d1, d2));\n            return [divide(subtract(discriminant, b), denom), divide(subtract(unaryMinus(discriminant), b), denom)];\n          }\n        case 4:\n          {\n            // cubic, cf. https://en.wikipedia.org/wiki/Cubic_equation\n            var [d, _c, _b, _a] = coeffs;\n            var _denom = unaryMinus(multiply(3, _a));\n            var D0_1 = multiply(_b, _b);\n            var D0_2 = multiply(3, _a, _c);\n            var D1_1 = add(multiply(2, _b, _b, _b), multiply(27, _a, _a, d));\n            var D1_2 = multiply(9, _a, _b, _c);\n            if (equalScalar(D0_1, D0_2) && equalScalar(D1_1, D1_2)) {\n              return [divide(_b, _denom)];\n            }\n            var Delta0 = subtract(D0_1, D0_2);\n            var Delta1 = subtract(D1_1, D1_2);\n            var discriminant1 = add(multiply(18, _a, _b, _c, d), multiply(_b, _b, _c, _c));\n            var discriminant2 = add(multiply(4, _b, _b, _b, d), multiply(4, _a, _c, _c, _c), multiply(27, _a, _a, d, d));\n            if (equalScalar(discriminant1, discriminant2)) {\n              return [divide(subtract(multiply(4, _a, _b, _c), add(multiply(9, _a, _a, d), multiply(_b, _b, _b))), multiply(_a, Delta0)),\n              // simple root\n              divide(subtract(multiply(9, _a, d), multiply(_b, _c)), multiply(2, Delta0)) // double root\n              ];\n            }\n            // OK, we have three distinct roots\n            var Ccubed;\n            if (equalScalar(D0_1, D0_2)) {\n              Ccubed = Delta1;\n            } else {\n              Ccubed = divide(add(Delta1, sqrt(subtract(multiply(Delta1, Delta1), multiply(4, Delta0, Delta0, Delta0)))), 2);\n            }\n            var allRoots = true;\n            var rawRoots = cbrt(Ccubed, allRoots).toArray().map(C => divide(add(_b, C, divide(Delta0, C)), _denom));\n            return rawRoots.map(r => {\n              if (typeOf(r) === 'Complex' && equalScalar(re(r), re(r) + im(r))) {\n                return re(r);\n              }\n              return r;\n            });\n          }\n        default:\n          throw new RangeError(\"only implemented for cubic or lower-order polynomials, not \".concat(coeffs));\n      }\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}