{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    } // a matrix arrays\n\n\n    var asize = a._size; // rows and columns\n\n    var m = asize[0];\n    var n = asize[1]; // initialize vars\n\n    var lemax = 0; // dense threshold\n\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense); // create target matrix C\n\n    var cm = _createTargetMatrix(order, a, m, n, dense); // drop diagonal entries\n\n\n    csFkeep(cm, _diag, null); // C matrix arrays\n\n    var cindex = cm._index;\n    var cptr = cm._ptr; // number of nonzero elements in C\n\n    var cnz = cptr[n]; // allocate result (n+1)\n\n    var P = []; // create workspace (8 * (n + 1))\n\n    var W = [];\n    var len = 0; // first n + 1 entries\n\n    var nv = n + 1; // next n + 1 entries\n\n    var next = 2 * (n + 1); // next n + 1 entries\n\n    var head = 3 * (n + 1); // next n + 1 entries\n\n    var elen = 4 * (n + 1); // next n + 1 entries\n\n    var degree = 5 * (n + 1); // next n + 1 entries\n\n    var w = 6 * (n + 1); // next n + 1 entries\n\n    var hhead = 7 * (n + 1); // last n + 1 entries\n    // use P as workspace for last\n\n    var last = P; // initialize quotient graph\n\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree); // initialize degree lists\n\n\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next); // minimum degree node\n\n\n    var mindeg = 0; // vars\n\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d; // while (selecting pivots) do\n\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++);\n\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      } // remove k from degree list\n\n\n      W[head + mindeg] = W[next + k]; // elenk = |Ek|\n\n      var elenk = W[elen + k]; // # of nodes k represents\n\n      var nvk = W[nv + k]; // W[nv + k] nodes of A eliminated\n\n      nel += nvk; // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n\n      var dk = 0; // flag k as in Lk\n\n      W[nv + k] = -nvk;\n      var p = cptr[k]; // do in place if W[elen + k] === 0\n\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k; // list of nodes starts at cindex[pj]\n\n          pj = p; // length of list of nodes in k\n\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e]; // length of list of nodes in e\n\n          ln = W[len + e];\n        }\n\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++]; // check  node i dead, or seen\n\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          } // W[degree + Lk] += size of node i\n\n\n          dk += nvi; // negate W[nv + i] to denote i in Lk\n\n          W[nv + i] = -nvi; // place i in Lk\n\n          cindex[pk2++] = i;\n\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          } // check we need to remove i from degree list\n\n\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k); // e is now a dead element\n\n          W[w + e] = 0;\n        }\n      } // cindex[cnz...nzmax] is free\n\n\n      if (elenk !== 0) {\n        cnz = pk2;\n      } // external degree of k - |Lk\\i|\n\n\n      W[degree + k] = dk; // element k is in cindex[pk1..pk2-1]\n\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1; // k is now an element\n\n      W[elen + k] = -2; // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n      // clear w if necessary\n\n      mark = _wclear(mark, lemax, W, w, n); // scan 1: find |Le\\Lk|\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check if W[elen + i] empty, skip it\n\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        } // W[nv + i] was negated\n\n\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi; // scan Ei\n\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      } // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n      // scan2: degree update\n\n\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1; // scan Ei\n\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p]; // check e is an unabsorbed element\n\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext; // keep e in Ei\n\n              cindex[pn++] = e; // compute the hash of node i\n\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k); // e is a dead element\n\n              W[w + e] = 0;\n            }\n          }\n        } // W[elen + i] = |Ei|\n\n\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i]; // prune edges in Ai\n\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p]; // check node j dead or in Lk\n\n          var nvj = W[nv + j];\n\n          if (nvj <= 0) {\n            continue;\n          } // degree(i) += |j|\n\n\n          d += nvj; // place j in node list of i\n\n          cindex[pn++] = j; // compute hash for node i\n\n          h += j;\n        } // check for mass elimination\n\n\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i]; // |Lk| -= |i|\n\n          dk -= nvi; // |k| += W[nv + i]\n\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0; // node i is dead\n\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d); // move first node to end\n\n          cindex[pn] = cindex[p3]; // move 1st el. to end of Ei\n\n          cindex[p3] = cindex[p1]; // add k as 1st element in of Ei\n\n          cindex[p1] = k; // new len of adj. list of node i\n\n          W[len + i] = pn - p1 + 1; // finalize hash of i\n\n          h = (h < 0 ? -h : h) % n; // place i in hash bucket\n\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i; // save hash of i in last[i]\n\n          last[i] = h;\n        }\n      } // finalize |Lk|\n\n\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk); // clear w\n\n      mark = _wclear(mark + lemax, lemax, W, w, n); // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check i is dead, skip it\n\n        if (W[nv + i] >= 0) {\n          continue;\n        } // scan hash bucket of node i\n\n\n        h = last[i];\n        i = W[hhead + h]; // hash bucket will be empty\n\n        W[hhead + h] = -1;\n\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n\n          var jlast = i; // compare i with all j\n\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            } // check i and j are identical\n\n\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0; // node j is dead\n\n              W[elen + j] = -1; // delete j from hash bucket\n\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      } // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n\n\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk]; // check  i is dead, skip it\n\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        } // restore W[nv + i]\n\n\n        W[nv + i] = nvi; // compute external degree(i)\n\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        } // put i back in degree list\n\n\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i; // find new minimum degree\n\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d; // place i in Lk\n\n        cindex[p++] = i;\n      } // # nodes absorbed into k\n\n\n      W[nv + k] = nvk; // length of adj list of element k\n\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1; // k is now a dead element\n\n        W[w + k] = 0;\n      }\n\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    } // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n    // fix assembly tree\n\n\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    } // place unordered nodes in lists\n\n\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      } // place j in list of its parent\n\n\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    } // place elements in lists\n\n\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    } // postorder the assembly tree\n\n\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    } // remove last item in array\n\n\n    P.splice(P.length - 1, 1); // return P\n\n    return P;\n  };\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a); // check order = 1, matrix must be square\n\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    } // check order = 2, drop dense columns from M'\n\n\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr; // new column index\n\n      var p2 = 0; // loop A' columns (rows)\n\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j]; // new column j starts here\n\n        tptr[j] = p2; // skip dense col j\n\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        } // map rows in column j of A\n\n\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      } // finalize AT\n\n\n      tptr[m] = p2; // recreate A from new transpose matrix\n\n      a = transpose(at); // use A' * A\n\n      return multiply(at, a);\n    } // use A' * A, square or rectangular matrix\n\n\n    return multiply(at, a);\n  }\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n\n\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n\n    W[len + n] = 0; // initialize workspace\n\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1; // hash list i is empty\n\n      W[hhead + i] = -1; // node i is just one node\n\n      W[nv + i] = 1; // node i is alive\n\n      W[w + i] = 1; // Ek of node i is empty\n\n      W[elen + i] = 0; // degree of node i\n\n      W[degree + i] = W[len + i];\n    } // clear w\n\n\n    var mark = _wclear(0, 0, W, w, n); // n is a dead element\n\n\n    W[elen + n] = -2; // n is a root of assembly tree\n\n    cptr[n] = -1; // n is a dead element\n\n    W[w + n] = 0; // return mark\n\n    return mark;\n  }\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n\n\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0; // loop columns\n\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i]; // check node i is empty\n\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++; // i is a root of assembly tree\n\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0; // node i is dead\n\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n\n        if (h !== -1) {\n          last[h] = i;\n        } // put node i in degree list d\n\n\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n\n    return nel;\n  }\n\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n\n      mark = 2;\n    } // at this point, W [0..n-1] < mark holds\n\n\n    return mark;\n  }\n\n  function _diag(i, j) {\n    return i !== j;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/sparse/csAmd.js"],"names":["factory","csFkeep","csFlip","csTdfs","name","dependencies","createCsAmd","_ref","add","multiply","transpose","csAmd","order","a","asize","_size","m","n","lemax","dense","Math","max","sqrt","min","cm","_createTargetMatrix","_diag","cindex","_index","cptr","_ptr","cnz","P","W","len","nv","next","head","elen","degree","w","hhead","last","mark","_initializeQuotientGraph","nel","_initializeDegreeLists","mindeg","i","j","k","k1","k2","e","pj","ln","nvi","pk","eln","p1","p2","pn","h","d","elenk","nvk","dk","p","pk1","pk2","_wclear","wnvi","dext","p3","p4","nvj","jlast","ok","splice","length","at","tindex","tptr"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { csFkeep } from './csFkeep.js';\nimport { csFlip } from './csFlip.js';\nimport { csTdfs } from './csTdfs.js';\nvar name = 'csAmd';\nvar dependencies = ['add', 'multiply', 'transpose'];\nexport var createCsAmd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    add,\n    multiply,\n    transpose\n  } = _ref;\n  /**\n   * Approximate minimum degree ordering. The minimum degree algorithm is a widely used\n   * heuristic for finding a permutation P so that P*A*P' has fewer nonzeros in its factorization\n   * than A. It is a gready method that selects the sparsest pivot row and column during the course\n   * of a right looking sparse Cholesky factorization.\n   *\n   * Reference: http://faculty.cse.tamu.edu/davis/publications.html\n   *\n   * @param {Number} order    0: Natural, 1: Cholesky, 2: LU, 3: QR\n   * @param {Matrix} m        Sparse Matrix\n   */\n  return function csAmd(order, a) {\n    // check input parameters\n    if (!a || order <= 0 || order > 3) {\n      return null;\n    }\n    // a matrix arrays\n    var asize = a._size;\n    // rows and columns\n    var m = asize[0];\n    var n = asize[1];\n    // initialize vars\n    var lemax = 0;\n    // dense threshold\n    var dense = Math.max(16, 10 * Math.sqrt(n));\n    dense = Math.min(n - 2, dense);\n    // create target matrix C\n    var cm = _createTargetMatrix(order, a, m, n, dense);\n    // drop diagonal entries\n    csFkeep(cm, _diag, null);\n    // C matrix arrays\n    var cindex = cm._index;\n    var cptr = cm._ptr;\n\n    // number of nonzero elements in C\n    var cnz = cptr[n];\n\n    // allocate result (n+1)\n    var P = [];\n\n    // create workspace (8 * (n + 1))\n    var W = [];\n    var len = 0; // first n + 1 entries\n    var nv = n + 1; // next n + 1 entries\n    var next = 2 * (n + 1); // next n + 1 entries\n    var head = 3 * (n + 1); // next n + 1 entries\n    var elen = 4 * (n + 1); // next n + 1 entries\n    var degree = 5 * (n + 1); // next n + 1 entries\n    var w = 6 * (n + 1); // next n + 1 entries\n    var hhead = 7 * (n + 1); // last n + 1 entries\n\n    // use P as workspace for last\n    var last = P;\n\n    // initialize quotient graph\n    var mark = _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree);\n\n    // initialize degree lists\n    var nel = _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next);\n\n    // minimum degree node\n    var mindeg = 0;\n\n    // vars\n    var i, j, k, k1, k2, e, pj, ln, nvi, pk, eln, p1, p2, pn, h, d;\n\n    // while (selecting pivots) do\n    while (nel < n) {\n      // select node of minimum approximate degree. amd() is now ready to start eliminating the graph. It first\n      // finds a node k of minimum degree and removes it from its degree list. The variable nel keeps track of thow\n      // many nodes have been eliminated.\n      for (k = -1; mindeg < n && (k = W[head + mindeg]) === -1; mindeg++);\n      if (W[next + k] !== -1) {\n        last[W[next + k]] = -1;\n      }\n      // remove k from degree list\n      W[head + mindeg] = W[next + k];\n      // elenk = |Ek|\n      var elenk = W[elen + k];\n      // # of nodes k represents\n      var nvk = W[nv + k];\n      // W[nv + k] nodes of A eliminated\n      nel += nvk;\n\n      // Construct a new element. The new element Lk is constructed in place if |Ek| = 0. nv[i] is\n      // negated for all nodes i in Lk to flag them as members of this set. Each node i is removed from the\n      // degree lists. All elements e in Ek are absorved into element k.\n      var dk = 0;\n      // flag k as in Lk\n      W[nv + k] = -nvk;\n      var p = cptr[k];\n      // do in place if W[elen + k] === 0\n      var pk1 = elenk === 0 ? p : cnz;\n      var pk2 = pk1;\n      for (k1 = 1; k1 <= elenk + 1; k1++) {\n        if (k1 > elenk) {\n          // search the nodes in k\n          e = k;\n          // list of nodes starts at cindex[pj]\n          pj = p;\n          // length of list of nodes in k\n          ln = W[len + k] - elenk;\n        } else {\n          // search the nodes in e\n          e = cindex[p++];\n          pj = cptr[e];\n          // length of list of nodes in e\n          ln = W[len + e];\n        }\n        for (k2 = 1; k2 <= ln; k2++) {\n          i = cindex[pj++];\n          // check  node i dead, or seen\n          if ((nvi = W[nv + i]) <= 0) {\n            continue;\n          }\n          // W[degree + Lk] += size of node i\n          dk += nvi;\n          // negate W[nv + i] to denote i in Lk\n          W[nv + i] = -nvi;\n          // place i in Lk\n          cindex[pk2++] = i;\n          if (W[next + i] !== -1) {\n            last[W[next + i]] = last[i];\n          }\n          // check we need to remove i from degree list\n          if (last[i] !== -1) {\n            W[next + last[i]] = W[next + i];\n          } else {\n            W[head + W[degree + i]] = W[next + i];\n          }\n        }\n        if (e !== k) {\n          // absorb e into k\n          cptr[e] = csFlip(k);\n          // e is now a dead element\n          W[w + e] = 0;\n        }\n      }\n      // cindex[cnz...nzmax] is free\n      if (elenk !== 0) {\n        cnz = pk2;\n      }\n      // external degree of k - |Lk\\i|\n      W[degree + k] = dk;\n      // element k is in cindex[pk1..pk2-1]\n      cptr[k] = pk1;\n      W[len + k] = pk2 - pk1;\n      // k is now an element\n      W[elen + k] = -2;\n\n      // Find set differences. The scan1 function now computes the set differences |Le \\ Lk| for all elements e. At the start of the\n      // scan, no entry in the w array is greater than or equal to mark.\n\n      // clear w if necessary\n      mark = _wclear(mark, lemax, W, w, n);\n      // scan 1: find |Le\\Lk|\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check if W[elen + i] empty, skip it\n        if ((eln = W[elen + i]) <= 0) {\n          continue;\n        }\n        // W[nv + i] was negated\n        nvi = -W[nv + i];\n        var wnvi = mark - nvi;\n        // scan Ei\n        for (p = cptr[i], p1 = cptr[i] + eln - 1; p <= p1; p++) {\n          e = cindex[p];\n          if (W[w + e] >= mark) {\n            // decrement |Le\\Lk|\n            W[w + e] -= nvi;\n          } else if (W[w + e] !== 0) {\n            // ensure e is a live element, 1st time e seen in scan 1\n            W[w + e] = W[degree + e] + wnvi;\n          }\n        }\n      }\n\n      // degree update\n      // The second pass computes the approximate degree di, prunes the sets Ei and Ai, and computes a hash\n      // function h(i) for all nodes in Lk.\n\n      // scan2: degree update\n      for (pk = pk1; pk < pk2; pk++) {\n        // consider node i in Lk\n        i = cindex[pk];\n        p1 = cptr[i];\n        p2 = p1 + W[elen + i] - 1;\n        pn = p1;\n        // scan Ei\n        for (h = 0, d = 0, p = p1; p <= p2; p++) {\n          e = cindex[p];\n          // check e is an unabsorbed element\n          if (W[w + e] !== 0) {\n            // dext = |Le\\Lk|\n            var dext = W[w + e] - mark;\n            if (dext > 0) {\n              // sum up the set differences\n              d += dext;\n              // keep e in Ei\n              cindex[pn++] = e;\n              // compute the hash of node i\n              h += e;\n            } else {\n              // aggressive absorb. e->k\n              cptr[e] = csFlip(k);\n              // e is a dead element\n              W[w + e] = 0;\n            }\n          }\n        }\n        // W[elen + i] = |Ei|\n        W[elen + i] = pn - p1 + 1;\n        var p3 = pn;\n        var p4 = p1 + W[len + i];\n        // prune edges in Ai\n        for (p = p2 + 1; p < p4; p++) {\n          j = cindex[p];\n          // check node j dead or in Lk\n          var nvj = W[nv + j];\n          if (nvj <= 0) {\n            continue;\n          }\n          // degree(i) += |j|\n          d += nvj;\n          // place j in node list of i\n          cindex[pn++] = j;\n          // compute hash for node i\n          h += j;\n        }\n        // check for mass elimination\n        if (d === 0) {\n          // absorb i into k\n          cptr[i] = csFlip(k);\n          nvi = -W[nv + i];\n          // |Lk| -= |i|\n          dk -= nvi;\n          // |k| += W[nv + i]\n          nvk += nvi;\n          nel += nvi;\n          W[nv + i] = 0;\n          // node i is dead\n          W[elen + i] = -1;\n        } else {\n          // update degree(i)\n          W[degree + i] = Math.min(W[degree + i], d);\n          // move first node to end\n          cindex[pn] = cindex[p3];\n          // move 1st el. to end of Ei\n          cindex[p3] = cindex[p1];\n          // add k as 1st element in of Ei\n          cindex[p1] = k;\n          // new len of adj. list of node i\n          W[len + i] = pn - p1 + 1;\n          // finalize hash of i\n          h = (h < 0 ? -h : h) % n;\n          // place i in hash bucket\n          W[next + i] = W[hhead + h];\n          W[hhead + h] = i;\n          // save hash of i in last[i]\n          last[i] = h;\n        }\n      }\n      // finalize |Lk|\n      W[degree + k] = dk;\n      lemax = Math.max(lemax, dk);\n      // clear w\n      mark = _wclear(mark + lemax, lemax, W, w, n);\n\n      // Supernode detection. Supernode detection relies on the hash function h(i) computed for each node i.\n      // If two nodes have identical adjacency lists, their hash functions wil be identical.\n      for (pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check i is dead, skip it\n        if (W[nv + i] >= 0) {\n          continue;\n        }\n        // scan hash bucket of node i\n        h = last[i];\n        i = W[hhead + h];\n        // hash bucket will be empty\n        W[hhead + h] = -1;\n        for (; i !== -1 && W[next + i] !== -1; i = W[next + i], mark++) {\n          ln = W[len + i];\n          eln = W[elen + i];\n          for (p = cptr[i] + 1; p <= cptr[i] + ln - 1; p++) {\n            W[w + cindex[p]] = mark;\n          }\n          var jlast = i;\n          // compare i with all j\n          for (j = W[next + i]; j !== -1;) {\n            var ok = W[len + j] === ln && W[elen + j] === eln;\n            for (p = cptr[j] + 1; ok && p <= cptr[j] + ln - 1; p++) {\n              // compare i and j\n              if (W[w + cindex[p]] !== mark) {\n                ok = 0;\n              }\n            }\n            // check i and j are identical\n            if (ok) {\n              // absorb j into i\n              cptr[j] = csFlip(i);\n              W[nv + i] += W[nv + j];\n              W[nv + j] = 0;\n              // node j is dead\n              W[elen + j] = -1;\n              // delete j from hash bucket\n              j = W[next + j];\n              W[next + jlast] = j;\n            } else {\n              // j and i are different\n              jlast = j;\n              j = W[next + j];\n            }\n          }\n        }\n      }\n\n      // Finalize new element. The elimination of node k is nearly complete. All nodes i in Lk are scanned one last time.\n      // Node i is removed from Lk if it is dead. The flagged status of nv[i] is cleared.\n      for (p = pk1, pk = pk1; pk < pk2; pk++) {\n        i = cindex[pk];\n        // check  i is dead, skip it\n        if ((nvi = -W[nv + i]) <= 0) {\n          continue;\n        }\n        // restore W[nv + i]\n        W[nv + i] = nvi;\n        // compute external degree(i)\n        d = W[degree + i] + dk - nvi;\n        d = Math.min(d, n - nel - nvi);\n        if (W[head + d] !== -1) {\n          last[W[head + d]] = i;\n        }\n        // put i back in degree list\n        W[next + i] = W[head + d];\n        last[i] = -1;\n        W[head + d] = i;\n        // find new minimum degree\n        mindeg = Math.min(mindeg, d);\n        W[degree + i] = d;\n        // place i in Lk\n        cindex[p++] = i;\n      }\n      // # nodes absorbed into k\n      W[nv + k] = nvk;\n      // length of adj list of element k\n      if ((W[len + k] = p - pk1) === 0) {\n        // k is a root of the tree\n        cptr[k] = -1;\n        // k is now a dead element\n        W[w + k] = 0;\n      }\n      if (elenk !== 0) {\n        // free unused space in Lk\n        cnz = p;\n      }\n    }\n\n    // Postordering. The elimination is complete, but no permutation has been computed. All that is left\n    // of the graph is the assembly tree (ptr) and a set of dead nodes and elements (i is a dead node if\n    // nv[i] is zero and a dead element if nv[i] > 0). It is from this information only that the final permutation\n    // is computed. The tree is restored by unflipping all of ptr.\n\n    // fix assembly tree\n    for (i = 0; i < n; i++) {\n      cptr[i] = csFlip(cptr[i]);\n    }\n    for (j = 0; j <= n; j++) {\n      W[head + j] = -1;\n    }\n    // place unordered nodes in lists\n    for (j = n; j >= 0; j--) {\n      // skip if j is an element\n      if (W[nv + j] > 0) {\n        continue;\n      }\n      // place j in list of its parent\n      W[next + j] = W[head + cptr[j]];\n      W[head + cptr[j]] = j;\n    }\n    // place elements in lists\n    for (e = n; e >= 0; e--) {\n      // skip unless e is an element\n      if (W[nv + e] <= 0) {\n        continue;\n      }\n      if (cptr[e] !== -1) {\n        // place e in list of its parent\n        W[next + e] = W[head + cptr[e]];\n        W[head + cptr[e]] = e;\n      }\n    }\n    // postorder the assembly tree\n    for (k = 0, i = 0; i <= n; i++) {\n      if (cptr[i] === -1) {\n        k = csTdfs(i, k, W, head, next, P, w);\n      }\n    }\n    // remove last item in array\n    P.splice(P.length - 1, 1);\n    // return P\n    return P;\n  };\n\n  /**\n   * Creates the matrix that will be used by the approximate minimum degree ordering algorithm. The function accepts the matrix M as input and returns a permutation\n   * vector P. The amd algorithm operates on a symmetrix matrix, so one of three symmetric matrices is formed.\n   *\n   * Order: 0\n   *   A natural ordering P=null matrix is returned.\n   *\n   * Order: 1\n   *   Matrix must be square. This is appropriate for a Cholesky or LU factorization.\n   *   P = M + M'\n   *\n   * Order: 2\n   *   Dense columns from M' are dropped, M recreated from M'. This is appropriatefor LU factorization of unsymmetric matrices.\n   *   P = M' * M\n   *\n   * Order: 3\n   *   This is best used for QR factorization or LU factorization is matrix M has no dense rows. A dense row is a row with more than 10*sqr(columns) entries.\n   *   P = M' * M\n   */\n  function _createTargetMatrix(order, a, m, n, dense) {\n    // compute A'\n    var at = transpose(a);\n\n    // check order = 1, matrix must be square\n    if (order === 1 && n === m) {\n      // C = A + A'\n      return add(a, at);\n    }\n\n    // check order = 2, drop dense columns from M'\n    if (order === 2) {\n      // transpose arrays\n      var tindex = at._index;\n      var tptr = at._ptr;\n      // new column index\n      var p2 = 0;\n      // loop A' columns (rows)\n      for (var j = 0; j < m; j++) {\n        // column j of AT starts here\n        var p = tptr[j];\n        // new column j starts here\n        tptr[j] = p2;\n        // skip dense col j\n        if (tptr[j + 1] - p > dense) {\n          continue;\n        }\n        // map rows in column j of A\n        for (var p1 = tptr[j + 1]; p < p1; p++) {\n          tindex[p2++] = tindex[p];\n        }\n      }\n      // finalize AT\n      tptr[m] = p2;\n      // recreate A from new transpose matrix\n      a = transpose(at);\n      // use A' * A\n      return multiply(at, a);\n    }\n\n    // use A' * A, square or rectangular matrix\n    return multiply(at, a);\n  }\n\n  /**\n   * Initialize quotient graph. There are four kind of nodes and elements that must be represented:\n   *\n   *  - A live node is a node i (or a supernode) that has not been selected as a pivot nad has not been merged into another supernode.\n   *  - A dead node i is one that has been removed from the graph, having been absorved into r = flip(ptr[i]).\n   *  - A live element e is one that is in the graph, having been formed when node e was selected as the pivot.\n   *  - A dead element e is one that has benn absorved into a subsequent element s = flip(ptr[e]).\n   */\n  function _initializeQuotientGraph(n, cptr, W, len, head, last, next, hhead, nv, w, elen, degree) {\n    // Initialize quotient graph\n    for (var k = 0; k < n; k++) {\n      W[len + k] = cptr[k + 1] - cptr[k];\n    }\n    W[len + n] = 0;\n    // initialize workspace\n    for (var i = 0; i <= n; i++) {\n      // degree list i is empty\n      W[head + i] = -1;\n      last[i] = -1;\n      W[next + i] = -1;\n      // hash list i is empty\n      W[hhead + i] = -1;\n      // node i is just one node\n      W[nv + i] = 1;\n      // node i is alive\n      W[w + i] = 1;\n      // Ek of node i is empty\n      W[elen + i] = 0;\n      // degree of node i\n      W[degree + i] = W[len + i];\n    }\n    // clear w\n    var mark = _wclear(0, 0, W, w, n);\n    // n is a dead element\n    W[elen + n] = -2;\n    // n is a root of assembly tree\n    cptr[n] = -1;\n    // n is a dead element\n    W[w + n] = 0;\n    // return mark\n    return mark;\n  }\n\n  /**\n   * Initialize degree lists. Each node is placed in its degree lists. Nodes of zero degree are eliminated immediately. Nodes with\n   * degree >= dense are alsol eliminated and merged into a placeholder node n, a dead element. Thes nodes will appera last in the\n   * output permutation p.\n   */\n  function _initializeDegreeLists(n, cptr, W, degree, elen, w, dense, nv, head, last, next) {\n    // result\n    var nel = 0;\n    // loop columns\n    for (var i = 0; i < n; i++) {\n      // degree @ i\n      var d = W[degree + i];\n      // check node i is empty\n      if (d === 0) {\n        // element i is dead\n        W[elen + i] = -2;\n        nel++;\n        // i is a root of assembly tree\n        cptr[i] = -1;\n        W[w + i] = 0;\n      } else if (d > dense) {\n        // absorb i into element n\n        W[nv + i] = 0;\n        // node i is dead\n        W[elen + i] = -1;\n        nel++;\n        cptr[i] = csFlip(n);\n        W[nv + n]++;\n      } else {\n        var h = W[head + d];\n        if (h !== -1) {\n          last[h] = i;\n        }\n        // put node i in degree list d\n        W[next + i] = W[head + d];\n        W[head + d] = i;\n      }\n    }\n    return nel;\n  }\n  function _wclear(mark, lemax, W, w, n) {\n    if (mark < 2 || mark + lemax < 0) {\n      for (var k = 0; k < n; k++) {\n        if (W[w + k] !== 0) {\n          W[w + k] = 1;\n        }\n      }\n      mark = 2;\n    }\n    // at this point, W [0..n-1] < mark holds\n    return mark;\n  }\n  function _diag(i, j) {\n    return i !== j;\n  }\n});"]},"metadata":{},"sourceType":"module"}