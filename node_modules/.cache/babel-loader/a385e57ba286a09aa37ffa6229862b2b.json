{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf; // skip zeros since abs(0) === 0\n\n    x.forEach(function (value) {\n      var v = abs(value);\n\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0; // skip zeros since abs(0) === 0\n\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n\n      return Number.POSITIVE_INFINITY;\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value');\n  }\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = []; // result\n\n    var maxc = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = []; // result\n\n    var maxr = 0; // skip zeros since abs(0) == 0\n\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n\n\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size(); // check if it is a vector\n\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    } // MxN matrix\n\n\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/norm.js"],"names":["factory","name","dependencies","createNorm","_ref","typed","abs","add","pow","conj","sqrt","multiply","equalScalar","larger","smaller","matrix","ctranspose","eigs","number","Math","Complex","x","BigNumber","boolean","Array","_norm","Matrix","ArrayNumberBigNumberString","p","MatrixNumberBigNumberString","_vectorNormPlusInfinity","pinf","forEach","value","v","_vectorNormMinusInfinity","ninf","_vectorNorm","Number","POSITIVE_INFINITY","NEGATIVE_INFINITY","isNaN","n","Error","_matrixNormFrobenius","fro","index","_matrixNormOne","c","maxc","j","cj","_matrixNormTwo","sizeX","size","RangeError","tx","squaredX","eigenVals","values","toArray","rho","length","_matrixNormInfinity","r","maxr","i","ri","_matrixNorm"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'norm';\nvar dependencies = ['typed', 'abs', 'add', 'pow', 'conj', 'sqrt', 'multiply', 'equalScalar', 'larger', 'smaller', 'matrix', 'ctranspose', 'eigs'];\nexport var createNorm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    abs,\n    add,\n    pow,\n    conj,\n    sqrt,\n    multiply,\n    equalScalar,\n    larger,\n    smaller,\n    matrix,\n    ctranspose,\n    eigs\n  } = _ref;\n  /**\n   * Calculate the norm of a number, vector or matrix.\n   *\n   * The second parameter p is optional. If not provided, it defaults to 2.\n   *\n   * Syntax:\n   *\n   *    math.norm(x)\n   *    math.norm(x, p)\n   *\n   * Examples:\n   *\n   *    math.abs(-3.5)                         // returns 3.5\n   *    math.norm(-3.5)                        // returns 3.5\n   *\n   *    math.norm(math.complex(3, -4))         // returns 5\n   *\n   *    math.norm([1, 2, -3], Infinity)        // returns 3\n   *    math.norm([1, 2, -3], -Infinity)       // returns 1\n   *\n   *    math.norm([3, 4], 2)                   // returns 5\n   *\n   *    math.norm([[1, 2], [3, 4]], 1)          // returns 6\n   *    math.norm([[1, 2], [3, 4]], 'inf')     // returns 7\n   *    math.norm([[1, 2], [3, 4]], 'fro')     // returns 5.477225575051661\n   *\n   * See also:\n   *\n   *    abs, hypot\n   *\n   * @param  {number | BigNumber | Complex | Array | Matrix} x\n   *            Value for which to calculate the norm\n   * @param  {number | BigNumber | string} [p=2]\n   *            Vector space.\n   *            Supported numbers include Infinity and -Infinity.\n   *            Supported strings are: 'inf', '-inf', and 'fro' (The Frobenius norm)\n   * @return {number | BigNumber} the p-norm\n   */\n  return typed(name, {\n    number: Math.abs,\n    Complex: function Complex(x) {\n      return x.abs();\n    },\n    BigNumber: function BigNumber(x) {\n      // norm(x) = abs(x)\n      return x.abs();\n    },\n    boolean: function boolean(x) {\n      // norm(x) = abs(x)\n      return Math.abs(x);\n    },\n    Array: function Array(x) {\n      return _norm(matrix(x), 2);\n    },\n    Matrix: function Matrix(x) {\n      return _norm(x, 2);\n    },\n    'Array, number | BigNumber | string': function ArrayNumberBigNumberString(x, p) {\n      return _norm(matrix(x), p);\n    },\n    'Matrix, number | BigNumber | string': function MatrixNumberBigNumberString(x, p) {\n      return _norm(x, p);\n    }\n  });\n\n  /**\n   * Calculate the plus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormPlusInfinity(x) {\n    // norm(x, Infinity) = max(abs(x))\n    var pinf = 0;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (larger(v, pinf)) {\n        pinf = v;\n      }\n    }, true);\n    return pinf;\n  }\n\n  /**\n   * Calculate the minus infinity norm for a vector\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNormMinusInfinity(x) {\n    // norm(x, -Infinity) = min(abs(x))\n    var ninf;\n    // skip zeros since abs(0) === 0\n    x.forEach(function (value) {\n      var v = abs(value);\n      if (!ninf || smaller(v, ninf)) {\n        ninf = v;\n      }\n    }, true);\n    return ninf || 0;\n  }\n\n  /**\n   * Calculate the norm for a vector\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _vectorNorm(x, p) {\n    // check p\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _vectorNormPlusInfinity(x);\n    }\n    if (p === Number.NEGATIVE_INFINITY || p === '-inf') {\n      return _vectorNormMinusInfinity(x);\n    }\n    if (p === 'fro') {\n      return _norm(x, 2);\n    }\n    if (typeof p === 'number' && !isNaN(p)) {\n      // check p != 0\n      if (!equalScalar(p, 0)) {\n        // norm(x, p) = sum(abs(xi) ^ p) ^ 1/p\n        var n = 0;\n        // skip zeros since abs(0) === 0\n        x.forEach(function (value) {\n          n = add(pow(abs(value), p), n);\n        }, true);\n        return pow(n, 1 / p);\n      }\n      return Number.POSITIVE_INFINITY;\n    }\n    // invalid parameter value\n    throw new Error('Unsupported parameter value');\n  }\n\n  /**\n   * Calculate the Frobenius norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormFrobenius(x) {\n    // norm(x) = sqrt(sum(diag(x'x)))\n    var fro = 0;\n    x.forEach(function (value, index) {\n      fro = add(fro, multiply(value, conj(value)));\n    });\n    return abs(sqrt(fro));\n  }\n\n  /**\n   * Calculate the norm L1 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormOne(x) {\n    // norm(x) = the largest column sum\n    var c = [];\n    // result\n    var maxc = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var j = index[1];\n      var cj = add(c[j] || 0, abs(value));\n      if (larger(cj, maxc)) {\n        maxc = cj;\n      }\n      c[j] = cj;\n    }, true);\n    return maxc;\n  }\n\n  /**\n   * Calculate the norm L2 for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormTwo(x) {\n    // norm(x) = sqrt( max eigenvalue of A*.A)\n    var sizeX = x.size();\n    if (sizeX[0] !== sizeX[1]) {\n      throw new RangeError('Invalid matrix dimensions');\n    }\n    var tx = ctranspose(x);\n    var squaredX = multiply(tx, x);\n    var eigenVals = eigs(squaredX).values.toArray();\n    var rho = eigenVals[eigenVals.length - 1];\n    return abs(sqrt(rho));\n  }\n\n  /**\n   * Calculate the infinity norm for a matrix\n   * @param {Matrix} x\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNormInfinity(x) {\n    // norm(x) = the largest row sum\n    var r = [];\n    // result\n    var maxr = 0;\n    // skip zeros since abs(0) == 0\n    x.forEach(function (value, index) {\n      var i = index[0];\n      var ri = add(r[i] || 0, abs(value));\n      if (larger(ri, maxr)) {\n        maxr = ri;\n      }\n      r[i] = ri;\n    }, true);\n    return maxr;\n  }\n\n  /**\n   * Calculate the norm for a 2D Matrix (M*N)\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _matrixNorm(x, p) {\n    // check p\n    if (p === 1) {\n      return _matrixNormOne(x);\n    }\n    if (p === Number.POSITIVE_INFINITY || p === 'inf') {\n      return _matrixNormInfinity(x);\n    }\n    if (p === 'fro') {\n      return _matrixNormFrobenius(x);\n    }\n    if (p === 2) {\n      return _matrixNormTwo(x);\n    } // invalid parameter value\n\n    throw new Error('Unsupported parameter value ' + p);\n  }\n\n  /**\n   * Calculate the norm for an array\n   * @param {Matrix} x\n   * @param {number | string} p\n   * @returns {number} Returns the norm\n   * @private\n   */\n  function _norm(x, p) {\n    // size\n    var sizeX = x.size();\n\n    // check if it is a vector\n    if (sizeX.length === 1) {\n      return _vectorNorm(x, p);\n    }\n    // MxN matrix\n    if (sizeX.length === 2) {\n      if (sizeX[0] && sizeX[1]) {\n        return _matrixNorm(x, p);\n      } else {\n        throw new RangeError('Invalid matrix dimensions');\n      }\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}