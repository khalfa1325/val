{"ast":null,"code":"import { rightArithShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { rightArithShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightArithShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createRightArithShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n\n  return typed(name, {\n    'number, number': rightArithShiftNumber,\n    'BigNumber, BigNumber': rightArithShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/bitwise/rightArithShift.js"],"names":["rightArithShiftBigNumber","createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo01xDSid","createMatAlgo10xSids","createMatAlgo08xS0Sid","factory","createMatrixAlgorithmSuite","createUseMatrixForArrayScalar","rightArithShiftNumber","name","dependencies","createRightArithShift","_ref","typed","matrix","equalScalar","zeros","DenseMatrix","concat","matAlgo01xDSid","matAlgo02xDS0","matAlgo08xS0Sid","matAlgo10xSids","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","useMatrixForArrayScalar","referToSelf","self","x","y","clone","size","storage","SS","DS","SD"],"mappings":"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","sourcesContent":["import { rightArithShiftBigNumber } from '../../utils/bignumber/bitwise.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo10xSids } from '../../type/matrix/utils/matAlgo10xSids.js';\nimport { createMatAlgo08xS0Sid } from '../../type/matrix/utils/matAlgo08xS0Sid.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createUseMatrixForArrayScalar } from './useMatrixForArrayScalar.js';\nimport { rightArithShiftNumber } from '../../plain/number/index.js';\nvar name = 'rightArithShift';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix', 'concat'];\nexport var createRightArithShift = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo08xS0Sid = createMatAlgo08xS0Sid({\n    typed,\n    equalScalar\n  });\n  var matAlgo10xSids = createMatAlgo10xSids({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var useMatrixForArrayScalar = createUseMatrixForArrayScalar({\n    typed,\n    matrix\n  });\n\n  /**\n   * Bitwise right arithmetic shift of a value x by y number of bits, `x >> y`.\n   * For matrices, the function is evaluated element wise.\n   * For units, the function is evaluated on the best prefix base.\n   *\n   * Syntax:\n   *\n   *    math.rightArithShift(x, y)\n   *\n   * Examples:\n   *\n   *    math.rightArithShift(4, 2)               // returns number 1\n   *\n   *    math.rightArithShift([16, -32, 64], 4)   // returns Array [1, -2, 4]\n   *\n   * See also:\n   *\n   *    bitAnd, bitNot, bitOr, bitXor, rightArithShift, rightLogShift\n   *\n   * @param  {number | BigNumber | Array | Matrix} x Value to be shifted\n   * @param  {number | BigNumber} y Amount of shifts\n   * @return {number | BigNumber | Array | Matrix} `x` zero-filled shifted right `y` times\n   */\n  return typed(name, {\n    'number, number': rightArithShiftNumber,\n    'BigNumber, BigNumber': rightArithShiftBigNumber,\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(y, 0)) {\n        return x.clone();\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo10xSids(y, x, self, true);\n    }),\n    'number | BigNumber, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (equalScalar(x, 0)) {\n        return zeros(y.size(), y.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    })\n  }, useMatrixForArrayScalar, matrixAlgorithmSuite({\n    SS: matAlgo08xS0Sid,\n    DS: matAlgo01xDSid,\n    SD: matAlgo02xDS0\n  }));\n});"]},"metadata":{},"sourceType":"module"}