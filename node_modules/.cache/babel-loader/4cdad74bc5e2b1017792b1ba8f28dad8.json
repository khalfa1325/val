{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype; // sparse matrix cannot be a Pattern matrix\n\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length; // values in j\n\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k]; // invoke callback\n\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b); // check value is zero\n\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    } // update ptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo11xS0s.js"],"names":["factory","name","dependencies","createMatAlgo11xS0s","_ref","typed","equalScalar","matAlgo11xS0s","s","b","callback","inverse","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","j","length","k0","k1","k","i","v","push","createSparseMatrix","values","index","ptr","size","datatype"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,IAAIC,IAAI,GAAG,eAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,aAAV,CAAnB;AACA,OAAO,IAAIC,mBAAmB,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAClF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA;AAFE,MAGAF,IAHJ;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAO,SAASG,aAAT,CAAuBC,CAAvB,EAA0BC,CAA1B,EAA6BC,QAA7B,EAAuCC,OAAvC,EAAgD;AACrD;AACA,QAAIC,OAAO,GAAGJ,CAAC,CAACK,OAAhB;AACA,QAAIC,MAAM,GAAGN,CAAC,CAACO,MAAf;AACA,QAAIC,IAAI,GAAGR,CAAC,CAACS,IAAb;AACA,QAAIC,KAAK,GAAGV,CAAC,CAACW,KAAd;AACA,QAAIC,GAAG,GAAGZ,CAAC,CAACa,SAAZ,CANqD,CAQrD;;AACA,QAAI,CAACT,OAAL,EAAc;AACZ,YAAM,IAAIU,KAAJ,CAAU,oEAAV,CAAN;AACD,KAXoD,CAarD;;;AACA,QAAIC,IAAI,GAAGL,KAAK,CAAC,CAAD,CAAhB;AACA,QAAIM,OAAO,GAAGN,KAAK,CAAC,CAAD,CAAnB,CAfqD,CAiBrD;;AACA,QAAIO,EAAJ,CAlBqD,CAmBrD;;AACA,QAAIC,EAAE,GAAGpB,WAAT,CApBqD,CAqBrD;;AACA,QAAIqB,IAAI,GAAG,CAAX,CAtBqD,CAuBrD;;AACA,QAAIC,EAAE,GAAGlB,QAAT,CAxBqD,CA0BrD;;AACA,QAAI,OAAOU,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACAK,MAAAA,EAAE,GAAGL,GAAL,CAF2B,CAG3B;;AACAM,MAAAA,EAAE,GAAGrB,KAAK,CAACwB,IAAN,CAAWvB,WAAX,EAAwB,CAACmB,EAAD,EAAKA,EAAL,CAAxB,CAAL,CAJ2B,CAK3B;;AACAE,MAAAA,IAAI,GAAGtB,KAAK,CAACyB,OAAN,CAAc,CAAd,EAAiBL,EAAjB,CAAP,CAN2B,CAO3B;;AACAhB,MAAAA,CAAC,GAAGJ,KAAK,CAACyB,OAAN,CAAcrB,CAAd,EAAiBgB,EAAjB,CAAJ,CAR2B,CAS3B;;AACAG,MAAAA,EAAE,GAAGvB,KAAK,CAACwB,IAAN,CAAWnB,QAAX,EAAqB,CAACe,EAAD,EAAKA,EAAL,CAArB,CAAL;AACD,KAtCoD,CAwCrD;;;AACA,QAAIM,OAAO,GAAG,EAAd;AACA,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,IAAI,GAAG,EAAX,CA3CqD,CA6CrD;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,OAApB,EAA6BU,CAAC,EAA9B,EAAkC;AAChC;AACAD,MAAAA,IAAI,CAACC,CAAD,CAAJ,GAAUF,MAAM,CAACG,MAAjB,CAFgC,CAGhC;;AACA,WAAK,IAAIC,EAAE,GAAGpB,IAAI,CAACkB,CAAD,CAAb,EAAkBG,EAAE,GAAGrB,IAAI,CAACkB,CAAC,GAAG,CAAL,CAA3B,EAAoCI,CAAC,GAAGF,EAA7C,EAAiDE,CAAC,GAAGD,EAArD,EAAyDC,CAAC,EAA1D,EAA8D;AAC5D;AACA,YAAIC,CAAC,GAAGzB,MAAM,CAACwB,CAAD,CAAd,CAF4D,CAG5D;;AACA,YAAIE,CAAC,GAAG7B,OAAO,GAAGiB,EAAE,CAACnB,CAAD,EAAIG,OAAO,CAAC0B,CAAD,CAAX,CAAL,GAAuBV,EAAE,CAAChB,OAAO,CAAC0B,CAAD,CAAR,EAAa7B,CAAb,CAAxC,CAJ4D,CAK5D;;AACA,YAAI,CAACiB,EAAE,CAACc,CAAD,EAAIb,IAAJ,CAAP,EAAkB;AAChB;AACAK,UAAAA,MAAM,CAACS,IAAP,CAAYF,CAAZ;AACAR,UAAAA,OAAO,CAACU,IAAR,CAAaD,CAAb;AACD;AACF;AACF,KA9DoD,CA+DrD;;;AACAP,IAAAA,IAAI,CAACT,OAAD,CAAJ,GAAgBQ,MAAM,CAACG,MAAvB,CAhEqD,CAkErD;;AACA,WAAO3B,CAAC,CAACkC,kBAAF,CAAqB;AAC1BC,MAAAA,MAAM,EAAEZ,OADkB;AAE1Ba,MAAAA,KAAK,EAAEZ,MAFmB;AAG1Ba,MAAAA,GAAG,EAAEZ,IAHqB;AAI1Ba,MAAAA,IAAI,EAAE,CAACvB,IAAD,EAAOC,OAAP,CAJoB;AAK1BuB,MAAAA,QAAQ,EAAEtB;AALgB,KAArB,CAAP;AAOD,GA1ED;AA2ED,CAnGsD,CAAhD","sourcesContent":["import { factory } from '../../../utils/factory.js';\nvar name = 'matAlgo11xS0s';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo11xS0s = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix S nonzero items and invokes the callback function f(Sij, b).\n   * Callback function invoked NZ times (number of nonzero items in S).\n   *\n   *\n   *          ┌  f(Sij, b)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0          ; otherwise\n   *\n   *\n   * @param {Matrix}   s                 The SparseMatrix instance (S)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Sij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97626813\n   */\n  return function matAlgo11xS0s(s, b, callback, inverse) {\n    // sparse matrix arrays\n    var avalues = s._values;\n    var aindex = s._index;\n    var aptr = s._ptr;\n    var asize = s._size;\n    var adt = s._datatype;\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrix and Scalar value');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // initialize ptr\n      cptr[j] = cindex.length;\n      // values in j\n      for (var k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = aindex[k];\n        // invoke callback\n        var v = inverse ? cf(b, avalues[k]) : cf(avalues[k], b);\n        // check value is zero\n        if (!eq(v, zero)) {\n          // push index & value\n          cindex.push(i);\n          cvalues.push(v);\n        }\n      }\n    }\n    // update ptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return s.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"]},"metadata":{},"sourceType":"module"}