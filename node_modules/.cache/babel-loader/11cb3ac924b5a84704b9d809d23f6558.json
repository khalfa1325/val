{"ast":null,"code":"import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\n\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n\n\n  var r;\n\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\n\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n\n  if (a === 0 || b === 0) {\n    return 0;\n  } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n\n\n  var t;\n  var prod = a * b;\n\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n/**\n * Calculate the logarithm of a value, optionally to a given base.\n * @param {number} x\n * @param {number | null | undefined} base\n * @return {number}\n */\n\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n\n  return Math.log(x);\n}\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\n\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\n\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\n\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} [2] root\n * @private\n */\n\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n\n  if (inv) {\n    root = -root;\n  }\n\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  } // edge cases zero and infinity\n\n\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n\n  var x = Math.pow(Math.abs(a), 1 / root); // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x; // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\n\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n\n  var q; // quotient\n\n  var r; // remainder\n\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n\n  var res;\n\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n\n  return res;\n}\nxgcdNumber.signature = n2;\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\n\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\n\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n\n  return parseFloat(toFixed(value, decimals));\n}\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\n\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/plain/number/arithmetic.js"],"names":["cbrt","expm1","isInteger","log10","log1p","log2","sign","toFixed","n1","n2","absNumber","a","Math","abs","signature","addNumber","b","subtractNumber","multiplyNumber","divideNumber","unaryMinusNumber","x","unaryPlusNumber","cbrtNumber","cubeNumber","expNumber","exp","expm1Number","gcdNumber","Error","r","lcmNumber","t","prod","logNumber","y","log","log10Number","log2Number","log1pNumber","modNumber","floor","nthRootNumber","root","arguments","length","undefined","inv","Infinity","isFinite","pow","signNumber","sqrtNumber","sqrt","squareNumber","xgcdNumber","q","lastx","lasty","res","powNumber","roundNumber","value","decimals","parseFloat","normNumber"],"mappings":"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","sourcesContent":["import { cbrt, expm1, isInteger, log10, log1p, log2, sign, toFixed } from '../../utils/number.js';\nvar n1 = 'number';\nvar n2 = 'number, number';\nexport function absNumber(a) {\n  return Math.abs(a);\n}\nabsNumber.signature = n1;\nexport function addNumber(a, b) {\n  return a + b;\n}\naddNumber.signature = n2;\nexport function subtractNumber(a, b) {\n  return a - b;\n}\nsubtractNumber.signature = n2;\nexport function multiplyNumber(a, b) {\n  return a * b;\n}\nmultiplyNumber.signature = n2;\nexport function divideNumber(a, b) {\n  return a / b;\n}\ndivideNumber.signature = n2;\nexport function unaryMinusNumber(x) {\n  return -x;\n}\nunaryMinusNumber.signature = n1;\nexport function unaryPlusNumber(x) {\n  return x;\n}\nunaryPlusNumber.signature = n1;\nexport function cbrtNumber(x) {\n  return cbrt(x);\n}\ncbrtNumber.signature = n1;\nexport function cubeNumber(x) {\n  return x * x * x;\n}\ncubeNumber.signature = n1;\nexport function expNumber(x) {\n  return Math.exp(x);\n}\nexpNumber.signature = n1;\nexport function expm1Number(x) {\n  return expm1(x);\n}\nexpm1Number.signature = n1;\n\n/**\n * Calculate gcd for numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the greatest common denominator of a and b\n */\nexport function gcdNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function gcd must be integer numbers');\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  var r;\n  while (b !== 0) {\n    r = a % b;\n    a = b;\n    b = r;\n  }\n  return a < 0 ? -a : a;\n}\ngcdNumber.signature = n2;\n\n/**\n * Calculate lcm for two numbers\n * @param {number} a\n * @param {number} b\n * @returns {number} Returns the least common multiple of a and b\n */\nexport function lcmNumber(a, b) {\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function lcm must be integer numbers');\n  }\n  if (a === 0 || b === 0) {\n    return 0;\n  }\n\n  // https://en.wikipedia.org/wiki/Euclidean_algorithm\n  // evaluate lcm here inline to reduce overhead\n  var t;\n  var prod = a * b;\n  while (b !== 0) {\n    t = b;\n    b = a % t;\n    a = t;\n  }\n  return Math.abs(prod / a);\n}\nlcmNumber.signature = n2;\n\n/**\n * Calculate the logarithm of a value, optionally to a given base.\n * @param {number} x\n * @param {number | null | undefined} base\n * @return {number}\n */\nexport function logNumber(x, y) {\n  if (y) {\n    return Math.log(x) / Math.log(y);\n  }\n  return Math.log(x);\n}\n\n/**\n * Calculate the 10-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log10Number(x) {\n  return log10(x);\n}\nlog10Number.signature = n1;\n\n/**\n * Calculate the 2-base logarithm of a number\n * @param {number} x\n * @return {number}\n */\nexport function log2Number(x) {\n  return log2(x);\n}\nlog2Number.signature = n1;\n\n/**\n * Calculate the natural logarithm of a `number+1`\n * @param {number} x\n * @returns {number}\n */\nexport function log1pNumber(x) {\n  return log1p(x);\n}\nlog1pNumber.signature = n1;\n\n/**\n * Calculate the modulus of two numbers\n * @param {number} x\n * @param {number} y\n * @returns {number} res\n * @private\n */\nexport function modNumber(x, y) {\n  if (y > 0) {\n    // We don't use JavaScript's % operator here as this doesn't work\n    // correctly for x < 0 and x === 0\n    // see https://en.wikipedia.org/wiki/Modulo_operation\n    return x - y * Math.floor(x / y);\n  } else if (y === 0) {\n    return x;\n  } else {\n    // y < 0\n    // TODO: implement mod for a negative divisor\n    throw new Error('Cannot calculate mod for a negative divisor');\n  }\n}\nmodNumber.signature = n2;\n\n/**\n * Calculate the nth root of a, solve x^root == a\n * http://rosettacode.org/wiki/Nth_root#JavaScript\n * @param {number} a\n * @param {number} [2] root\n * @private\n */\nexport function nthRootNumber(a) {\n  var root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;\n  var inv = root < 0;\n  if (inv) {\n    root = -root;\n  }\n  if (root === 0) {\n    throw new Error('Root must be non-zero');\n  }\n  if (a < 0 && Math.abs(root) % 2 !== 1) {\n    throw new Error('Root must be odd when a is negative.');\n  }\n\n  // edge cases zero and infinity\n  if (a === 0) {\n    return inv ? Infinity : 0;\n  }\n  if (!isFinite(a)) {\n    return inv ? 0 : a;\n  }\n  var x = Math.pow(Math.abs(a), 1 / root);\n  // If a < 0, we require that root is an odd integer,\n  // so (-1) ^ (1/root) = -1\n  x = a < 0 ? -x : x;\n  return inv ? 1 / x : x;\n\n  // Very nice algorithm, but fails with nthRoot(-2, 3).\n  // Newton's method has some well-known problems at times:\n  // https://en.wikipedia.org/wiki/Newton%27s_method#Failure_analysis\n  /*\n  let x = 1 // Initial guess\n  let xPrev = 1\n  let i = 0\n  const iMax = 10000\n  do {\n    const delta = (a / Math.pow(x, root - 1) - x) / root\n    xPrev = x\n    x = x + delta\n    i++\n  }\n  while (xPrev !== x && i < iMax)\n   if (xPrev !== x) {\n    throw new Error('Function nthRoot failed to converge')\n  }\n   return inv ? 1 / x : x\n  */\n}\n\nexport function signNumber(x) {\n  return sign(x);\n}\nsignNumber.signature = n1;\nexport function sqrtNumber(x) {\n  return Math.sqrt(x);\n}\nsqrtNumber.signature = n1;\nexport function squareNumber(x) {\n  return x * x;\n}\nsquareNumber.signature = n1;\n\n/**\n * Calculate xgcd for two numbers\n * @param {number} a\n * @param {number} b\n * @return {number} result\n * @private\n */\nexport function xgcdNumber(a, b) {\n  // source: https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\n  var t; // used to swap two variables\n  var q; // quotient\n  var r; // remainder\n  var x = 0;\n  var lastx = 1;\n  var y = 1;\n  var lasty = 0;\n  if (!isInteger(a) || !isInteger(b)) {\n    throw new Error('Parameters in function xgcd must be integer numbers');\n  }\n  while (b) {\n    q = Math.floor(a / b);\n    r = a - q * b;\n    t = x;\n    x = lastx - q * x;\n    lastx = t;\n    t = y;\n    y = lasty - q * y;\n    lasty = t;\n    a = b;\n    b = r;\n  }\n  var res;\n  if (a < 0) {\n    res = [-a, -lastx, -lasty];\n  } else {\n    res = [a, a ? lastx : 0, lasty];\n  }\n  return res;\n}\nxgcdNumber.signature = n2;\n\n/**\n * Calculates the power of x to y, x^y, for two numbers.\n * @param {number} x\n * @param {number} y\n * @return {number} res\n */\nexport function powNumber(x, y) {\n  // x^Infinity === 0 if -1 < x < 1\n  // A real number 0 is returned instead of complex(0)\n  if (x * x < 1 && y === Infinity || x * x > 1 && y === -Infinity) {\n    return 0;\n  }\n  return Math.pow(x, y);\n}\npowNumber.signature = n2;\n\n/**\n * round a number to the given number of decimals, or to zero if decimals is\n * not provided\n * @param {number} value\n * @param {number} decimals       number of decimals, between 0 and 15 (0 by default)\n * @return {number} roundedValue\n */\nexport function roundNumber(value) {\n  var decimals = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  if (!isInteger(decimals) || decimals < 0 || decimals > 15) {\n    throw new Error('Number of decimals in function round must be an integer from 0 to 15 inclusive');\n  }\n  return parseFloat(toFixed(value, decimals));\n}\n\n/**\n * Calculate the norm of a number, the absolute value.\n * @param {number} x\n * @return {number}\n */\nexport function normNumber(x) {\n  return Math.abs(x);\n}\nnormNumber.signature = n1;"]},"metadata":{},"sourceType":"module"}