{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'zeta';\nvar dependencies = ['typed', 'config', 'multiply', 'pow', 'divide', 'factorial', 'equal', 'smallerEq', 'isNegative', 'gamma', 'sin', 'subtract', 'add', '?Complex', '?BigNumber', 'pi'];\nexport var createZeta = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiply,\n    pow,\n    divide,\n    factorial,\n    equal,\n    smallerEq,\n    isNegative,\n    gamma,\n    sin,\n    subtract,\n    add,\n    Complex,\n    BigNumber: _BigNumber,\n    pi\n  } = _ref;\n  /**\n   * Compute the Riemann Zeta function of a value using an infinite series for\n   * all of the complex plane using Riemann's Functional equation.\n   *\n   * Based off the paper by Xavier Gourdon and Pascal Sebah\n   * ( http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf )\n   *\n   * Implementation and slight modification by Anik Patel\n   *\n   * Note: the implementation is accurate up to about 6 digits.\n   *\n   * Syntax:\n   *\n   *    math.zeta(n)\n   *\n   * Examples:\n   *\n   *    math.zeta(5)       // returns 1.0369277551433895\n   *    math.zeta(-0.5)    // returns -0.2078862249773449\n   *    math.zeta(math.i)  // returns 0.0033002236853253153 - 0.4181554491413212i\n   *\n   * See also:\n   *    erf\n   *\n   * @param {number | Complex | BigNumber} s   A Real, Complex or BigNumber parameter to the Riemann Zeta Function\n   * @return {number | Complex | BigNumber}    The Riemann Zeta of `s`\n   */\n\n  return typed(name, {\n    number: s => zetaNumeric(s, value => value, () => 20),\n    BigNumber: s => zetaNumeric(s, value => new _BigNumber(value), () => {\n      // epsilon is for example 1e-12. Extract the positive exponent 12 from that\n      return Math.abs(Math.log10(config.epsilon));\n    }),\n    Complex: zetaComplex\n  });\n  /**\n   * @param {number | BigNumber} s\n   * @param {(value: number) => number | BigNumber} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @returns {number | BigNumber}\n   */\n\n  function zetaNumeric(s, createValue, determineDigits) {\n    if (equal(s, 0)) {\n      return createValue(-0.5);\n    }\n\n    if (equal(s, 1)) {\n      return createValue(NaN);\n    }\n\n    if (!isFinite(s)) {\n      return isNegative(s) ? createValue(NaN) : createValue(1);\n    }\n\n    return zeta(s, createValue, determineDigits, s => s);\n  }\n  /**\n   * @param {Complex} s\n   * @returns {Complex}\n   */\n\n\n  function zetaComplex(s) {\n    if (s.re === 0 && s.im === 0) {\n      return new Complex(-0.5);\n    }\n\n    if (s.re === 1) {\n      return new Complex(NaN, NaN);\n    }\n\n    if (s.re === Infinity && s.im === 0) {\n      return new Complex(1);\n    }\n\n    if (s.im === Infinity || s.re === -Infinity) {\n      return new Complex(NaN, NaN);\n    }\n\n    return zeta(s, value => value, s => Math.round(1.3 * 15 + 0.9 * Math.abs(s.im)), s => s.re);\n  }\n  /**\n   * @param {number | BigNumber | Complex} s\n   * @param {(value: number) => number | BigNumber | Complex} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @param {(value: number | BigNumber | Complex) => number} getRe\n   * @returns {*|number}\n   */\n\n\n  function zeta(s, createValue, determineDigits, getRe) {\n    var n = determineDigits(s);\n\n    if (getRe(s) > -(n - 1) / 2) {\n      return f(s, createValue(n), createValue);\n    } else {\n      // Function Equation for reflection to x < 1\n      var c = multiply(pow(2, s), pow(createValue(pi), subtract(s, 1)));\n      c = multiply(c, sin(multiply(divide(createValue(pi), 2), s)));\n      c = multiply(c, gamma(subtract(1, s)));\n      return multiply(c, zeta(subtract(1, s), createValue, determineDigits, getRe));\n    }\n  }\n  /**\n   * Calculate a portion of the sum\n   * @param {number | BigNumber} k   a positive integer\n   * @param {number | BigNumber} n   a positive integer\n   * @return {number}    the portion of the sum\n   **/\n\n\n  function d(k, n) {\n    var S = k;\n\n    for (var j = k; smallerEq(j, n); j = add(j, 1)) {\n      var factor = divide(multiply(factorial(add(n, subtract(j, 1))), pow(4, j)), multiply(factorial(subtract(n, j)), factorial(multiply(2, j))));\n      S = add(S, factor);\n    }\n\n    return multiply(n, S);\n  }\n  /**\n   * Calculate the positive Riemann Zeta function\n   * @param {number} s   a real or complex number with s.re > 1\n   * @param {number} n   a positive integer\n   * @param {(number) => number | BigNumber | Complex} createValue\n   * @return {number}    Riemann Zeta of s\n   **/\n\n\n  function f(s, n, createValue) {\n    var c = divide(1, multiply(d(createValue(0), n), subtract(1, pow(2, subtract(1, s)))));\n    var S = createValue(0);\n\n    for (var k = createValue(1); smallerEq(k, n); k = add(k, 1)) {\n      S = add(S, divide(multiply((-1) ** (k - 1), d(k, n)), pow(k, s)));\n    }\n\n    return multiply(c, S);\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/special/zeta.js"],"names":["factory","name","dependencies","createZeta","_ref","typed","config","multiply","pow","divide","factorial","equal","smallerEq","isNegative","gamma","sin","subtract","add","Complex","BigNumber","_BigNumber","pi","number","s","zetaNumeric","value","Math","abs","log10","epsilon","zetaComplex","createValue","determineDigits","NaN","isFinite","zeta","re","im","Infinity","round","getRe","n","f","c","d","k","S","j","factor"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'zeta';\nvar dependencies = ['typed', 'config', 'multiply', 'pow', 'divide', 'factorial', 'equal', 'smallerEq', 'isNegative', 'gamma', 'sin', 'subtract', 'add', '?Complex', '?BigNumber', 'pi'];\nexport var createZeta = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    multiply,\n    pow,\n    divide,\n    factorial,\n    equal,\n    smallerEq,\n    isNegative,\n    gamma,\n    sin,\n    subtract,\n    add,\n    Complex,\n    BigNumber: _BigNumber,\n    pi\n  } = _ref;\n  /**\n   * Compute the Riemann Zeta function of a value using an infinite series for\n   * all of the complex plane using Riemann's Functional equation.\n   *\n   * Based off the paper by Xavier Gourdon and Pascal Sebah\n   * ( http://numbers.computation.free.fr/Constants/Miscellaneous/zetaevaluations.pdf )\n   *\n   * Implementation and slight modification by Anik Patel\n   *\n   * Note: the implementation is accurate up to about 6 digits.\n   *\n   * Syntax:\n   *\n   *    math.zeta(n)\n   *\n   * Examples:\n   *\n   *    math.zeta(5)       // returns 1.0369277551433895\n   *    math.zeta(-0.5)    // returns -0.2078862249773449\n   *    math.zeta(math.i)  // returns 0.0033002236853253153 - 0.4181554491413212i\n   *\n   * See also:\n   *    erf\n   *\n   * @param {number | Complex | BigNumber} s   A Real, Complex or BigNumber parameter to the Riemann Zeta Function\n   * @return {number | Complex | BigNumber}    The Riemann Zeta of `s`\n   */\n  return typed(name, {\n    number: s => zetaNumeric(s, value => value, () => 20),\n    BigNumber: s => zetaNumeric(s, value => new _BigNumber(value), () => {\n      // epsilon is for example 1e-12. Extract the positive exponent 12 from that\n      return Math.abs(Math.log10(config.epsilon));\n    }),\n    Complex: zetaComplex\n  });\n\n  /**\n   * @param {number | BigNumber} s\n   * @param {(value: number) => number | BigNumber} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @returns {number | BigNumber}\n   */\n  function zetaNumeric(s, createValue, determineDigits) {\n    if (equal(s, 0)) {\n      return createValue(-0.5);\n    }\n    if (equal(s, 1)) {\n      return createValue(NaN);\n    }\n    if (!isFinite(s)) {\n      return isNegative(s) ? createValue(NaN) : createValue(1);\n    }\n    return zeta(s, createValue, determineDigits, s => s);\n  }\n\n  /**\n   * @param {Complex} s\n   * @returns {Complex}\n   */\n  function zetaComplex(s) {\n    if (s.re === 0 && s.im === 0) {\n      return new Complex(-0.5);\n    }\n    if (s.re === 1) {\n      return new Complex(NaN, NaN);\n    }\n    if (s.re === Infinity && s.im === 0) {\n      return new Complex(1);\n    }\n    if (s.im === Infinity || s.re === -Infinity) {\n      return new Complex(NaN, NaN);\n    }\n    return zeta(s, value => value, s => Math.round(1.3 * 15 + 0.9 * Math.abs(s.im)), s => s.re);\n  }\n\n  /**\n   * @param {number | BigNumber | Complex} s\n   * @param {(value: number) => number | BigNumber | Complex} createValue\n   * @param {(value: number | BigNumber | Complex) => number} determineDigits\n   * @param {(value: number | BigNumber | Complex) => number} getRe\n   * @returns {*|number}\n   */\n  function zeta(s, createValue, determineDigits, getRe) {\n    var n = determineDigits(s);\n    if (getRe(s) > -(n - 1) / 2) {\n      return f(s, createValue(n), createValue);\n    } else {\n      // Function Equation for reflection to x < 1\n      var c = multiply(pow(2, s), pow(createValue(pi), subtract(s, 1)));\n      c = multiply(c, sin(multiply(divide(createValue(pi), 2), s)));\n      c = multiply(c, gamma(subtract(1, s)));\n      return multiply(c, zeta(subtract(1, s), createValue, determineDigits, getRe));\n    }\n  }\n\n  /**\n   * Calculate a portion of the sum\n   * @param {number | BigNumber} k   a positive integer\n   * @param {number | BigNumber} n   a positive integer\n   * @return {number}    the portion of the sum\n   **/\n  function d(k, n) {\n    var S = k;\n    for (var j = k; smallerEq(j, n); j = add(j, 1)) {\n      var factor = divide(multiply(factorial(add(n, subtract(j, 1))), pow(4, j)), multiply(factorial(subtract(n, j)), factorial(multiply(2, j))));\n      S = add(S, factor);\n    }\n    return multiply(n, S);\n  }\n\n  /**\n   * Calculate the positive Riemann Zeta function\n   * @param {number} s   a real or complex number with s.re > 1\n   * @param {number} n   a positive integer\n   * @param {(number) => number | BigNumber | Complex} createValue\n   * @return {number}    Riemann Zeta of s\n   **/\n  function f(s, n, createValue) {\n    var c = divide(1, multiply(d(createValue(0), n), subtract(1, pow(2, subtract(1, s)))));\n    var S = createValue(0);\n    for (var k = createValue(1); smallerEq(k, n); k = add(k, 1)) {\n      S = add(S, divide(multiply((-1) ** (k - 1), d(k, n)), pow(k, s)));\n    }\n    return multiply(c, S);\n  }\n});"]},"metadata":{},"sourceType":"module"}