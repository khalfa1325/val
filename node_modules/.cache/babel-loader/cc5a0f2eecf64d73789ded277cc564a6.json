{"ast":null,"code":"var exec = require('child_process').exec;\n\nvar systemRoot = process.env.SystemRoot || 'C:\\\\Windows';\nvar winProvider = systemRoot + '\\\\System32\\\\netsh.exe';\n\nfunction parseNetsh(terms, str) {\n  var lines = str.split('\\n');\n  var wifis = [];\n  var info = {};\n  var line;\n  var ssid;\n  var fields = {\n    'mac': new RegExp('^' + terms.BSSID + ' \\\\d+\\\\s*:\\\\s*(.+)'),\n    'ssid': new RegExp('^' + terms.SSID + ' \\\\d+\\\\s*:\\\\s*(.*)'),\n    'signal_level': new RegExp('^' + terms.Signal + '\\\\s*:\\\\s*(\\\\d+)'),\n    'channel': new RegExp('^' + terms.Channel + '\\\\s*:\\\\s*(\\\\d+)')\n  };\n\n  for (var i = 0, l = lines.length; i < l; i++) {\n    line = lines[i].trim();\n\n    if (!line.length) {\n      continue;\n    } else if (line.match(fields.ssid)) {\n      if (info.ssid) {\n        wifis.push(info);\n      }\n\n      info = {};\n      info.ssid = fields.ssid.exec(line)[1];\n    } else if (line.match(fields.mac)) {\n      info.mac = fields.mac.exec(line)[1];\n    } else if (line.match(fields.signal_level)) {\n      info.signal_level = fields.signal_level.exec(line)[1]; // According to http://stackoverflow.com/q/15797920\n      // Microsoft's signal quality is 0 to 100,\n      //   representing RSSI values between -100 and -50 dbm.\n\n      info.signal_level = info.signal_level / 2 - 100;\n    } else if (line.match(fields.channel)) {\n      info.channel = fields.channel.exec(line)[1];\n    }\n  }\n\n  if (info.ssid) {\n    wifis.push(info);\n  }\n\n  return wifis;\n}\n\nfunction scan(terms, callback) {\n  exec(winProvider + ' wlan show networks mode=Bssid', function (err, stdout, stderr) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    callback(null, parseNetsh(terms, stdout));\n  });\n}\n\nexports.scan = scan;\nexports.utility = winProvider;\nexports.parse = parseNetsh;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/node-wifiscanner2/lib/netsh.js"],"names":["exec","require","systemRoot","process","env","SystemRoot","winProvider","parseNetsh","terms","str","lines","split","wifis","info","line","ssid","fields","RegExp","BSSID","SSID","Signal","Channel","i","l","length","trim","match","push","mac","signal_level","channel","scan","callback","err","stdout","stderr","exports","utility","parse"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAApC;;AACA,IAAIE,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,IAA0B,aAA3C;AACA,IAAIC,WAAW,GAAGJ,UAAU,GAAG,uBAA/B;;AAEA,SAASK,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC5B,MAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,CAAZ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIC,IAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,MAAM,GAAG;AACT,WAAQ,IAAIC,MAAJ,CAAW,MAAMT,KAAK,CAACU,KAAZ,GAAoB,oBAA/B,CADC;AAET,YAAS,IAAID,MAAJ,CAAW,MAAMT,KAAK,CAACW,IAAZ,GAAmB,oBAA9B,CAFA;AAGT,oBAAiB,IAAIF,MAAJ,CAAW,MAAMT,KAAK,CAACY,MAAZ,GAAqB,iBAAhC,CAHR;AAIT,eAAY,IAAIH,MAAJ,CAAW,MAAMT,KAAK,CAACa,OAAZ,GAAsB,iBAAjC;AAJH,GAAb;;AAOA,OAAK,IAAIC,CAAC,GAAC,CAAN,EAASC,CAAC,GAACb,KAAK,CAACc,MAAtB,EAA8BF,CAAC,GAACC,CAAhC,EAAmCD,CAAC,EAApC,EAAwC;AACpCR,IAAAA,IAAI,GAAGJ,KAAK,CAACY,CAAD,CAAL,CAASG,IAAT,EAAP;;AAEA,QAAI,CAACX,IAAI,CAACU,MAAV,EAAkB;AACd;AACH,KAFD,MAIK,IAAIV,IAAI,CAACY,KAAL,CAAWV,MAAM,CAACD,IAAlB,CAAJ,EAA6B;AAC9B,UAAIF,IAAI,CAACE,IAAT,EAAe;AACXH,QAAAA,KAAK,CAACe,IAAN,CAAWd,IAAX;AACH;;AACDA,MAAAA,IAAI,GAAG,EAAP;AACAA,MAAAA,IAAI,CAACE,IAAL,GAAYC,MAAM,CAACD,IAAP,CAAYf,IAAZ,CAAiBc,IAAjB,EAAuB,CAAvB,CAAZ;AACH,KANI,MAQA,IAAIA,IAAI,CAACY,KAAL,CAAWV,MAAM,CAACY,GAAlB,CAAJ,EAA4B;AAC7Bf,MAAAA,IAAI,CAACe,GAAL,GAAWZ,MAAM,CAACY,GAAP,CAAW5B,IAAX,CAAgBc,IAAhB,EAAsB,CAAtB,CAAX;AACH,KAFI,MAIA,IAAIA,IAAI,CAACY,KAAL,CAAWV,MAAM,CAACa,YAAlB,CAAJ,EAAqC;AACtChB,MAAAA,IAAI,CAACgB,YAAL,GAAoBb,MAAM,CAACa,YAAP,CAAoB7B,IAApB,CAAyBc,IAAzB,EAA+B,CAA/B,CAApB,CADsC,CAGtC;AACA;AACA;;AACAD,MAAAA,IAAI,CAACgB,YAAL,GAAqBhB,IAAI,CAACgB,YAAL,GAAoB,CAArB,GAA0B,GAA9C;AAEH,KARI,MASA,IAAIf,IAAI,CAACY,KAAL,CAAWV,MAAM,CAACc,OAAlB,CAAJ,EAAgC;AACjCjB,MAAAA,IAAI,CAACiB,OAAL,GAAed,MAAM,CAACc,OAAP,CAAe9B,IAAf,CAAoBc,IAApB,EAA0B,CAA1B,CAAf;AACH;AACJ;;AAED,MAAID,IAAI,CAACE,IAAT,EAAe;AACXH,IAAAA,KAAK,CAACe,IAAN,CAAWd,IAAX;AACH;;AACD,SAAOD,KAAP;AACH;;AAED,SAASmB,IAAT,CAAcvB,KAAd,EAAqBwB,QAArB,EAA+B;AAC3BhC,EAAAA,IAAI,CAACM,WAAW,GAAG,gCAAf,EAAiD,UAAS2B,GAAT,EAAcC,MAAd,EAAsBC,MAAtB,EAA6B;AAC9E,QAAIF,GAAJ,EAAS;AACLD,MAAAA,QAAQ,CAACC,GAAD,EAAM,IAAN,CAAR;AACA;AACH;;AACDD,IAAAA,QAAQ,CAAC,IAAD,EAAOzB,UAAU,CAACC,KAAD,EAAQ0B,MAAR,CAAjB,CAAR;AACH,GANG,CAAJ;AAOH;;AAEDE,OAAO,CAACL,IAAR,GAAeA,IAAf;AACAK,OAAO,CAACC,OAAR,GAAkB/B,WAAlB;AACA8B,OAAO,CAACE,KAAR,GAAgB/B,UAAhB","sourcesContent":["var exec = require('child_process').exec;\nvar systemRoot = process.env.SystemRoot || 'C:\\\\Windows';\nvar winProvider = systemRoot + '\\\\System32\\\\netsh.exe';\n\nfunction parseNetsh(terms, str) {\n    var lines = str.split('\\n');\n    var wifis = [];\n    var info = {};\n    var line;\n    var ssid;\n    var fields = {\n        'mac' : new RegExp('^' + terms.BSSID + ' \\\\d+\\\\s*:\\\\s*(.+)'),\n        'ssid' : new RegExp('^' + terms.SSID + ' \\\\d+\\\\s*:\\\\s*(.*)'),\n        'signal_level' : new RegExp('^' + terms.Signal + '\\\\s*:\\\\s*(\\\\d+)'),\n        'channel' : new RegExp('^' + terms.Channel + '\\\\s*:\\\\s*(\\\\d+)')\n    };\n\n    for (var i=0, l=lines.length; i<l; i++) {\n        line = lines[i].trim();\n\n        if (!line.length) {\n            continue;\n        }\n\n        else if (line.match(fields.ssid)) {\n            if (info.ssid) {\n                wifis.push(info);\n            }\n            info = {};\n            info.ssid = fields.ssid.exec(line)[1];\n        }\n\n        else if (line.match(fields.mac)) {\n            info.mac = fields.mac.exec(line)[1];\n        }\n\n        else if (line.match(fields.signal_level)) {\n            info.signal_level = fields.signal_level.exec(line)[1];\n\n            // According to http://stackoverflow.com/q/15797920\n            // Microsoft's signal quality is 0 to 100,\n            //   representing RSSI values between -100 and -50 dbm.\n            info.signal_level = (info.signal_level / 2) - 100;\n\n        }\n        else if (line.match(fields.channel)) {\n            info.channel = fields.channel.exec(line)[1];\n        }\n    }\n\n    if (info.ssid) {\n        wifis.push(info);\n    }\n    return wifis;\n}\n\nfunction scan(terms, callback) {\n    exec(winProvider + ' wlan show networks mode=Bssid', function(err, stdout, stderr){\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, parseNetsh(terms, stdout));\n    });\n}\n\nexports.scan = scan;\nexports.utility = winProvider;\nexports.parse = parseNetsh;\n"]},"metadata":{},"sourceType":"script"}