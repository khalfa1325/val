{"ast":null,"code":"import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize, concat as _concat } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i]; // test whether we need to return a Matrix (if not we return an Array)\n\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          } // last argument contains the dimension on which to concatenate\n\n\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1; // verify whether each of the matrices has the same number of dimensions\n\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n\n      var res = matrices.shift();\n\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim);\n      }\n\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/matrix/concat.js"],"names":["isBigNumber","isMatrix","isNumber","clone","arraySize","concat","_concat","IndexError","DimensionError","factory","name","dependencies","createConcat","_ref","typed","matrix","isInteger","ArrayMatrixNumberBigNumber","args","i","len","length","dim","prevDim","asMatrix","matrices","arg","Error","valueOf","TypeError","m","size","SyntaxError","res","shift","string","join"],"mappings":"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","sourcesContent":["import { isBigNumber, isMatrix, isNumber } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { arraySize, concat as _concat } from '../../utils/array.js';\nimport { IndexError } from '../../error/IndexError.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'concat';\nvar dependencies = ['typed', 'matrix', 'isInteger'];\nexport var createConcat = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    isInteger\n  } = _ref;\n  /**\n   * Concatenate two or more matrices.\n   *\n   * Syntax:\n   *\n   *     math.concat(A, B, C, ...)\n   *     math.concat(A, B, C, ..., dim)\n   *\n   * Where:\n   *\n   * - `dim: number` is a zero-based dimension over which to concatenate the matrices.\n   *   By default the last dimension of the matrices.\n   *\n   * Examples:\n   *\n   *    const A = [[1, 2], [5, 6]]\n   *    const B = [[3, 4], [7, 8]]\n   *\n   *    math.concat(A, B)                  // returns [[1, 2, 3, 4], [5, 6, 7, 8]]\n   *    math.concat(A, B, 0)               // returns [[1, 2], [5, 6], [3, 4], [7, 8]]\n   *    math.concat('hello', ' ', 'world') // returns 'hello world'\n   *\n   * See also:\n   *\n   *    size, squeeze, subset, transpose\n   *\n   * @param {... Array | Matrix} args     Two or more matrices\n   * @return {Array | Matrix} Concatenated matrix\n   */\n  return typed(name, {\n    // TODO: change signature to '...Array | Matrix, dim?' when supported\n    '...Array | Matrix | number | BigNumber': function ArrayMatrixNumberBigNumber(args) {\n      var i;\n      var len = args.length;\n      var dim = -1; // zero-based dimension\n      var prevDim;\n      var asMatrix = false;\n      var matrices = []; // contains multi dimensional arrays\n\n      for (i = 0; i < len; i++) {\n        var arg = args[i];\n\n        // test whether we need to return a Matrix (if not we return an Array)\n        if (isMatrix(arg)) {\n          asMatrix = true;\n        }\n        if (isNumber(arg) || isBigNumber(arg)) {\n          if (i !== len - 1) {\n            throw new Error('Dimension must be specified as last argument');\n          }\n\n          // last argument contains the dimension on which to concatenate\n          prevDim = dim;\n          dim = arg.valueOf(); // change BigNumber to number\n\n          if (!isInteger(dim)) {\n            throw new TypeError('Integer number expected for dimension');\n          }\n          if (dim < 0 || i > 0 && dim > prevDim) {\n            // TODO: would be more clear when throwing a DimensionError here\n            throw new IndexError(dim, prevDim + 1);\n          }\n        } else {\n          // this is a matrix or array\n          var m = clone(arg).valueOf();\n          var size = arraySize(m);\n          matrices[i] = m;\n          prevDim = dim;\n          dim = size.length - 1;\n\n          // verify whether each of the matrices has the same number of dimensions\n          if (i > 0 && dim !== prevDim) {\n            throw new DimensionError(prevDim + 1, dim + 1);\n          }\n        }\n      }\n      if (matrices.length === 0) {\n        throw new SyntaxError('At least one matrix expected');\n      }\n      var res = matrices.shift();\n      while (matrices.length) {\n        res = _concat(res, matrices.shift(), dim);\n      }\n      return asMatrix ? matrix(res) : res;\n    },\n    '...string': function string(args) {\n      return args.join('');\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}