{"ast":null,"code":"import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.ceil(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/ceil.js"],"names":["Decimal","factory","deepMap","nearlyEqual","bigNearlyEqual","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatAlgo14xDs","name","dependencies","createCeilNumber","_ref","typed","config","round","number","x","epsilon","Math","ceil","numberNumber","n","exponent","concat","split","result","Number","createCeil","_ref2","matrix","equalScalar","zeros","DenseMatrix","matAlgo11xS0s","matAlgo12xSfs","matAlgo14xDs","ceilNumber","signatures","Complex","ComplexNumber","ComplexBigNumber","toNumber","BigNumber","BigNumberBigNumber","toDecimalPlaces","ROUND_CEIL","Fraction","FractionNumber","FractionBigNumber","referToSelf","self","i","y","valueOf","size","storage"],"mappings":"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","sourcesContent":["import Decimal from 'decimal.js';\nimport { factory } from '../../utils/factory.js';\nimport { deepMap } from '../../utils/collection.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nvar name = 'ceil';\nvar dependencies = ['typed', 'config', 'round', 'matrix', 'equalScalar', 'zeros', 'DenseMatrix'];\nexport var createCeilNumber = /* #__PURE__ */factory(name, ['typed', 'config', 'round'], _ref => {\n  var {\n    typed,\n    config,\n    round\n  } = _ref;\n  return typed(name, {\n    number: function number(x) {\n      if (nearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return Math.ceil(x);\n      }\n    },\n    'number, number': function numberNumber(x, n) {\n      if (nearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        var [number, exponent] = \"\".concat(x, \"e\").split('e');\n        var result = Math.ceil(Number(\"\".concat(number, \"e\").concat(Number(exponent) + n)));\n        [number, exponent] = \"\".concat(result, \"e\").split('e');\n        return Number(\"\".concat(number, \"e\").concat(Number(exponent) - n));\n      }\n    }\n  });\n});\nexport var createCeil = /* #__PURE__ */factory(name, dependencies, _ref2 => {\n  var {\n    typed,\n    config,\n    round,\n    matrix,\n    equalScalar,\n    zeros,\n    DenseMatrix\n  } = _ref2;\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var ceilNumber = createCeilNumber({\n    typed,\n    config,\n    round\n  });\n  /**\n   * Round a value towards plus infinity\n   * If `x` is complex, both real and imaginary part are rounded towards plus infinity.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.ceil(x)\n   *    math.ceil(x, n)\n   *\n   * Examples:\n   *\n   *    math.ceil(3.2)               // returns number 4\n   *    math.ceil(3.8)               // returns number 4\n   *    math.ceil(-4.2)              // returns number -4\n   *    math.ceil(-4.7)              // returns number -4\n   *\n   *    math.ceil(3.212, 2)          // returns number 3.22\n   *    math.ceil(3.288, 2)          // returns number 3.29\n   *    math.ceil(-4.212, 2)         // returns number -4.21\n   *    math.ceil(-4.782, 2)         // returns number -4.78\n   *\n   *    const c = math.complex(3.24, -2.71)\n   *    math.ceil(c)                 // returns Complex 4 - 2i\n   *    math.ceil(c, 1)              // returns Complex 3.3 - 2.7i\n   *\n   *    math.ceil([3.2, 3.8, -4.7])  // returns Array [4, 4, -4]\n   *    math.ceil([3.21, 3.82, -4.71], 1)  // returns Array [3.3, 3.9, -4.7]\n   *\n   * See also:\n   *\n   *    floor, fix, round\n   *\n   * @param  {number | BigNumber | Fraction | Complex | Array | Matrix} x  Number to be rounded\n   * @param  {number | BigNumber | Array} [n=0]                            Number of decimals\n   * @return {number | BigNumber | Fraction | Complex | Array | Matrix} Rounded value\n   */\n  return typed('ceil', {\n    number: ceilNumber.signatures.number,\n    'number,number': ceilNumber.signatures['number,number'],\n    Complex: function Complex(x) {\n      return x.ceil();\n    },\n    'Complex, number': function ComplexNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Complex, BigNumber': function ComplexBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    BigNumber: function BigNumber(x) {\n      if (bigNearlyEqual(x, round(x), config.epsilon)) {\n        return round(x);\n      } else {\n        return x.ceil();\n      }\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, n) {\n      if (bigNearlyEqual(x, round(x, n), config.epsilon)) {\n        return round(x, n);\n      } else {\n        return x.toDecimalPlaces(n.toNumber(), Decimal.ROUND_CEIL);\n      }\n    },\n    Fraction: function Fraction(x) {\n      return x.ceil();\n    },\n    'Fraction, number': function FractionNumber(x, n) {\n      return x.ceil(n);\n    },\n    'Fraction, BigNumber': function FractionBigNumber(x, n) {\n      return x.ceil(n.toNumber());\n    },\n    'Array | Matrix': typed.referToSelf(self => x => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, self, true);\n    }),\n    'Array, number | BigNumber': typed.referToSelf(self => (x, n) => {\n      // deep map collection, skip zeros since ceil(0) = 0\n      return deepMap(x, i => self(i, n), true);\n    }),\n    'SparseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, number | BigNumber': typed.referToSelf(self => (x, y) => {\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'number | Complex | Fraction | BigNumber, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return matAlgo14xDs(matrix(y), x, self, true).valueOf();\n    }),\n    'number | Complex | Fraction | BigNumber, Matrix': typed.referToSelf(self => (x, y) => {\n      if (equalScalar(x, 0)) return zeros(y.size(), y.storage());\n      if (y.storage() === 'dense') {\n        return matAlgo14xDs(y, x, self, true);\n      }\n      return matAlgo12xSfs(y, x, self, true);\n    })\n  });\n});"]},"metadata":{},"sourceType":"module"}