{"ast":null,"code":"import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     math.derivative(expr, variable)\n   *     math.derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node '2 * x'\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node '2 * 1 * x ^ (2 - 1)'\n   *     math.derivative('sin(2x)', 'x'))                // Node '2 * cos(2 * x)'\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n\n  function plainDerivative(expr, variable) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      simplify: true\n    };\n    var constNodes = {};\n    constTag(constNodes, expr, variable.name);\n\n    var res = _derivative(expr, constNodes);\n\n    return options.simplify ? simplify(res) : res;\n  }\n\n  typed.addConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  var derivative = typed(name, {\n    'Node, SymbolNode': plainDerivative,\n    'Node, SymbolNode, Object': plainDerivative\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n\n  });\n  typed.removeConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  derivative._simplify = true;\n\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  }; // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n\n\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toTex(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n\n\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n\n      return false;\n    }\n  });\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]); // Is a variable?\n\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n\n          break;\n\n        case 'log10':\n          arg1 = createConstantNode(10);\n\n        /* fall through! */\n\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n\n          break;\n\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]]; // Pass to pow operator node parser\n\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n\n      var op, func;\n\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n\n\n      var chainDerivative = _derivative(arg0, constNodes);\n\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        } // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n\n\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        } // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n\n\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1]; // d/dx(f(x) / c) = f'(x) / c\n\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        } // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n\n\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        } // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n\n\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          } // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n\n\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n\n        if (constNodes[_arg2] !== undefined) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            } // Ignore exponent; f(x)^1 = f(x)\n\n\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          } // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n\n\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        } // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n\n\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n\n\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    } // There should be an incorrect number of arguments if we reach here\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n\n\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n\n\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n\n  return derivative;\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/derivative.js"],"names":["isConstantNode","typeOf","factory","name","dependencies","createDerivative","_ref","typed","config","parse","simplify","equal","isZero","numeric","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","SymbolNode","plainDerivative","expr","variable","options","arguments","length","undefined","constNodes","constTag","res","_derivative","addConversion","from","to","convert","derivative","removeConversion","_simplify","toTex","deriv","_derivTex","apply","args","NodeSymbolNode","x","value","toString","NodeConstantNode","Error","NodeSymbolNodeConstantNode","order","stringStringNumber","d","concat","ObjectConstantNodeString","node","ObjectSymbolNodeString","varName","ObjectParenthesisNodeString","content","ObjectFunctionAssignmentNodeString","params","indexOf","ObjectFunctionNodeOperatorNodeString","isConst","i","ConstantNodeObject","createConstantNode","SymbolNodeObject","ParenthesisNodeObject","FunctionAssignmentNodeObject","FunctionNodeObject","funcArgsCheck","arg0","arg1","div","negative","funcDerivative","clone","op","func","chainDerivative","OperatorNodeObject","fn","map","arg","isUnary","isBinary","constantTerms","filter","nonConstantTerms","nonConstantNode","newArgs","argOuter","argInner","_arg","_arg2","powMinusOne","compile","evaluate","valueType","number"],"mappings":"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","sourcesContent":["import { isConstantNode, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'derivative';\nvar dependencies = ['typed', 'config', 'parse', 'simplify', 'equal', 'isZero', 'numeric', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createDerivative = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    parse,\n    simplify,\n    equal,\n    isZero,\n    numeric,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  /**\n   * Takes the derivative of an expression expressed in parser Nodes.\n   * The derivative will be taken over the supplied variable in the\n   * second parameter. If there are multiple variables in the expression,\n   * it will return a partial derivative.\n   *\n   * This uses rules of differentiation which can be found here:\n   *\n   * - [Differentiation rules (Wikipedia)](https://en.wikipedia.org/wiki/Differentiation_rules)\n   *\n   * Syntax:\n   *\n   *     math.derivative(expr, variable)\n   *     math.derivative(expr, variable, options)\n   *\n   * Examples:\n   *\n   *     math.derivative('x^2', 'x')                     // Node '2 * x'\n   *     math.derivative('x^2', 'x', {simplify: false})  // Node '2 * 1 * x ^ (2 - 1)'\n   *     math.derivative('sin(2x)', 'x'))                // Node '2 * cos(2 * x)'\n   *     math.derivative('2*x', 'x').evaluate()          // number 2\n   *     math.derivative('x^2', 'x').evaluate({x: 4})    // number 8\n   *     const f = math.parse('x^2')\n   *     const x = math.parse('x')\n   *     math.derivative(f, x)                           // Node {2 * x}\n   *\n   * See also:\n   *\n   *     simplify, parse, evaluate\n   *\n   * @param  {Node | string} expr           The expression to differentiate\n   * @param  {SymbolNode | string} variable The variable over which to differentiate\n   * @param  {{simplify: boolean}} [options]\n   *                         There is one option available, `simplify`, which\n   *                         is true by default. When false, output will not\n   *                         be simplified.\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  function plainDerivative(expr, variable) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      simplify: true\n    };\n    var constNodes = {};\n    constTag(constNodes, expr, variable.name);\n    var res = _derivative(expr, constNodes);\n    return options.simplify ? simplify(res) : res;\n  }\n  typed.addConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  var derivative = typed(name, {\n    'Node, SymbolNode': plainDerivative,\n    'Node, SymbolNode, Object': plainDerivative\n\n    /* TODO: implement and test syntax with order of derivatives -> implement as an option {order: number}\n    'Node, SymbolNode, ConstantNode': function (expr, variable, {order}) {\n      let res = expr\n      for (let i = 0; i < order; i++) {\n        let constNodes = {}\n        constTag(constNodes, expr, variable.name)\n        res = _derivative(res, constNodes)\n      }\n      return res\n    }\n    */\n  });\n\n  typed.removeConversion({\n    from: 'identifier',\n    to: 'SymbolNode',\n    convert: parse\n  });\n  derivative._simplify = true;\n  derivative.toTex = function (deriv) {\n    return _derivTex.apply(null, deriv.args);\n  };\n\n  // FIXME: move the toTex method of derivative to latex.js. Difficulty is that it relies on parse.\n  // NOTE: the optional \"order\" parameter here is currently unused\n  var _derivTex = typed('_derivTex', {\n    'Node, SymbolNode': function NodeSymbolNode(expr, x) {\n      if (isConstantNode(expr) && typeOf(expr.value) === 'string') {\n        return _derivTex(parse(expr.value).toString(), x.toString(), 1);\n      } else {\n        return _derivTex(expr.toTex(), x.toString(), 1);\n      }\n    },\n    'Node, ConstantNode': function NodeConstantNode(expr, x) {\n      if (typeOf(x.value) === 'string') {\n        return _derivTex(expr, parse(x.value));\n      } else {\n        throw new Error(\"The second parameter to 'derivative' is a non-string constant\");\n      }\n    },\n    'Node, SymbolNode, ConstantNode': function NodeSymbolNodeConstantNode(expr, x, order) {\n      return _derivTex(expr.toString(), x.name, order.value);\n    },\n    'string, string, number': function stringStringNumber(expr, x, order) {\n      var d;\n      if (order === 1) {\n        d = '{d\\\\over d' + x + '}';\n      } else {\n        d = '{d^{' + order + '}\\\\over d' + x + '^{' + order + '}}';\n      }\n      return d + \"\\\\left[\".concat(expr, \"\\\\right]\");\n    }\n  });\n\n  /**\n   * Does a depth-first search on the expression tree to identify what Nodes\n   * are constants (e.g. 2 + 2), and stores the ones that are constants in\n   * constNodes. Classification is done as follows:\n   *\n   *   1. ConstantNodes are constants.\n   *   2. If there exists a SymbolNode, of which we are differentiating over,\n   *      in the subtree it is not constant.\n   *\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {string} varName     Variable that we are differentiating\n   * @return {boolean}  if node is constant\n   */\n  // TODO: can we rewrite constTag into a pure function?\n  var constTag = typed('constTag', {\n    'Object, ConstantNode, string': function ObjectConstantNodeString(constNodes, node) {\n      constNodes[node] = true;\n      return true;\n    },\n    'Object, SymbolNode, string': function ObjectSymbolNodeString(constNodes, node, varName) {\n      // Treat other variables like constants. For reasoning, see:\n      //   https://en.wikipedia.org/wiki/Partial_derivative\n      if (node.name !== varName) {\n        constNodes[node] = true;\n        return true;\n      }\n      return false;\n    },\n    'Object, ParenthesisNode, string': function ObjectParenthesisNodeString(constNodes, node, varName) {\n      return constTag(constNodes, node.content, varName);\n    },\n    'Object, FunctionAssignmentNode, string': function ObjectFunctionAssignmentNodeString(constNodes, node, varName) {\n      if (node.params.indexOf(varName) === -1) {\n        constNodes[node] = true;\n        return true;\n      }\n      return constTag(constNodes, node.expr, varName);\n    },\n    'Object, FunctionNode | OperatorNode, string': function ObjectFunctionNodeOperatorNodeString(constNodes, node, varName) {\n      if (node.args.length > 0) {\n        var isConst = constTag(constNodes, node.args[0], varName);\n        for (var i = 1; i < node.args.length; ++i) {\n          isConst = constTag(constNodes, node.args[i], varName) && isConst;\n        }\n        if (isConst) {\n          constNodes[node] = true;\n          return true;\n        }\n      }\n      return false;\n    }\n  });\n\n  /**\n   * Applies differentiation rules.\n   *\n   * @param  {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode} node\n   * @param  {Object} constNodes  Holds the nodes that are constant\n   * @return {ConstantNode | SymbolNode | ParenthesisNode | FunctionNode | OperatorNode}    The derivative of `expr`\n   */\n  var _derivative = typed('_derivative', {\n    'ConstantNode, Object': function ConstantNodeObject(node) {\n      return createConstantNode(0);\n    },\n    'SymbolNode, Object': function SymbolNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return createConstantNode(1);\n    },\n    'ParenthesisNode, Object': function ParenthesisNodeObject(node, constNodes) {\n      return new ParenthesisNode(_derivative(node.content, constNodes));\n    },\n    'FunctionAssignmentNode, Object': function FunctionAssignmentNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      return _derivative(node.expr, constNodes);\n    },\n    'FunctionNode, Object': function FunctionNodeObject(node, constNodes) {\n      if (node.args.length !== 1) {\n        funcArgsCheck(node);\n      }\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      var arg0 = node.args[0];\n      var arg1;\n      var div = false; // is output a fraction?\n      var negative = false; // is output negative?\n\n      var funcDerivative;\n      switch (node.name) {\n        case 'cbrt':\n          // d/dx(cbrt(x)) = 1 / (3x^(2/3))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(3), new OperatorNode('^', 'pow', [arg0, new OperatorNode('/', 'divide', [createConstantNode(2), createConstantNode(3)])])]);\n          break;\n        case 'sqrt':\n        case 'nthRoot':\n          // d/dx(sqrt(x)) = 1 / (2*sqrt(x))\n          if (node.args.length === 1) {\n            div = true;\n            funcDerivative = new OperatorNode('*', 'multiply', [createConstantNode(2), new FunctionNode('sqrt', [arg0])]);\n          } else if (node.args.length === 2) {\n            // Rearrange from nthRoot(x, a) -> x^(1/a)\n            arg1 = new OperatorNode('/', 'divide', [createConstantNode(1), node.args[1]]);\n\n            // Is a variable?\n            constNodes[arg1] = constNodes[node.args[1]];\n            return _derivative(new OperatorNode('^', 'pow', [arg0, arg1]), constNodes);\n          }\n          break;\n        case 'log10':\n          arg1 = createConstantNode(10);\n        /* fall through! */\n        case 'log':\n          if (!arg1 && node.args.length === 1) {\n            // d/dx(log(x)) = 1 / x\n            funcDerivative = arg0.clone();\n            div = true;\n          } else if (node.args.length === 1 && arg1 || node.args.length === 2 && constNodes[node.args[1]] !== undefined) {\n            // d/dx(log(x, c)) = 1 / (x*ln(c))\n            funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('log', [arg1 || node.args[1]])]);\n            div = true;\n          } else if (node.args.length === 2) {\n            // d/dx(log(f(x), g(x))) = d/dx(log(f(x)) / log(g(x)))\n            return _derivative(new OperatorNode('/', 'divide', [new FunctionNode('log', [arg0]), new FunctionNode('log', [node.args[1]])]), constNodes);\n          }\n          break;\n        case 'pow':\n          constNodes[arg1] = constNodes[node.args[1]];\n          // Pass to pow operator node parser\n          return _derivative(new OperatorNode('^', 'pow', [arg0, node.args[1]]), constNodes);\n        case 'exp':\n          // d/dx(e^x) = e^x\n          funcDerivative = new FunctionNode('exp', [arg0.clone()]);\n          break;\n        case 'sin':\n          // d/dx(sin(x)) = cos(x)\n          funcDerivative = new FunctionNode('cos', [arg0.clone()]);\n          break;\n        case 'cos':\n          // d/dx(cos(x)) = -sin(x)\n          funcDerivative = new OperatorNode('-', 'unaryMinus', [new FunctionNode('sin', [arg0.clone()])]);\n          break;\n        case 'tan':\n          // d/dx(tan(x)) = sec(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sec', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sec':\n          // d/dx(sec(x)) = sec(x)tan(x)\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tan', [arg0.clone()])]);\n          break;\n        case 'csc':\n          // d/dx(csc(x)) = -csc(x)cot(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('cot', [arg0.clone()])]);\n          break;\n        case 'cot':\n          // d/dx(cot(x)) = -csc(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csc', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asin':\n          // d/dx(asin(x)) = 1 / sqrt(1 - x^2)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'acos':\n          // d/dx(acos(x)) = -1 / sqrt(1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])]);\n          break;\n        case 'atan':\n          // d/dx(atan(x)) = 1 / (x^2 + 1)\n          div = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'asec':\n          // d/dx(asec(x)) = 1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acsc':\n          // d/dx(acsc(x)) = -1 / (|x|*sqrt(x^2 - 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acot':\n          // d/dx(acot(x)) = -1 / (x^2 + 1)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)]);\n          break;\n        case 'sinh':\n          // d/dx(sinh(x)) = cosh(x)\n          funcDerivative = new FunctionNode('cosh', [arg0.clone()]);\n          break;\n        case 'cosh':\n          // d/dx(cosh(x)) = sinh(x)\n          funcDerivative = new FunctionNode('sinh', [arg0.clone()]);\n          break;\n        case 'tanh':\n          // d/dx(tanh(x)) = sech(x)^2\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('sech', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'sech':\n          // d/dx(sech(x)) = -sech(x)tanh(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('tanh', [arg0.clone()])]);\n          break;\n        case 'csch':\n          // d/dx(csch(x)) = -csch(x)coth(x)\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [node, new FunctionNode('coth', [arg0.clone()])]);\n          break;\n        case 'coth':\n          // d/dx(coth(x)) = -csch(x)^2\n          negative = true;\n          funcDerivative = new OperatorNode('^', 'pow', [new FunctionNode('csch', [arg0.clone()]), createConstantNode(2)]);\n          break;\n        case 'asinh':\n          // d/dx(asinh(x)) = 1 / sqrt(x^2 + 1)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'acosh':\n          // d/dx(acosh(x)) = 1 / sqrt(x^2 - 1); XXX potentially only for x >= 1 (the real spectrum)\n          div = true;\n          funcDerivative = new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])]);\n          break;\n        case 'atanh':\n          // d/dx(atanh(x)) = 1 / (1 - x^2)\n          div = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'asech':\n          // d/dx(asech(x)) = -1 / (x*sqrt(1 - x^2))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [arg0.clone(), new FunctionNode('sqrt', [new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])])])]);\n          break;\n        case 'acsch':\n          // d/dx(acsch(x)) = -1 / (|x|*sqrt(x^2 + 1))\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('*', 'multiply', [new FunctionNode('abs', [arg0.clone()]), new FunctionNode('sqrt', [new OperatorNode('+', 'add', [new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)]), createConstantNode(1)])])]);\n          break;\n        case 'acoth':\n          // d/dx(acoth(x)) = -1 / (1 - x^2)\n          div = true;\n          negative = true;\n          funcDerivative = new OperatorNode('-', 'subtract', [createConstantNode(1), new OperatorNode('^', 'pow', [arg0.clone(), createConstantNode(2)])]);\n          break;\n        case 'abs':\n          // d/dx(abs(x)) = abs(x)/x\n          funcDerivative = new OperatorNode('/', 'divide', [new FunctionNode(new SymbolNode('abs'), [arg0.clone()]), arg0.clone()]);\n          break;\n        case 'gamma': // Needs digamma function, d/dx(gamma(x)) = gamma(x)digamma(x)\n        default:\n          throw new Error('Function \"' + node.name + '\" is not supported by derivative, or a wrong number of arguments is passed');\n      }\n      var op, func;\n      if (div) {\n        op = '/';\n        func = 'divide';\n      } else {\n        op = '*';\n        func = 'multiply';\n      }\n\n      /* Apply chain rule to all functions:\n         F(x)  = f(g(x))\n         F'(x) = g'(x)*f'(g(x)) */\n      var chainDerivative = _derivative(arg0, constNodes);\n      if (negative) {\n        chainDerivative = new OperatorNode('-', 'unaryMinus', [chainDerivative]);\n      }\n      return new OperatorNode(op, func, [chainDerivative, funcDerivative]);\n    },\n    'OperatorNode, Object': function OperatorNodeObject(node, constNodes) {\n      if (constNodes[node] !== undefined) {\n        return createConstantNode(0);\n      }\n      if (node.op === '+') {\n        // d/dx(sum(f(x)) = sum(f'(x))\n        return new OperatorNode(node.op, node.fn, node.args.map(function (arg) {\n          return _derivative(arg, constNodes);\n        }));\n      }\n      if (node.op === '-') {\n        // d/dx(+/-f(x)) = +/-f'(x)\n        if (node.isUnary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes)]);\n        }\n\n        // Linearity of differentiation, d/dx(f(x) +/- g(x)) = f'(x) +/- g'(x)\n        if (node.isBinary()) {\n          return new OperatorNode(node.op, node.fn, [_derivative(node.args[0], constNodes), _derivative(node.args[1], constNodes)]);\n        }\n      }\n      if (node.op === '*') {\n        // d/dx(c*f(x)) = c*f'(x)\n        var constantTerms = node.args.filter(function (arg) {\n          return constNodes[arg] !== undefined;\n        });\n        if (constantTerms.length > 0) {\n          var nonConstantTerms = node.args.filter(function (arg) {\n            return constNodes[arg] === undefined;\n          });\n          var nonConstantNode = nonConstantTerms.length === 1 ? nonConstantTerms[0] : new OperatorNode('*', 'multiply', nonConstantTerms);\n          var newArgs = constantTerms.concat(_derivative(nonConstantNode, constNodes));\n          return new OperatorNode('*', 'multiply', newArgs);\n        }\n\n        // Product Rule, d/dx(f(x)*g(x)) = f'(x)*g(x) + f(x)*g'(x)\n        return new OperatorNode('+', 'add', node.args.map(function (argOuter) {\n          return new OperatorNode('*', 'multiply', node.args.map(function (argInner) {\n            return argInner === argOuter ? _derivative(argInner, constNodes) : argInner.clone();\n          }));\n        }));\n      }\n      if (node.op === '/' && node.isBinary()) {\n        var arg0 = node.args[0];\n        var arg1 = node.args[1];\n\n        // d/dx(f(x) / c) = f'(x) / c\n        if (constNodes[arg1] !== undefined) {\n          return new OperatorNode('/', 'divide', [_derivative(arg0, constNodes), arg1]);\n        }\n\n        // Reciprocal Rule, d/dx(c / f(x)) = -c(f'(x)/f(x)^2)\n        if (constNodes[arg0] !== undefined) {\n          return new OperatorNode('*', 'multiply', [new OperatorNode('-', 'unaryMinus', [arg0]), new OperatorNode('/', 'divide', [_derivative(arg1, constNodes), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])])]);\n        }\n\n        // Quotient rule, d/dx(f(x) / g(x)) = (f'(x)g(x) - f(x)g'(x)) / g(x)^2\n        return new OperatorNode('/', 'divide', [new OperatorNode('-', 'subtract', [new OperatorNode('*', 'multiply', [_derivative(arg0, constNodes), arg1.clone()]), new OperatorNode('*', 'multiply', [arg0.clone(), _derivative(arg1, constNodes)])]), new OperatorNode('^', 'pow', [arg1.clone(), createConstantNode(2)])]);\n      }\n      if (node.op === '^' && node.isBinary()) {\n        var _arg = node.args[0];\n        var _arg2 = node.args[1];\n        if (constNodes[_arg] !== undefined) {\n          // If is secretly constant; 0^f(x) = 1 (in JS), 1^f(x) = 1\n          if (isConstantNode(_arg) && (isZero(_arg.value) || equal(_arg.value, 1))) {\n            return createConstantNode(0);\n          }\n\n          // d/dx(c^f(x)) = c^f(x)*ln(c)*f'(x)\n          return new OperatorNode('*', 'multiply', [node, new OperatorNode('*', 'multiply', [new FunctionNode('log', [_arg.clone()]), _derivative(_arg2.clone(), constNodes)])]);\n        }\n        if (constNodes[_arg2] !== undefined) {\n          if (isConstantNode(_arg2)) {\n            // If is secretly constant; f(x)^0 = 1 -> d/dx(1) = 0\n            if (isZero(_arg2.value)) {\n              return createConstantNode(0);\n            }\n            // Ignore exponent; f(x)^1 = f(x)\n            if (equal(_arg2.value, 1)) {\n              return _derivative(_arg, constNodes);\n            }\n          }\n\n          // Elementary Power Rule, d/dx(f(x)^c) = c*f'(x)*f(x)^(c-1)\n          var powMinusOne = new OperatorNode('^', 'pow', [_arg.clone(), new OperatorNode('-', 'subtract', [_arg2, createConstantNode(1)])]);\n          return new OperatorNode('*', 'multiply', [_arg2.clone(), new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), powMinusOne])]);\n        }\n\n        // Functional Power Rule, d/dx(f^g) = f^g*[f'*(g/f) + g'ln(f)]\n        return new OperatorNode('*', 'multiply', [new OperatorNode('^', 'pow', [_arg.clone(), _arg2.clone()]), new OperatorNode('+', 'add', [new OperatorNode('*', 'multiply', [_derivative(_arg, constNodes), new OperatorNode('/', 'divide', [_arg2.clone(), _arg.clone()])]), new OperatorNode('*', 'multiply', [_derivative(_arg2, constNodes), new FunctionNode('log', [_arg.clone()])])])]);\n      }\n      throw new Error('Operator \"' + node.op + '\" is not supported by derivative, or a wrong number of arguments is passed');\n    }\n  });\n\n  /**\n   * Ensures the number of arguments for a function are correct,\n   * and will throw an error otherwise.\n   *\n   * @param {FunctionNode} node\n   */\n  function funcArgsCheck(node) {\n    // TODO add min, max etc\n    if ((node.name === 'log' || node.name === 'nthRoot' || node.name === 'pow') && node.args.length === 2) {\n      return;\n    }\n\n    // There should be an incorrect number of arguments if we reach here\n\n    // Change all args to constants to avoid unidentified\n    // symbol error when compiling function\n    for (var i = 0; i < node.args.length; ++i) {\n      node.args[i] = createConstantNode(0);\n    }\n    node.compile().evaluate();\n    throw new Error('Expected TypeError, but none found');\n  }\n\n  /**\n   * Helper function to create a constant node with a specific type\n   * (number, BigNumber, Fraction)\n   * @param {number} value\n   * @param {string} [valueType]\n   * @return {ConstantNode}\n   */\n  function createConstantNode(value, valueType) {\n    return new ConstantNode(numeric(value, valueType || config.number));\n  }\n  return derivative;\n});"]},"metadata":{},"sourceType":"module"}