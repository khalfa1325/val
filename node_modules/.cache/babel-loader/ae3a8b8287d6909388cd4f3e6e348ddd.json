{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo08xS0Sid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo08xS0Sid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n\n  return function matAlgo08xS0Sid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype; // sparse matrix arrays\n\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result arrays\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // workspace\n\n    var x = []; // marks indicating we have a value in x for a given column\n\n    var w = []; // vars\n\n    var k, k0, k1, i; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // columns mark\n\n      var mark = j + 1; // loop values in a\n\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k]; // mark workspace\n\n        w[i] = mark; // set value\n\n        x[i] = avalues[k]; // add index\n\n        cindex.push(i);\n      } // loop values in b\n\n\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k]; // check value exists in workspace\n\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      } // initialize first index in j\n\n\n      k = cptr[j]; // loop index in j\n\n      while (k < cindex.length) {\n        // row\n        i = cindex[k]; // value @ i\n\n        var v = x[i]; // check for zero value\n\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v); // increment pointer\n\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo08xS0Sid.js"],"names":["factory","DimensionError","name","dependencies","createMatAlgo08xS0Sid","_ref","typed","equalScalar","matAlgo08xS0Sid","a","b","callback","avalues","_values","aindex","_index","aptr","_ptr","asize","_size","adt","_datatype","bvalues","bindex","bptr","bsize","bdt","length","RangeError","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","x","w","k","k0","k1","i","j","mark","push","v","splice","createSparseMatrix","values","index","ptr","size","datatype"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo08xS0Sid';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo08xS0Sid = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix A and SparseMatrix B nonzero items and invokes the callback function f(Aij, Bij).\n   * Callback function invoked MAX(NNZA, NNZB) times\n   *\n   *\n   *          ┌  f(Aij, Bij)  ; A(i,j) !== 0 && B(i,j) !== 0\n   * C(i,j) = ┤  A(i,j)       ; A(i,j) !== 0 && B(i,j) === 0\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   a                 The SparseMatrix instance (A)\n   * @param {Matrix}   b                 The SparseMatrix instance (B)\n   * @param {Function} callback          The f(Aij,Bij) operation to invoke\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97620294\n   */\n  return function matAlgo08xS0Sid(a, b, callback) {\n    // sparse matrix arrays\n    var avalues = a._values;\n    var aindex = a._index;\n    var aptr = a._ptr;\n    var asize = a._size;\n    var adt = a._datatype;\n    // sparse matrix arrays\n    var bvalues = b._values;\n    var bindex = b._index;\n    var bptr = b._ptr;\n    var bsize = b._size;\n    var bdt = b._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!avalues || !bvalues) {\n      throw new Error('Cannot perform operation on Pattern Sparse Matrices');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result arrays\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // workspace\n    var x = [];\n    // marks indicating we have a value in x for a given column\n    var w = [];\n\n    // vars\n    var k, k0, k1, i;\n\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // columns mark\n      var mark = j + 1;\n      // loop values in a\n      for (k0 = aptr[j], k1 = aptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = aindex[k];\n        // mark workspace\n        w[i] = mark;\n        // set value\n        x[i] = avalues[k];\n        // add index\n        cindex.push(i);\n      }\n      // loop values in b\n      for (k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        i = bindex[k];\n        // check value exists in workspace\n        if (w[i] === mark) {\n          // evaluate callback\n          x[i] = cf(x[i], bvalues[k]);\n        }\n      }\n      // initialize first index in j\n      k = cptr[j];\n      // loop index in j\n      while (k < cindex.length) {\n        // row\n        i = cindex[k];\n        // value @ i\n        var v = x[i];\n        // check for zero value\n        if (!eq(v, zero)) {\n          // push value\n          cvalues.push(v);\n          // increment pointer\n          k++;\n        } else {\n          // remove value @ i, do not increment pointer\n          cindex.splice(k, 1);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return a.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"]},"metadata":{},"sourceType":"module"}