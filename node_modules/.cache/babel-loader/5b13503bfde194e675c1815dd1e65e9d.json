{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype; // sparse matrix arrays\n\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype; // validate dimensions\n\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    } // check rows & columns\n\n\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    } // sparse matrix cannot be a Pattern matrix\n\n\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    } // rows & columns\n\n\n    var rows = asize[0];\n    var columns = asize[1]; // datatype\n\n    var dt; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt; // find signature that matches (dt, dt)\n\n      eq = typed.find(equalScalar, [dt, dt]); // convert 0 to the same datatype\n\n      zero = typed.convert(0, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // result (SparseMatrix)\n\n\n    var cvalues = [];\n    var cindex = [];\n    var cptr = []; // loop columns in b\n\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length; // values in column j\n\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k]; // update C(i,j)\n\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]); // check for nonzero\n\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    } // update cptr\n\n\n    cptr[columns] = cindex.length; // return sparse matrix\n\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo02xDS0.js"],"names":["factory","DimensionError","name","dependencies","createMatAlgo02xDS0","_ref","typed","equalScalar","matAlgo02xDS0","denseMatrix","sparseMatrix","callback","inverse","adata","_data","asize","_size","adt","_datatype","bvalues","_values","bindex","_index","bptr","_ptr","bsize","bdt","length","RangeError","Error","rows","columns","dt","eq","zero","cf","find","convert","cvalues","cindex","cptr","j","k0","k1","k","i","cij","push","createSparseMatrix","values","index","ptr","size","datatype"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { DimensionError } from '../../../error/DimensionError.js';\nvar name = 'matAlgo02xDS0';\nvar dependencies = ['typed', 'equalScalar'];\nexport var createMatAlgo02xDS0 = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar\n  } = _ref;\n  /**\n   * Iterates over SparseMatrix nonzero items and invokes the callback function f(Dij, Sij).\n   * Callback function invoked NNZ times (number of nonzero items in SparseMatrix).\n   *\n   *\n   *          ┌  f(Dij, Sij)  ; S(i,j) !== 0\n   * C(i,j) = ┤\n   *          └  0            ; otherwise\n   *\n   *\n   * @param {Matrix}   denseMatrix       The DenseMatrix instance (D)\n   * @param {Matrix}   sparseMatrix      The SparseMatrix instance (S)\n   * @param {Function} callback          The f(Dij,Sij) operation to invoke, where Dij = DenseMatrix(i,j) and Sij = SparseMatrix(i,j)\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(Sij,Dij)\n   *\n   * @return {Matrix}                    SparseMatrix (C)\n   *\n   * see https://github.com/josdejong/mathjs/pull/346#issuecomment-97477571\n   */\n  return function matAlgo02xDS0(denseMatrix, sparseMatrix, callback, inverse) {\n    // dense matrix arrays\n    var adata = denseMatrix._data;\n    var asize = denseMatrix._size;\n    var adt = denseMatrix._datatype;\n    // sparse matrix arrays\n    var bvalues = sparseMatrix._values;\n    var bindex = sparseMatrix._index;\n    var bptr = sparseMatrix._ptr;\n    var bsize = sparseMatrix._size;\n    var bdt = sparseMatrix._datatype;\n\n    // validate dimensions\n    if (asize.length !== bsize.length) {\n      throw new DimensionError(asize.length, bsize.length);\n    }\n\n    // check rows & columns\n    if (asize[0] !== bsize[0] || asize[1] !== bsize[1]) {\n      throw new RangeError('Dimension mismatch. Matrix A (' + asize + ') must match Matrix B (' + bsize + ')');\n    }\n\n    // sparse matrix cannot be a Pattern matrix\n    if (!bvalues) {\n      throw new Error('Cannot perform operation on Dense Matrix and Pattern Sparse Matrix');\n    }\n\n    // rows & columns\n    var rows = asize[0];\n    var columns = asize[1];\n\n    // datatype\n    var dt;\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string' && adt === bdt) {\n      // datatype\n      dt = adt;\n      // find signature that matches (dt, dt)\n      eq = typed.find(equalScalar, [dt, dt]);\n      // convert 0 to the same datatype\n      zero = typed.convert(0, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // result (SparseMatrix)\n    var cvalues = [];\n    var cindex = [];\n    var cptr = [];\n\n    // loop columns in b\n    for (var j = 0; j < columns; j++) {\n      // update cptr\n      cptr[j] = cindex.length;\n      // values in column j\n      for (var k0 = bptr[j], k1 = bptr[j + 1], k = k0; k < k1; k++) {\n        // row\n        var i = bindex[k];\n        // update C(i,j)\n        var cij = inverse ? cf(bvalues[k], adata[i][j]) : cf(adata[i][j], bvalues[k]);\n        // check for nonzero\n        if (!eq(cij, zero)) {\n          // push i & v\n          cindex.push(i);\n          cvalues.push(cij);\n        }\n      }\n    }\n    // update cptr\n    cptr[columns] = cindex.length;\n\n    // return sparse matrix\n    return sparseMatrix.createSparseMatrix({\n      values: cvalues,\n      index: cindex,\n      ptr: cptr,\n      size: [rows, columns],\n      datatype: dt\n    });\n  };\n});"]},"metadata":{},"sourceType":"module"}