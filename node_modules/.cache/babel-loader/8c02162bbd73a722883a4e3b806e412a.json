{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, getSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n\n\n  function expandTemplate(template, node, options) {\n    var latex = ''; // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n\n    var match;\n\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n\n              break;\n\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      } // validate input\n\n\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n\n      this.fn = fn;\n      this.args = args || [];\n    } // readonly property name\n\n\n    get name() {\n      return this.fn.name || '';\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isFunctionNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n\n          var resolveFn = scope => {\n            var value;\n\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n\n            if (typeof value === 'function') {\n              return value;\n            }\n\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = getSafeProperty(args, _name);\n\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n        var evalObject = this.fn.object._compile(math, argNames);\n\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var fn = getSafeMethod(object, prop);\n\n          if (fn !== null && fn !== void 0 && fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n\n        var evalFn = this.fn._compile(math, argNames);\n\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n\n      var args = [];\n\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n\n      return new FunctionNode(fn, args);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n\n\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n\n\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n\n      if (typeof customString !== 'undefined') {\n        return customString;\n      } // fall back to Node's toString\n\n\n      return super.toString(options);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options); // format the arguments like \"add(2, 4.2)\"\n\n      return fn + '(' + args.join(', ') + ')';\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      }); // format the arguments like \"add(2, 4.2)\"\n\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toTex(options) {\n      var customTex;\n\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      } // fall back to Node's toTex\n\n\n      return super.toTex(options);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      } // toTex property on the function itself\n\n\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n\n      var customToTex;\n\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n\n      }\n\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n\n      return expandTemplate(defaultTemplate, this, options);\n    }\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n\n\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n\n  }\n\n  _defineProperty(FunctionNode, \"name\", name);\n\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/node/FunctionNode.js"],"names":["_defineProperty","isAccessorNode","isFunctionAssignmentNode","isIndexNode","isNode","isSymbolNode","escape","format","hasOwnProperty","getSafeProperty","getSafeMethod","createSubScope","factory","defaultTemplate","latexFunctions","name","dependencies","createFunctionNode","_ref","math","Node","SymbolNode","strin","entity","truncate","expandTemplate","template","node","options","latex","regex","inputPos","match","exec","substring","index","length","property","ReferenceError","undefined","toTex","Array","isArray","map","arg","TypeError","join","slice","FunctionNode","constructor","fn","args","every","type","isFunctionNode","_compile","argNames","evalArgs","_name","isRaw","rawArgs","resolveFn","scope","value","has","get","onUndefinedFunction","concat","evalFunctionNode","context","evalArg0","evalArg1","values","evalArg","_rawArgs","apply","isObjectProperty","evalObject","object","prop","getObjectProperty","_rawArgs2","fnExpr","toString","evalFn","_rawArgs3","forEach","callback","i","_ifNode","clone","customString","handler","_toString","toJSON","mathjs","toHTML","customTex","_toTex","latexConverter","customToTex","getIdentifier","Error","json","isClass"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isFunctionAssignmentNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { escape, format } from '../../utils/string.js';\nimport { hasOwnProperty } from '../../utils/object.js';\nimport { getSafeProperty, getSafeMethod } from '../../utils/customs.js';\nimport { createSubScope } from '../../utils/scope.js';\nimport { factory } from '../../utils/factory.js';\nimport { defaultTemplate, latexFunctions } from '../../utils/latex.js';\nvar name = 'FunctionNode';\nvar dependencies = ['math', 'Node', 'SymbolNode'];\nexport var createFunctionNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    math,\n    Node,\n    SymbolNode\n  } = _ref;\n  /* format to fixed length */\n  var strin = entity => format(entity, {\n    truncate: 78\n  });\n\n  /*\n   * Expand a LaTeX template\n   *\n   * @param {string} template\n   * @param {Node} node\n   * @param {Object} options\n   * @private\n   **/\n  function expandTemplate(template, node, options) {\n    var latex = '';\n\n    // Match everything of the form ${identifier} or ${identifier[2]} or $$\n    // while submatching identifier and 2 (in the second case)\n    var regex = /\\$(?:\\{([a-z_][a-z_0-9]*)(?:\\[([0-9]+)\\])?\\}|\\$)/gi;\n    var inputPos = 0; // position in the input string\n    var match;\n    while ((match = regex.exec(template)) !== null) {\n      // go through all matches\n      // add everything in front of the match to the LaTeX string\n      latex += template.substring(inputPos, match.index);\n      inputPos = match.index;\n      if (match[0] === '$$') {\n        // escaped dollar sign\n        latex += '$';\n        inputPos++;\n      } else {\n        // template parameter\n        inputPos += match[0].length;\n        var property = node[match[1]];\n        if (!property) {\n          throw new ReferenceError('Template: Property ' + match[1] + ' does not exist.');\n        }\n        if (match[2] === undefined) {\n          // no square brackets\n          switch (typeof property) {\n            case 'string':\n              latex += property;\n              break;\n            case 'object':\n              if (isNode(property)) {\n                latex += property.toTex(options);\n              } else if (Array.isArray(property)) {\n                // make array of Nodes into comma separated list\n                latex += property.map(function (arg, index) {\n                  if (isNode(arg)) {\n                    return arg.toTex(options);\n                  }\n                  throw new TypeError('Template: ' + match[1] + '[' + index + '] is not a Node.');\n                }).join(',');\n              } else {\n                throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n              }\n              break;\n            default:\n              throw new TypeError('Template: ' + match[1] + ' has to be a Node, String or array of Nodes');\n          }\n        } else {\n          // with square brackets\n          if (isNode(property[match[2]] && property[match[2]])) {\n            latex += property[match[2]].toTex(options);\n          } else {\n            throw new TypeError('Template: ' + match[1] + '[' + match[2] + '] is not a Node.');\n          }\n        }\n      }\n    }\n    latex += template.slice(inputPos); // append rest of the template\n\n    return latex;\n  }\n  class FunctionNode extends Node {\n    /**\n     * @constructor FunctionNode\n     * @extends {./Node}\n     * invoke a list with arguments on a node\n     * @param {./Node | string} fn\n     *     Item resolving to a function on which to invoke\n     *     the arguments, typically a SymboNode or AccessorNode\n     * @param {./Node[]} args\n     */\n    constructor(fn, args) {\n      super();\n      if (typeof fn === 'string') {\n        fn = new SymbolNode(fn);\n      }\n\n      // validate input\n      if (!isNode(fn)) throw new TypeError('Node expected as parameter \"fn\"');\n      if (!Array.isArray(args) || !args.every(isNode)) {\n        throw new TypeError('Array containing Nodes expected for parameter \"args\"');\n      }\n      this.fn = fn;\n      this.args = args || [];\n    }\n\n    // readonly property name\n    get name() {\n      return this.fn.name || '';\n    }\n    get type() {\n      return name;\n    }\n    get isFunctionNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      // compile arguments\n      var evalArgs = this.args.map(arg => arg._compile(math, argNames));\n      if (isSymbolNode(this.fn)) {\n        var _name = this.fn.name;\n        if (!argNames[_name]) {\n          // we can statically determine whether the function\n          // has the rawArgs property\n          var fn = _name in math ? getSafeProperty(math, _name) : undefined;\n          var isRaw = typeof fn === 'function' && fn.rawArgs === true;\n          var resolveFn = scope => {\n            var value;\n            if (scope.has(_name)) {\n              value = scope.get(_name);\n            } else if (_name in math) {\n              value = getSafeProperty(math, _name);\n            } else {\n              return FunctionNode.onUndefinedFunction(_name);\n            }\n            if (typeof value === 'function') {\n              return value;\n            }\n            throw new TypeError(\"'\".concat(_name, \"' is not a function; its value is:\\n  \").concat(strin(value)));\n          };\n          if (isRaw) {\n            // pass unevaluated parameters (nodes) to the function\n            // \"raw\" evaluation\n            var rawArgs = this.args;\n            return function evalFunctionNode(scope, args, context) {\n              var fn = resolveFn(scope);\n              return fn(rawArgs, math, createSubScope(scope, args), scope);\n            };\n          } else {\n            // \"regular\" evaluation\n            switch (evalArgs.length) {\n              case 0:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  return fn();\n                };\n              case 1:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  return fn(evalArg0(scope, args, context));\n                };\n              case 2:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var evalArg0 = evalArgs[0];\n                  var evalArg1 = evalArgs[1];\n                  return fn(evalArg0(scope, args, context), evalArg1(scope, args, context));\n                };\n              default:\n                return function evalFunctionNode(scope, args, context) {\n                  var fn = resolveFn(scope);\n                  var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n                  return fn(...values);\n                };\n            }\n          }\n        } else {\n          // the function symbol is an argName\n          var _rawArgs = this.args;\n          return function evalFunctionNode(scope, args, context) {\n            var fn = getSafeProperty(args, _name);\n            if (typeof fn !== 'function') {\n              throw new TypeError(\"Argument '\".concat(_name, \"' was not a function; received: \").concat(strin(fn)));\n            }\n            if (fn.rawArgs) {\n              // \"Raw\" evaluation\n              return fn(_rawArgs, math, createSubScope(scope, args), scope);\n            } else {\n              var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n              return fn.apply(fn, values);\n            }\n          };\n        }\n      } else if (isAccessorNode(this.fn) && isIndexNode(this.fn.index) && this.fn.index.isObjectProperty()) {\n        // execute the function with the right context:\n        // the object of the AccessorNode\n\n        var evalObject = this.fn.object._compile(math, argNames);\n        var prop = this.fn.index.getObjectProperty();\n        var _rawArgs2 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var fn = getSafeMethod(object, prop);\n          if (fn !== null && fn !== void 0 && fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs2, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(object, values);\n          }\n        };\n      } else {\n        // node.fn.isAccessorNode && !node.fn.index.isObjectProperty()\n        // we have to dynamically determine whether the function has the\n        // rawArgs property\n        var fnExpr = this.fn.toString();\n        var evalFn = this.fn._compile(math, argNames);\n        var _rawArgs3 = this.args;\n        return function evalFunctionNode(scope, args, context) {\n          var fn = evalFn(scope, args, context);\n          if (typeof fn !== 'function') {\n            throw new TypeError(\"Expression '\".concat(fnExpr, \"' did not evaluate to a function; value is:\") + \"\\n  \".concat(strin(fn)));\n          }\n          if (fn.rawArgs) {\n            // \"Raw\" evaluation\n            return fn(_rawArgs3, math, createSubScope(scope, args), scope);\n          } else {\n            // \"regular\" evaluation\n            var values = evalArgs.map(evalArg => evalArg(scope, args, context));\n            return fn.apply(fn, values);\n          }\n        };\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.fn, 'fn', this);\n      for (var i = 0; i < this.args.length; i++) {\n        callback(this.args[i], 'args[' + i + ']', this);\n      }\n    }\n\n    /**\n     * Create a new FunctionNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {FunctionNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var fn = this._ifNode(callback(this.fn, 'fn', this));\n      var args = [];\n      for (var i = 0; i < this.args.length; i++) {\n        args[i] = this._ifNode(callback(this.args[i], 'args[' + i + ']', this));\n      }\n      return new FunctionNode(fn, args);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {FunctionNode}\n     */\n    clone() {\n      return new FunctionNode(this.fn, this.args.slice(0));\n    }\n\n    /**\n     * Throws an error 'Undefined function {name}'\n     * @param {string} name\n     */\n\n    /**\n     * Get string representation. (wrapper function)\n     * This overrides parts of Node's toString function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toString\n     * function.\n     *\n     * @param {Object} options\n     * @return {string} str\n     * @override\n     */\n    toString(options) {\n      var customString;\n      var name = this.fn.toString(options);\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, name)) {\n        // callback is a map of callback functions\n        customString = options.handler[name](this, options);\n      }\n      if (typeof customString !== 'undefined') {\n        return customString;\n      }\n\n      // fall back to Node's toString\n      return super.toString(options);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toString(options);\n      });\n      var fn = isFunctionAssignmentNode(this.fn) ? '(' + this.fn.toString(options) + ')' : this.fn.toString(options);\n\n      // format the arguments like \"add(2, 4.2)\"\n      return fn + '(' + args.join(', ') + ')';\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        fn: this.fn,\n        args: this.args\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"FunctionNode\", fn: ..., args: ...}`,\n     *                       where mathjs is optional\n     * @returns {FunctionNode}\n     */\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var args = this.args.map(function (arg) {\n        return arg.toHTML(options);\n      });\n\n      // format the arguments like \"add(2, 4.2)\"\n      return '<span class=\"math-function\">' + escape(this.fn) + '</span><span class=\"math-paranthesis math-round-parenthesis\">(</span>' + args.join('<span class=\"math-separator\">,</span>') + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n    }\n\n    /**\n     * Get LaTeX representation. (wrapper function)\n     * This overrides parts of Node's toTex function.\n     * If callback is an object containing callbacks, it\n     * calls the correct callback for the current node,\n     * otherwise it falls back to calling Node's toTex\n     * function.\n     *\n     * @param {Object} options\n     * @return {string}\n     */\n    toTex(options) {\n      var customTex;\n      if (options && typeof options.handler === 'object' && hasOwnProperty(options.handler, this.name)) {\n        // callback is a map of callback functions\n        customTex = options.handler[this.name](this, options);\n      }\n      if (typeof customTex !== 'undefined') {\n        return customTex;\n      }\n\n      // fall back to Node's toTex\n      return super.toTex(options);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var args = this.args.map(function (arg) {\n        // get LaTeX of the arguments\n        return arg.toTex(options);\n      });\n      var latexConverter;\n      if (latexFunctions[this.name]) {\n        latexConverter = latexFunctions[this.name];\n      }\n\n      // toTex property on the function itself\n      if (math[this.name] && (typeof math[this.name].toTex === 'function' || typeof math[this.name].toTex === 'object' || typeof math[this.name].toTex === 'string')) {\n        // .toTex is a callback function\n        latexConverter = math[this.name].toTex;\n      }\n      var customToTex;\n      switch (typeof latexConverter) {\n        case 'function':\n          // a callback function\n          customToTex = latexConverter(this, options);\n          break;\n        case 'string':\n          // a template string\n          customToTex = expandTemplate(latexConverter, this, options);\n          break;\n        case 'object':\n          // an object with different \"converters\" for different\n          // numbers of arguments\n          switch (typeof latexConverter[args.length]) {\n            case 'function':\n              customToTex = latexConverter[args.length](this, options);\n              break;\n            case 'string':\n              customToTex = expandTemplate(latexConverter[args.length], this, options);\n              break;\n          }\n      }\n      if (typeof customToTex !== 'undefined') {\n        return customToTex;\n      }\n      return expandTemplate(defaultTemplate, this, options);\n    }\n\n    /**\n     * Get identifier.\n     * @return {string}\n     */\n    getIdentifier() {\n      return this.type + ':' + this.name;\n    }\n  }\n  _defineProperty(FunctionNode, \"name\", name);\n  _defineProperty(FunctionNode, \"onUndefinedFunction\", function (name) {\n    throw new Error('Undefined function ' + name);\n  });\n  _defineProperty(FunctionNode, \"fromJSON\", function (json) {\n    return new FunctionNode(json.fn, json.args);\n  });\n  return FunctionNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}