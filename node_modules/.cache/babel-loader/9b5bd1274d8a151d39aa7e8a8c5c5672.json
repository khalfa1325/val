{"ast":null,"code":"import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\n\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *     math.format(value, options)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]\n *     Formatting options. See src/utils/number.js:format for a\n *     description of the available options controlling number output.\n *     This generic \"format\" also supports the option property `truncate: NN`\n *     giving the maximum number NN of characters to return (if there would\n *     have been more, they are deleted and replaced by an ellipsis).\n * @return {string} str\n */\n\nexport function format(value, options) {\n  var result = _format(value, options);\n\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n\n  return result;\n}\n\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  } // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n\n\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n\n  return String(value);\n}\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\n\n\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n\n  while (i < text.length) {\n    var c = text.charAt(i);\n\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n\n    i++;\n  }\n\n  return '\"' + escaped + '\"';\n}\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\n\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\n\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n\n      str += formatArray(array[i], options);\n    }\n\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\n\n\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\n\n\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n\n  return x === y ? 0 : x > y ? 1 : -1;\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/utils/string.js"],"names":["isBigNumber","isString","typeOf","format","formatNumber","formatBigNumber","endsWith","text","search","start","length","end","substring","value","options","result","_format","truncate","looksLikeFraction","fraction","s","n","d","toString","Array","isArray","formatArray","syntax","String","entries","Object","keys","map","key","join","stringify","escaped","i","c","charAt","indexOf","escape","replace","array","str","len","compareText","x","y","TypeError"],"mappings":"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","sourcesContent":["import { isBigNumber, isString, typeOf } from './is.js';\nimport { format as formatNumber } from './number.js';\nimport { format as formatBigNumber } from './bignumber/formatter.js';\n\n/**\n * Check if a text ends with a certain string.\n * @param {string} text\n * @param {string} search\n */\nexport function endsWith(text, search) {\n  var start = text.length - search.length;\n  var end = text.length;\n  return text.substring(start, end) === search;\n}\n\n/**\n * Format a value of any type into a string.\n *\n * Usage:\n *     math.format(value)\n *     math.format(value, precision)\n *     math.format(value, options)\n *\n * When value is a function:\n *\n * - When the function has a property `syntax`, it returns this\n *   syntax description.\n * - In other cases, a string `'function'` is returned.\n *\n * When `value` is an Object:\n *\n * - When the object contains a property `format` being a function, this\n *   function is invoked as `value.format(options)` and the result is returned.\n * - When the object has its own `toString` method, this method is invoked\n *   and the result is returned.\n * - In other cases the function will loop over all object properties and\n *   return JSON object notation like '{\"a\": 2, \"b\": 3}'.\n *\n * Example usage:\n *     math.format(2/7)                // '0.2857142857142857'\n *     math.format(math.pi, 3)         // '3.14'\n *     math.format(new Complex(2, 3))  // '2 + 3i'\n *     math.format('hello')            // '\"hello\"'\n *\n * @param {*} value             Value to be stringified\n * @param {Object | number | Function} [options]\n *     Formatting options. See src/utils/number.js:format for a\n *     description of the available options controlling number output.\n *     This generic \"format\" also supports the option property `truncate: NN`\n *     giving the maximum number NN of characters to return (if there would\n *     have been more, they are deleted and replaced by an ellipsis).\n * @return {string} str\n */\nexport function format(value, options) {\n  var result = _format(value, options);\n  if (options && typeof options === 'object' && 'truncate' in options && result.length > options.truncate) {\n    return result.substring(0, options.truncate - 3) + '...';\n  }\n  return result;\n}\nfunction _format(value, options) {\n  if (typeof value === 'number') {\n    return formatNumber(value, options);\n  }\n  if (isBigNumber(value)) {\n    return formatBigNumber(value, options);\n  }\n\n  // note: we use unsafe duck-typing here to check for Fractions, this is\n  // ok here since we're only invoking toString or concatenating its values\n  if (looksLikeFraction(value)) {\n    if (!options || options.fraction !== 'decimal') {\n      // output as ratio, like '1/3'\n      return value.s * value.n + '/' + value.d;\n    } else {\n      // output as decimal, like '0.(3)'\n      return value.toString();\n    }\n  }\n  if (Array.isArray(value)) {\n    return formatArray(value, options);\n  }\n  if (isString(value)) {\n    return '\"' + value + '\"';\n  }\n  if (typeof value === 'function') {\n    return value.syntax ? String(value.syntax) : 'function';\n  }\n  if (value && typeof value === 'object') {\n    if (typeof value.format === 'function') {\n      return value.format(options);\n    } else if (value && value.toString(options) !== {}.toString()) {\n      // this object has a non-native toString method, use that one\n      return value.toString(options);\n    } else {\n      var entries = Object.keys(value).map(key => {\n        return '\"' + key + '\": ' + format(value[key], options);\n      });\n      return '{' + entries.join(', ') + '}';\n    }\n  }\n  return String(value);\n}\n\n/**\n * Stringify a value into a string enclosed in double quotes.\n * Unescaped double quotes and backslashes inside the value are escaped.\n * @param {*} value\n * @return {string}\n */\nexport function stringify(value) {\n  var text = String(value);\n  var escaped = '';\n  var i = 0;\n  while (i < text.length) {\n    var c = text.charAt(i);\n    if (c === '\\\\') {\n      escaped += c;\n      i++;\n      c = text.charAt(i);\n      if (c === '' || '\"\\\\/bfnrtu'.indexOf(c) === -1) {\n        escaped += '\\\\'; // no valid escape character -> escape it\n      }\n\n      escaped += c;\n    } else if (c === '\"') {\n      escaped += '\\\\\"';\n    } else {\n      escaped += c;\n    }\n    i++;\n  }\n  return '\"' + escaped + '\"';\n}\n\n/**\n * Escape special HTML characters\n * @param {*} value\n * @return {string}\n */\nexport function escape(value) {\n  var text = String(value);\n  text = text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n  return text;\n}\n\n/**\n * Recursively format an n-dimensional matrix\n * Example output: \"[[1, 2], [3, 4]]\"\n * @param {Array} array\n * @param {Object | number | Function} [options]  Formatting options. See\n *                                                lib/utils/number:format for a\n *                                                description of the available\n *                                                options.\n * @returns {string} str\n */\nfunction formatArray(array, options) {\n  if (Array.isArray(array)) {\n    var str = '[';\n    var len = array.length;\n    for (var i = 0; i < len; i++) {\n      if (i !== 0) {\n        str += ', ';\n      }\n      str += formatArray(array[i], options);\n    }\n    str += ']';\n    return str;\n  } else {\n    return format(array, options);\n  }\n}\n\n/**\n * Check whether a value looks like a Fraction (unsafe duck-type check)\n * @param {*} value\n * @return {boolean}\n */\nfunction looksLikeFraction(value) {\n  return value && typeof value === 'object' && typeof value.s === 'number' && typeof value.n === 'number' && typeof value.d === 'number' || false;\n}\n\n/**\n * Compare two strings\n * @param {string} x\n * @param {string} y\n * @returns {number}\n */\nexport function compareText(x, y) {\n  // we don't want to convert numbers to string, only accept string input\n  if (!isString(x)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(x) + ', index: 0)');\n  }\n  if (!isString(y)) {\n    throw new TypeError('Unexpected type of argument in function compareText ' + '(expected: string or Array or Matrix, actual: ' + typeOf(y) + ', index: 1)');\n  }\n  return x === y ? 0 : x > y ? 1 : -1;\n}"]},"metadata":{},"sourceType":"module"}