{"ast":null,"code":"import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not', 'concat'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/logical/and.js"],"names":["createMatAlgo02xDS0","createMatAlgo11xS0s","createMatAlgo14xDs","createMatAlgo06xS0S0","factory","createMatrixAlgorithmSuite","andNumber","name","dependencies","createAnd","_ref","typed","matrix","equalScalar","zeros","not","concat","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matAlgo14xDs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","size","storage","valueOf","SS","DS"],"mappings":"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","sourcesContent":["import { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo14xDs } from '../../type/matrix/utils/matAlgo14xDs.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { andNumber } from '../../plain/number/index.js';\nvar name = 'and';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'zeros', 'not', 'concat'];\nexport var createAnd = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    zeros,\n    not,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo14xDs = createMatAlgo14xDs({\n    typed\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `and`. Test whether two values are both defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.and(x, y)\n   *\n   * Examples:\n   *\n   *    math.and(2, 4)   // returns true\n   *\n   *    a = [2, 0, 0]\n   *    b = [3, 7, 0]\n   *    c = 0\n   *\n   *    math.and(a, b)   // returns [true, false, false]\n   *    math.and(a, c)   // returns [false, false, false]\n   *\n   * See also:\n   *\n   *    not, or, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when both inputs are defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': andNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return (x.re !== 0 || x.im !== 0) && (y.re !== 0 || y.im !== 0);\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !y.isZero() && !x.isNaN() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0)),\n    'SparseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(x, y, self, false);\n    }),\n    'DenseMatrix, any': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(y)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(x, y, self, false);\n    }),\n    'any, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo11xS0s(y, x, self, true);\n    }),\n    'any, DenseMatrix': typed.referToSelf(self => (x, y) => {\n      // check scalar\n      if (not(x)) {\n        // return zero matrix\n        return zeros(x.size(), x.storage());\n      }\n      return matAlgo14xDs(y, x, self, true);\n    }),\n    'Array, any': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(matrix(x), y).valueOf();\n    }),\n    'any, Array': typed.referToSelf(self => (x, y) => {\n      // use matrix implementation\n      return self(x, matrix(y)).valueOf();\n    })\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0\n  }));\n});"]},"metadata":{},"sourceType":"module"}