{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n\n    this.skipAutomaticSimplification = true;\n\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n\n    this.value = this._normalize(value);\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true; // private variables and functions for the Unit parser\n\n  var text, index, c;\n\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    } // get number, can have a single dot\n\n\n    if (c === '.') {\n      number += c;\n      next();\n\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n\n    while (isDigit(c)) {\n      number += c;\n      next();\n    } // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n\n\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      } // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n\n\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      } // We can now safely say that this is scientific notation.\n\n\n      number = number + tentativeNumber;\n\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n\n    return number;\n  }\n\n  function parseUnit() {\n    var unitName = ''; // Alphanumeric characters only; matches [a-zA-Z0-9]\n\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    } // Must begin with [a-zA-Z]\n\n\n    var firstC = unitName.charAt(0);\n\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n\n\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false; // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace(); // Optional number at the start of the string\n\n    var valueStr = parseNumber();\n    var value = null;\n\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n\n      skipWhitespace(); // Whitespace is not required here\n      // handle multiplication or division right after the value, like '1/s'\n\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    } // Stack to keep track of powerMultipliers applied to each parentheses group\n\n\n    var powerMultiplierStack = []; // Running product of all elements in powerMultiplierStack\n\n    var powerMultiplierStackProduct = 1;\n\n    while (true) {\n      skipWhitespace(); // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      } // Is there something here?\n\n\n      var uStr = void 0;\n\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      } // Verify the unit exists and get the prefix (if any)\n\n\n      var res = _findUnit(uStr);\n\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct; // Is there a \"^ number\"?\n\n      skipWhitespace();\n\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n\n        power *= p;\n      } // Add the unit to the list\n\n\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      } // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n\n\n      skipWhitespace();\n\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      } // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n\n\n      expectingUnit = false;\n\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      } // Replace the unit into the auto unit system\n\n\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    } // Has the string been entirely consumed?\n\n\n    skipWhitespace();\n\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    } // Is there a trailing slash?\n\n\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    } // Is the parentheses stack empty?\n\n\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    } // Are there any units at all?\n\n\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n\n\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n\n    return unit;\n  };\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n\n\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n\n\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n\n\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n\n\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n\n    var res = value;\n\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n\n    return res;\n  };\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n\n\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n\n\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n\n\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n\n    if (!base) {\n      return false;\n    } // All dimensions must be the same\n\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n\n\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n\n\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n\n\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    } // Append other's units list onto res\n\n\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, then the result should also have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n\n\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n\n\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    } // Invert and append other's units list onto res\n\n\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n\n      res.units.push(inverted);\n    } // If at least one operand has a value, the result should have a value\n\n\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n\n\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    } // Adjust the power of each unit in the list\n\n\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n\n    if (res.value !== null) {\n      res.value = pow(res.value, p); // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n\n\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n\n\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n\n\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n\n\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtract(thisUnitOffset, otherUnitOffset)));\n    }\n\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n\n\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n\n\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n\n\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n\n\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.valueOf = Unit.prototype.toString;\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Search for a matching base\n\n    var matchingBase;\n\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        } // Is the proposed unit list \"simpler\" than the existing one?\n\n\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n\n    return ret;\n  };\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n\n\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = []; // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    } // Replace this unit list with the proposed list\n\n\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n\n\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    } // Remove leading \" \"\n\n\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1); // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n\n    var str = strNum;\n\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n\n    str += strDen;\n    return str;\n  };\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n\n\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify(); // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n\n    var isImaginary = false;\n\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    } // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n\n\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n\n    var value = simp._denormalize(simp.value);\n\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n\n    str += unitStr;\n    return str;\n  };\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n\n\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    } // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n\n\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n\n    return bestPrefix;\n  };\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n\n\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break; // Get the numeric value of this unit\n\n      var xNumeric = x.toNumeric(); // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    } // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n\n\n    var testSum = 0;\n\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n\n    ret.push(x);\n    return ret;\n  };\n\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  }; // aliases (formerly plurals)\n\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    } // copy to the full names of the angles\n\n\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  } // apply the angle values now\n\n\n  calculateAngleValues(config);\n\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n\n\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  }; // Clone to create the other unit systems\n\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  }; // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  }; // Add additional unit systems here.\n  // Choose a unit system to seed the auto unit system.\n\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si)); // Set the current unit system\n\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n\n\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n\n\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(x.n).div(x.d).times(x.s);\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n\n    if (convert) {\n      return convert;\n    }\n\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n\n\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n\n    return Unit.typeConverters[type];\n  }; // Add dimensions to each built-in unit\n\n\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  } // Create aliases\n\n\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n\n\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n\n\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    } // Remove all units and aliases we are overriding\n\n\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    } // TODO: traverse multiple times until all units have been added\n\n\n    var lastUnit;\n\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n\n    return lastUnit;\n  };\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n\n\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    } // Check collisions with existing units\n\n\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    } // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n\n    aliases = aliases || [];\n    offset = offset || 0;\n\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    } // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n\n\n    var newUnit = {};\n\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n\n      BASE_DIMENSIONS.push(baseName); // Push 0 onto existing base units\n\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      } // Add the new base unit\n\n\n      var newBaseUnit = {\n        dimensions: []\n      };\n\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      }; // Create a new base if no matching base exists\n\n      var anyMatch = false;\n\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n\n    Unit.UNITS[name] = newUnit;\n\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    } // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n\n\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  }; // expose arrays with prefixes, dimensions, units, systems\n\n\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/unit/Unit.js"],"names":["_defineProperty","_extends","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","isComplex","isUnit","typeOf","factory","memoize","endsWith","clone","hasOwnProperty","createBigNumberPi","createPi","name","dependencies","createUnitClass","_ref","on","config","addScalar","subtract","multiplyScalar","divideScalar","pow","abs","fix","round","equal","isNumeric","format","number","_number","Complex","BigNumber","_BigNumber","Fraction","_Fraction","toNumber","Unit","value","valuelessUnit","Error","undefined","TypeError","fixPrefix","skipAutomaticSimplification","units","dimensions","BASE_DIMENSIONS","map","x","u","parse","slice","_normalize","prototype","constructor","type","text","index","c","skipWhitespace","next","isDigitDot","isDigit","charAt","revert","oldIndex","parseNumber","tentativeNumber","tentativeIndex","parseUnit","unitName","isValidAlpha","firstC","parseCharacter","toFind","str","options","unit","powerMultiplierCurrent","expectingUnit","valueStr","err","parseFloat","powerMultiplierStack","powerMultiplierStackProduct","uStr","oldC","SyntaxError","toString","res","_findUnit","power","p","prefix","pop","base","baseDim","UNIT_SYSTEMS","auto","allowNoUnits","valueType","_isDerived","Math","convert","_getNumberConverter","unitValue","unitPrefixValue","unitPower","_denormalize","prefixValue","UNITS","prefixes","_name","_unit","prefixLen","prefixName","substring","_prefix","hasher","args","limit","isValuelessUnit","hasBase","BASE_UNITS","equalBase","other","equals","multiply","_other","_i","inverted","valThis","valOther","getNumericIfUnitless","divideInto","numerator","divide","_i2","_i3","NONE","predictable","ret","offset","_numberConverter","nominalOffset","unitOffset","W","to","concat","thisUnitValue","thisNominalOffset","thisUnitOffset","otherUnitValue","otherNominalOffset","otherUnitOffset","toNumeric","toJSON","mathjs","formatUnits","fromJSON","json","valueOf","simplify","proposedUnitList","matchingBase","currentUnitSystem","matchingUnit","missingBaseDim","toSI","si","strNum","strDen","nNum","nDen","_i4","substr","simp","isImaginary","re","VAR","VA","_bestPrefix","unitStr","absValue","absUnitValue","bestPrefix","bestDiff","log","LN10","scientific","diff","splitUnit","parts","xNumeric","xRounded","xFixed","isNearlyEqual","y","testSum","_i5","PREFIXES","SHORT","da","h","k","M","G","T","P","E","Z","Y","d","m","n","f","a","z","LONG","deca","hecto","kilo","mega","giga","tera","peta","exa","zetta","yotta","deci","centi","milli","micro","nano","pico","femto","atto","zepto","yocto","SQUARED","CUBIC","BINARY_SHORT_SI","BINARY_SHORT_IEC","Ki","Mi","Gi","Ti","Pi","Ei","Zi","Yi","BINARY_LONG_SI","BINARY_LONG_IEC","kibi","mebi","gibi","tebi","pebi","exi","zebi","yobi","BTU","MM","SHORTLONG","BINARY_SHORT","BINARY_LONG","MASS","LENGTH","TIME","CURRENT","TEMPERATURE","LUMINOUS_INTENSITY","AMOUNT_OF_SUBSTANCE","FORCE","SURFACE","VOLUME","ENERGY","POWER","PRESSURE","ELECTRIC_CHARGE","ELECTRIC_CAPACITANCE","ELECTRIC_POTENTIAL","ELECTRIC_RESISTANCE","ELECTRIC_INDUCTANCE","ELECTRIC_CONDUCTANCE","MAGNETIC_FLUX","MAGNETIC_FLUX_DENSITY","FREQUENCY","ANGLE","BIT","BASE_UNIT_NONE","UNIT_NONE","meter","inch","foot","yard","mile","link","rod","chain","angstrom","in","ft","yd","mi","li","rd","ch","mil","m2","sqin","sqft","sqyd","sqmi","sqrd","sqch","sqmil","acre","hectare","m3","L","l","litre","cuin","cuft","cuyd","teaspoon","tablespoon","drop","gtt","minim","fluiddram","fluidounce","gill","cc","cup","pint","quart","gallon","beerbarrel","oilbarrel","hogshead","fldr","floz","gi","cp","pt","qt","gal","bbl","obl","g","gram","ton","t","tonne","grain","dram","ounce","poundmass","hundredweight","stick","stone","gr","dr","oz","lbm","cwt","s","min","second","sec","minute","hour","day","week","month","year","decade","century","millennium","hertz","reciprocal","Hz","rad","radian","deg","degree","grad","gradian","cycle","arcsec","arcmin","A","ampere","K","degC","degF","degR","kelvin","celsius","fahrenheit","rankine","mol","mole","cd","candela","N","newton","dyn","dyne","lbf","poundforce","kip","kilogramforce","J","joule","erg","Wh","eV","electronvolt","watt","hp","I","Pa","psi","atm","bar","torr","mmHg","mmH2O","cmH2O","coulomb","C","farad","F","volt","V","ohm","henry","H","siemens","S","weber","Wb","tesla","b","bits","B","bytes","ALIASES","meters","inches","feet","yards","miles","links","rods","chains","angstroms","lt","litres","liter","liters","teaspoons","tablespoons","minims","fluiddrams","fluidounces","gills","cups","pints","quarts","gallons","beerbarrels","oilbarrels","hogsheads","gtts","grams","tons","tonnes","grains","drams","ounces","poundmasses","hundredweights","sticks","lb","lbs","kips","kgf","acres","hectares","sqfeet","sqyard","sqmile","sqmiles","mmhg","mmh2o","cmh2o","seconds","secs","minutes","mins","hours","hr","hrs","days","weeks","months","years","decades","centuries","millennia","radians","degrees","gradians","cycles","arcsecond","arcseconds","arcminute","arcminutes","BTUs","watts","joules","amperes","amps","amp","coulombs","volts","ohms","farads","webers","teslas","electronvolts","moles","bit","byte","calculateAngleValues","pi","div","times","PI","curr","prev","cgs","JSON","stringify","us","setUnitSystem","join","getUnitSystem","_key","typeConverters","isFraction","_key2","_name2","_unit2","alias","_key3","test","assertUnitNameIsValid","createUnit","obj","override","_key4","deleteUnit","aliases","lastUnit","_key5","createUnitSingle","defUnit","definition","baseName","ex","message","toUpperCase","newUnit","indexOf","newBaseUnit","_i6","anyMatch","_i7","match","j","_newBaseUnit","_i8","aliasName","_alias","_key6","cache","isClass"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { isComplex, isUnit, typeOf } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nimport { memoize } from '../../utils/function.js';\nimport { endsWith } from '../../utils/string.js';\nimport { clone, hasOwnProperty } from '../../utils/object.js';\nimport { createBigNumberPi as createPi } from '../../utils/bignumber/constants.js';\nvar name = 'Unit';\nvar dependencies = ['?on', 'config', 'addScalar', 'subtract', 'multiplyScalar', 'divideScalar', 'pow', 'abs', 'fix', 'round', 'equal', 'isNumeric', 'format', 'number', 'Complex', 'BigNumber', 'Fraction'];\nexport var createUnitClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    config,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    pow,\n    abs,\n    fix,\n    round,\n    equal,\n    isNumeric,\n    format,\n    number: _number,\n    Complex,\n    BigNumber: _BigNumber,\n    Fraction: _Fraction\n  } = _ref;\n  var toNumber = _number;\n  /**\n   * A unit can be constructed in the following ways:\n   *\n   *     const a = new Unit(value, valuelessUnit)\n   *     const b = new Unit(null, valuelessUnit)\n   *     const c = Unit.parse(str)\n   *\n   * Example usage:\n   *\n   *     const a = new Unit(5, 'cm')               // 50 mm\n   *     const b = Unit.parse('23 kg')             // 23 kg\n   *     const c = math.in(a, new Unit(null, 'm')  // 0.05 m\n   *     const d = new Unit(9.81, \"m/s^2\")         // 9.81 m/s^2\n   *\n   * @class Unit\n   * @constructor Unit\n   * @param {number | BigNumber | Fraction | Complex | boolean} [value]  A value like 5.2\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   */\n  function Unit(value, valuelessUnit) {\n    if (!(this instanceof Unit)) {\n      throw new Error('Constructor must be called with the new operator');\n    }\n    if (!(value === null || value === undefined || isNumeric(value) || isComplex(value))) {\n      throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');\n    }\n    this.fixPrefix = false; // if true, function format will not search for the\n    // best prefix but leave it as initially provided.\n    // fixPrefix is set true by the method Unit.to\n\n    // The justification behind this is that if the constructor is explicitly called,\n    // the caller wishes the units to be returned exactly as supplied.\n    this.skipAutomaticSimplification = true;\n    if (valuelessUnit === undefined) {\n      this.units = [];\n      this.dimensions = BASE_DIMENSIONS.map(x => 0);\n    } else if (typeof valuelessUnit === 'string') {\n      var u = Unit.parse(valuelessUnit);\n      this.units = u.units;\n      this.dimensions = u.dimensions;\n    } else if (isUnit(valuelessUnit) && valuelessUnit.value === null) {\n      // clone from valuelessUnit\n      this.fixPrefix = valuelessUnit.fixPrefix;\n      this.skipAutomaticSimplification = valuelessUnit.skipAutomaticSimplification;\n      this.dimensions = valuelessUnit.dimensions.slice(0);\n      this.units = valuelessUnit.units.map(u => _extends({}, u));\n    } else {\n      throw new TypeError('Second parameter in Unit constructor must be a string or valueless Unit');\n    }\n    this.value = this._normalize(value);\n  }\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(Unit, 'name', {\n    value: 'Unit'\n  });\n  Unit.prototype.constructor = Unit;\n  Unit.prototype.type = 'Unit';\n  Unit.prototype.isUnit = true;\n\n  // private variables and functions for the Unit parser\n  var text, index, c;\n  function skipWhitespace() {\n    while (c === ' ' || c === '\\t') {\n      next();\n    }\n  }\n  function isDigitDot(c) {\n    return c >= '0' && c <= '9' || c === '.';\n  }\n  function isDigit(c) {\n    return c >= '0' && c <= '9';\n  }\n  function next() {\n    index++;\n    c = text.charAt(index);\n  }\n  function revert(oldIndex) {\n    index = oldIndex;\n    c = text.charAt(index);\n  }\n  function parseNumber() {\n    var number = '';\n    var oldIndex = index;\n    if (c === '+') {\n      next();\n    } else if (c === '-') {\n      number += c;\n      next();\n    }\n    if (!isDigitDot(c)) {\n      // a + or - must be followed by a digit\n      revert(oldIndex);\n      return null;\n    }\n\n    // get number, can have a single dot\n    if (c === '.') {\n      number += c;\n      next();\n      if (!isDigit(c)) {\n        // this is no legal number, it is just a dot\n        revert(oldIndex);\n        return null;\n      }\n    } else {\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n      if (c === '.') {\n        number += c;\n        next();\n      }\n    }\n    while (isDigit(c)) {\n      number += c;\n      next();\n    }\n\n    // check for exponential notation like \"2.3e-4\" or \"1.23e50\"\n    if (c === 'E' || c === 'e') {\n      // The grammar branches here. This could either be part of an exponent or the start of a unit that begins with the letter e, such as \"4exabytes\"\n\n      var tentativeNumber = '';\n      var tentativeIndex = index;\n      tentativeNumber += c;\n      next();\n      if (c === '+' || c === '-') {\n        tentativeNumber += c;\n        next();\n      }\n\n      // Scientific notation MUST be followed by an exponent (otherwise we assume it is not scientific notation)\n      if (!isDigit(c)) {\n        // The e or E must belong to something else, so return the number without the e or E.\n        revert(tentativeIndex);\n        return number;\n      }\n\n      // We can now safely say that this is scientific notation.\n      number = number + tentativeNumber;\n      while (isDigit(c)) {\n        number += c;\n        next();\n      }\n    }\n    return number;\n  }\n  function parseUnit() {\n    var unitName = '';\n\n    // Alphanumeric characters only; matches [a-zA-Z0-9]\n    while (isDigit(c) || Unit.isValidAlpha(c)) {\n      unitName += c;\n      next();\n    }\n\n    // Must begin with [a-zA-Z]\n    var firstC = unitName.charAt(0);\n    if (Unit.isValidAlpha(firstC)) {\n      return unitName;\n    } else {\n      return null;\n    }\n  }\n  function parseCharacter(toFind) {\n    if (c === toFind) {\n      next();\n      return toFind;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Parse a string into a unit. The value of the unit is parsed as number,\n   * BigNumber, or Fraction depending on the math.js config setting `number`.\n   *\n   * Throws an exception if the provided string does not contain a valid unit or\n   * cannot be parsed.\n   * @memberof Unit\n   * @param {string} str        A string like \"5.2 inch\", \"4e2 cm/s^2\"\n   * @return {Unit} unit\n   */\n  Unit.parse = function (str, options) {\n    options = options || {};\n    text = str;\n    index = -1;\n    c = '';\n    if (typeof text !== 'string') {\n      throw new TypeError('Invalid argument in Unit.parse, string expected');\n    }\n    var unit = new Unit();\n    unit.units = [];\n    var powerMultiplierCurrent = 1;\n    var expectingUnit = false;\n\n    // A unit should follow this pattern:\n    // [number] ...[ [*/] unit[^number] ]\n    // unit[^number] ... [ [*/] unit[^number] ]\n\n    // Rules:\n    // number is any floating point number.\n    // unit is any alphanumeric string beginning with an alpha. Units with names like e3 should be avoided because they look like the exponent of a floating point number!\n    // The string may optionally begin with a number.\n    // Each unit may optionally be followed by ^number.\n    // Whitespace or a forward slash is recommended between consecutive units, although the following technically is parseable:\n    //   2m^2kg/s^2\n    // it is not good form. If a unit starts with e, then it could be confused as a floating point number:\n    //   4erg\n\n    next();\n    skipWhitespace();\n\n    // Optional number at the start of the string\n    var valueStr = parseNumber();\n    var value = null;\n    if (valueStr) {\n      if (config.number === 'BigNumber') {\n        value = new _BigNumber(valueStr);\n      } else if (config.number === 'Fraction') {\n        try {\n          // not all numbers can be turned in Fractions, for example very small numbers not\n          value = new _Fraction(valueStr);\n        } catch (err) {\n          value = parseFloat(valueStr);\n        }\n      } else {\n        // number\n        value = parseFloat(valueStr);\n      }\n      skipWhitespace(); // Whitespace is not required here\n\n      // handle multiplication or division right after the value, like '1/s'\n      if (parseCharacter('*')) {\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      }\n    }\n\n    // Stack to keep track of powerMultipliers applied to each parentheses group\n    var powerMultiplierStack = [];\n\n    // Running product of all elements in powerMultiplierStack\n    var powerMultiplierStackProduct = 1;\n    while (true) {\n      skipWhitespace();\n\n      // Check for and consume opening parentheses, pushing powerMultiplierCurrent to the stack\n      // A '(' will always appear directly before a unit.\n      while (c === '(') {\n        powerMultiplierStack.push(powerMultiplierCurrent);\n        powerMultiplierStackProduct *= powerMultiplierCurrent;\n        powerMultiplierCurrent = 1;\n        next();\n        skipWhitespace();\n      }\n\n      // Is there something here?\n      var uStr = void 0;\n      if (c) {\n        var oldC = c;\n        uStr = parseUnit();\n        if (uStr === null) {\n          throw new SyntaxError('Unexpected \"' + oldC + '\" in \"' + text + '\" at index ' + index.toString());\n        }\n      } else {\n        // End of input.\n        break;\n      }\n\n      // Verify the unit exists and get the prefix (if any)\n      var res = _findUnit(uStr);\n      if (res === null) {\n        // Unit not found.\n        throw new SyntaxError('Unit \"' + uStr + '\" not found.');\n      }\n      var power = powerMultiplierCurrent * powerMultiplierStackProduct;\n      // Is there a \"^ number\"?\n      skipWhitespace();\n      if (parseCharacter('^')) {\n        skipWhitespace();\n        var p = parseNumber();\n        if (p === null) {\n          // No valid number found for the power!\n          throw new SyntaxError('In \"' + str + '\", \"^\" must be followed by a floating-point number');\n        }\n        power *= p;\n      }\n\n      // Add the unit to the list\n      unit.units.push({\n        unit: res.unit,\n        prefix: res.prefix,\n        power\n      });\n      for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n        unit.dimensions[i] += (res.unit.dimensions[i] || 0) * power;\n      }\n\n      // Check for and consume closing parentheses, popping from the stack.\n      // A ')' will always follow a unit.\n      skipWhitespace();\n      while (c === ')') {\n        if (powerMultiplierStack.length === 0) {\n          throw new SyntaxError('Unmatched \")\" in \"' + text + '\" at index ' + index.toString());\n        }\n        powerMultiplierStackProduct /= powerMultiplierStack.pop();\n        next();\n        skipWhitespace();\n      }\n\n      // \"*\" and \"/\" should mean we are expecting something to come next.\n      // Is there a forward slash? If so, negate powerMultiplierCurrent. The next unit or paren group is in the denominator.\n      expectingUnit = false;\n      if (parseCharacter('*')) {\n        // explicit multiplication\n        powerMultiplierCurrent = 1;\n        expectingUnit = true;\n      } else if (parseCharacter('/')) {\n        // division\n        powerMultiplierCurrent = -1;\n        expectingUnit = true;\n      } else {\n        // implicit multiplication\n        powerMultiplierCurrent = 1;\n      }\n\n      // Replace the unit into the auto unit system\n      if (res.unit.base) {\n        var baseDim = res.unit.base.key;\n        UNIT_SYSTEMS.auto[baseDim] = {\n          unit: res.unit,\n          prefix: res.prefix\n        };\n      }\n    }\n\n    // Has the string been entirely consumed?\n    skipWhitespace();\n    if (c) {\n      throw new SyntaxError('Could not parse: \"' + str + '\"');\n    }\n\n    // Is there a trailing slash?\n    if (expectingUnit) {\n      throw new SyntaxError('Trailing characters: \"' + str + '\"');\n    }\n\n    // Is the parentheses stack empty?\n    if (powerMultiplierStack.length !== 0) {\n      throw new SyntaxError('Unmatched \"(\" in \"' + text + '\"');\n    }\n\n    // Are there any units at all?\n    if (unit.units.length === 0 && !options.allowNoUnits) {\n      throw new SyntaxError('\"' + str + '\" contains no units');\n    }\n    unit.value = value !== undefined ? unit._normalize(value) : null;\n    return unit;\n  };\n\n  /**\n   * create a copy of this unit\n   * @memberof Unit\n   * @return {Unit} Returns a cloned version of the unit\n   */\n  Unit.prototype.clone = function () {\n    var unit = new Unit();\n    unit.fixPrefix = this.fixPrefix;\n    unit.skipAutomaticSimplification = this.skipAutomaticSimplification;\n    unit.value = clone(this.value);\n    unit.dimensions = this.dimensions.slice(0);\n    unit.units = [];\n    for (var i = 0; i < this.units.length; i++) {\n      unit.units[i] = {};\n      for (var p in this.units[i]) {\n        if (hasOwnProperty(this.units[i], p)) {\n          unit.units[i][p] = this.units[i][p];\n        }\n      }\n    }\n    return unit;\n  };\n\n  /**\n   * Return the type of the value of this unit\n   *\n   * @memberof Unit\n   * @ return {string} type of the value of the unit\n   */\n  Unit.prototype.valueType = function () {\n    return typeOf(this.value);\n  };\n\n  /**\n   * Return whether the unit is derived (such as m/s, or cm^2, but not N)\n   * @memberof Unit\n   * @return {boolean} True if the unit is derived\n   */\n  Unit.prototype._isDerived = function () {\n    if (this.units.length === 0) {\n      return false;\n    }\n    return this.units.length > 1 || Math.abs(this.units[0].power - 1.0) > 1e-15;\n  };\n\n  /**\n   * Normalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number | BigNumber | Fraction | boolean} value\n   * @return {number | BigNumber | Fraction | boolean} normalized value\n   * @private\n   */\n  Unit.prototype._normalize = function (value) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = multiplyScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Denormalize a value, based on its currently set unit(s)\n   * @memberof Unit\n   * @param {number} value\n   * @param {number} [prefixValue]    Optional prefix value to be used (ignored if this is a derived unit)\n   * @return {number} denormalized value\n   * @private\n   */\n  Unit.prototype._denormalize = function (value, prefixValue) {\n    if (value === null || value === undefined || this.units.length === 0) {\n      return value;\n    }\n    var res = value;\n    var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n    for (var i = 0; i < this.units.length; i++) {\n      var unitValue = convert(this.units[i].unit.value);\n      var unitPrefixValue = convert(this.units[i].prefix.value);\n      var unitPower = convert(this.units[i].power);\n      res = divideScalar(res, pow(multiplyScalar(unitValue, unitPrefixValue), unitPower));\n    }\n    return res;\n  };\n\n  /**\n   * Find a unit from a string\n   * @memberof Unit\n   * @param {string} str              A string like 'cm' or 'inch'\n   * @returns {Object | null} result  When found, an object with fields unit and\n   *                                  prefix is returned. Else, null is returned.\n   * @private\n   */\n  var _findUnit = memoize(str => {\n    // First, match units names exactly. For example, a user could define 'mm' as 10^-4 m, which is silly, but then we would want 'mm' to match the user-defined unit.\n    if (hasOwnProperty(UNITS, str)) {\n      var unit = UNITS[str];\n      var prefix = unit.prefixes[''];\n      return {\n        unit,\n        prefix\n      };\n    }\n    for (var _name in UNITS) {\n      if (hasOwnProperty(UNITS, _name)) {\n        if (endsWith(str, _name)) {\n          var _unit = UNITS[_name];\n          var prefixLen = str.length - _name.length;\n          var prefixName = str.substring(0, prefixLen);\n          var _prefix = hasOwnProperty(_unit.prefixes, prefixName) ? _unit.prefixes[prefixName] : undefined;\n          if (_prefix !== undefined) {\n            // store unit, prefix, and value\n            return {\n              unit: _unit,\n              prefix: _prefix\n            };\n          }\n        }\n      }\n    }\n    return null;\n  }, {\n    hasher: args => args[0],\n    limit: 100\n  });\n\n  /**\n   * Test if the given expression is a unit.\n   * The unit can have a prefix but cannot have a value.\n   * @memberof Unit\n   * @param {string} name   A string to be tested whether it is a value less unit.\n   *                        The unit can have prefix, like \"cm\"\n   * @return {boolean}      true if the given string is a unit\n   */\n  Unit.isValuelessUnit = function (name) {\n    return _findUnit(name) !== null;\n  };\n\n  /**\n   * check if this unit has given base unit\n   * If this unit is a derived unit, this will ALWAYS return false, since by definition base units are not derived.\n   * @memberof Unit\n   * @param {BASE_UNITS | string | undefined} base\n   */\n  Unit.prototype.hasBase = function (base) {\n    if (typeof base === 'string') {\n      base = BASE_UNITS[base];\n    }\n    if (!base) {\n      return false;\n    }\n\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (base.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit has a base or bases equal to another base or bases\n   * For derived units, the exponent on each base also must match\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if equal base\n   */\n  Unit.prototype.equalBase = function (other) {\n    // All dimensions must be the same\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      if (Math.abs((this.dimensions[i] || 0) - (other.dimensions[i] || 0)) > 1e-12) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * Check if this unit equals another unit\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {boolean} true if both units are equal\n   */\n  Unit.prototype.equals = function (other) {\n    return this.equalBase(other) && equal(this.value, other.value);\n  };\n\n  /**\n   * Multiply this unit with another one or with a scalar\n   * @memberof Unit\n   * @param {Unit} other\n   * @return {Unit} product of this unit and the other unit\n   */\n  Unit.prototype.multiply = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) + (other.dimensions[i] || 0);\n    }\n\n    // Append other's units list onto res\n    for (var _i = 0; _i < other.units.length; _i++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread({}, other.units[_i]);\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, then the result should also have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = multiplyScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Divide a number by this unit\n   *\n   * @memberof Unit\n   * @param {numeric} numerator\n   * @param {unit} result of dividing numerator by this unit\n   */\n  Unit.prototype.divideInto = function (numerator) {\n    return new Unit(numerator).divide(this);\n  };\n\n  /**\n   * Divide this unit by another one\n   * @memberof Unit\n   * @param {Unit | numeric} other\n   * @return {Unit} result of dividing this unit by the other unit\n   */\n  Unit.prototype.divide = function (_other) {\n    var res = this.clone();\n    var other = isUnit(_other) ? _other : new Unit(_other);\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) - (other.dimensions[i] || 0);\n    }\n\n    // Invert and append other's units list onto res\n    for (var _i2 = 0; _i2 < other.units.length; _i2++) {\n      // Make a shallow copy of every unit\n      var inverted = _objectSpread(_objectSpread({}, other.units[_i2]), {}, {\n        power: -other.units[_i2].power\n      });\n      res.units.push(inverted);\n    }\n\n    // If at least one operand has a value, the result should have a value\n    if (this.value !== null || other.value !== null) {\n      var valThis = this.value === null ? this._normalize(1) : this.value;\n      var valOther = other.value === null ? other._normalize(1) : other.value;\n      res.value = divideScalar(valThis, valOther);\n    } else {\n      res.value = null;\n    }\n    if (isUnit(_other)) {\n      res.skipAutomaticSimplification = false;\n    }\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Calculate the power of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} p\n   * @returns {Unit}      The result: this^p\n   */\n  Unit.prototype.pow = function (p) {\n    var res = this.clone();\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      // Dimensions arrays may be of different lengths. Default to 0.\n      res.dimensions[i] = (this.dimensions[i] || 0) * p;\n    }\n\n    // Adjust the power of each unit in the list\n    for (var _i3 = 0; _i3 < res.units.length; _i3++) {\n      res.units[_i3].power *= p;\n    }\n    if (res.value !== null) {\n      res.value = pow(res.value, p);\n\n      // only allow numeric output, we don't want to return a Complex number\n      // if (!isNumeric(res.value)) {\n      //  res.value = NaN\n      // }\n      // Update: Complex supported now\n    } else {\n      res.value = null;\n    }\n    res.skipAutomaticSimplification = false;\n    return getNumericIfUnitless(res);\n  };\n\n  /**\n   * Return the numeric value of this unit if it is dimensionless, has a value, and config.predictable == false; or the original unit otherwise\n   * @param {Unit} unit\n   * @returns {number | Fraction | BigNumber | Unit}  The numeric value of the unit if conditions are met, or the original unit otherwise\n   */\n  function getNumericIfUnitless(unit) {\n    if (unit.equalBase(BASE_UNITS.NONE) && unit.value !== null && !config.predictable) {\n      return unit.value;\n    } else {\n      return unit;\n    }\n  }\n\n  /**\n   * Calculate the absolute value of a unit\n   * @memberof Unit\n   * @param {number | Fraction | BigNumber} x\n   * @returns {Unit}      The result: |x|, absolute value of x\n   */\n  Unit.prototype.abs = function () {\n    var ret = this.clone();\n    if (ret.value !== null) {\n      if (ret._isDerived() || ret.units[0].unit.offset === 0) {\n        ret.value = abs(ret.value);\n      } else {\n        // To give the correct, but unexpected, results for units with an offset.\n        // For example, abs(-283.15 degC) = -263.15 degC !!!\n        // We must take the offset into consideration here\n        var convert = ret._numberConverter(); // convert to Fraction or BigNumber if needed\n        var unitValue = convert(ret.units[0].unit.value);\n        var nominalOffset = convert(ret.units[0].unit.offset);\n        var unitOffset = multiplyScalar(unitValue, nominalOffset);\n        ret.value = subtract(abs(addScalar(ret.value, unitOffset)), unitOffset);\n      }\n    }\n    for (var i in ret.units) {\n      if (ret.units[i].unit.name === 'VA' || ret.units[i].unit.name === 'VAR') {\n        ret.units[i].unit = UNITS.W;\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Convert the unit to a specific unit name.\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit   A unit without value. Can have prefix, like \"cm\"\n   * @returns {Unit} Returns a clone of the unit with a fixed prefix and unit.\n   */\n  Unit.prototype.to = function (valuelessUnit) {\n    var value = this.value === null ? this._normalize(1) : this.value;\n    var other;\n    if (typeof valuelessUnit === 'string') {\n      other = Unit.parse(valuelessUnit);\n    } else if (isUnit(valuelessUnit)) {\n      other = valuelessUnit.clone();\n    } else {\n      throw new Error('String or Unit expected as parameter');\n    }\n    if (!this.equalBase(other)) {\n      throw new Error(\"Units do not match ('\".concat(other.toString(), \"' != '\").concat(this.toString(), \"')\"));\n    }\n    if (other.value !== null) {\n      throw new Error('Cannot convert to a unit with a value');\n    }\n    if (this.value === null || this._isDerived() || this.units[0].unit.offset === other.units[0].unit.offset) {\n      other.value = clone(value);\n    } else {\n      /* Need to adjust value by difference in offset to convert */\n      var convert = Unit._getNumberConverter(typeOf(value)); // convert to Fraction or BigNumber if needed\n\n      var thisUnitValue = this.units[0].unit.value;\n      var thisNominalOffset = this.units[0].unit.offset;\n      var thisUnitOffset = multiplyScalar(thisUnitValue, thisNominalOffset);\n      var otherUnitValue = other.units[0].unit.value;\n      var otherNominalOffset = other.units[0].unit.offset;\n      var otherUnitOffset = multiplyScalar(otherUnitValue, otherNominalOffset);\n      other.value = addScalar(value, convert(subtract(thisUnitOffset, otherUnitOffset)));\n    }\n    other.fixPrefix = true;\n    other.skipAutomaticSimplification = true;\n    return other;\n  };\n\n  /**\n   * Return the value of the unit when represented with given valueless unit\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number} Returns the unit value as number.\n   */\n  // TODO: deprecate Unit.toNumber? It's always better to use toNumeric\n  Unit.prototype.toNumber = function (valuelessUnit) {\n    return toNumber(this.toNumeric(valuelessUnit));\n  };\n\n  /**\n   * Return the value of the unit in the original numeric type\n   * @memberof Unit\n   * @param {string | Unit} valuelessUnit    For example 'cm' or 'inch'\n   * @return {number | BigNumber | Fraction} Returns the unit value\n   */\n  Unit.prototype.toNumeric = function (valuelessUnit) {\n    var other;\n    if (valuelessUnit) {\n      // Allow getting the numeric value without converting to a different unit\n      other = this.to(valuelessUnit);\n    } else {\n      other = this.clone();\n    }\n    if (other._isDerived() || other.units.length === 0) {\n      return other._denormalize(other.value);\n    } else {\n      return other._denormalize(other.value, other.units[0].prefix.value);\n    }\n  };\n\n  /**\n   * Get a string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.toString = function () {\n    return this.format();\n  };\n\n  /**\n   * Get a JSON representation of the unit\n   * @memberof Unit\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   */\n  Unit.prototype.toJSON = function () {\n    return {\n      mathjs: 'Unit',\n      value: this._denormalize(this.value),\n      unit: this.formatUnits(),\n      fixPrefix: this.fixPrefix\n    };\n  };\n\n  /**\n   * Instantiate a Unit from a JSON object\n   * @memberof Unit\n   * @param {Object} json  A JSON object structured as:\n   *                       `{\"mathjs\": \"Unit\", \"value\": 2, \"unit\": \"cm\", \"fixPrefix\": false}`\n   * @return {Unit}\n   */\n  Unit.fromJSON = function (json) {\n    var unit = new Unit(json.value, json.unit);\n    unit.fixPrefix = json.fixPrefix || false;\n    return unit;\n  };\n\n  /**\n   * Returns the string representation of the unit.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.valueOf = Unit.prototype.toString;\n\n  /**\n   * Simplify this Unit's unit list and return a new Unit with the simplified list.\n   * The returned Unit will contain a list of the \"best\" units for formatting.\n   */\n  Unit.prototype.simplify = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Search for a matching base\n    var matchingBase;\n    for (var key in currentUnitSystem) {\n      if (hasOwnProperty(currentUnitSystem, key)) {\n        if (ret.hasBase(BASE_UNITS[key])) {\n          matchingBase = key;\n          break;\n        }\n      }\n    }\n    if (matchingBase === 'NONE') {\n      ret.units = [];\n    } else {\n      var matchingUnit;\n      if (matchingBase) {\n        // Does the unit system have a matching unit?\n        if (hasOwnProperty(currentUnitSystem, matchingBase)) {\n          matchingUnit = currentUnitSystem[matchingBase];\n        }\n      }\n      if (matchingUnit) {\n        ret.units = [{\n          unit: matchingUnit.unit,\n          prefix: matchingUnit.prefix,\n          power: 1.0\n        }];\n      } else {\n        // Multiple units or units with powers are formatted like this:\n        // 5 (kg m^2) / (s^3 mol)\n        // Build an representation from the base units of the current unit system\n        var missingBaseDim = false;\n        for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n          var baseDim = BASE_DIMENSIONS[i];\n          if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n            if (hasOwnProperty(currentUnitSystem, baseDim)) {\n              proposedUnitList.push({\n                unit: currentUnitSystem[baseDim].unit,\n                prefix: currentUnitSystem[baseDim].prefix,\n                power: ret.dimensions[i] || 0\n              });\n            } else {\n              missingBaseDim = true;\n            }\n          }\n        }\n\n        // Is the proposed unit list \"simpler\" than the existing one?\n        if (proposedUnitList.length < ret.units.length && !missingBaseDim) {\n          // Replace this unit list with the proposed list\n          ret.units = proposedUnitList;\n        }\n      }\n    }\n    return ret;\n  };\n\n  /**\n   * Returns a new Unit in the SI system with the same value as this one\n   */\n  Unit.prototype.toSI = function () {\n    var ret = this.clone();\n    var proposedUnitList = [];\n\n    // Multiple units or units with powers are formatted like this:\n    // 5 (kg m^2) / (s^3 mol)\n    // Build an representation from the base units of the SI unit system\n    for (var i = 0; i < BASE_DIMENSIONS.length; i++) {\n      var baseDim = BASE_DIMENSIONS[i];\n      if (Math.abs(ret.dimensions[i] || 0) > 1e-12) {\n        if (hasOwnProperty(UNIT_SYSTEMS.si, baseDim)) {\n          proposedUnitList.push({\n            unit: UNIT_SYSTEMS.si[baseDim].unit,\n            prefix: UNIT_SYSTEMS.si[baseDim].prefix,\n            power: ret.dimensions[i] || 0\n          });\n        } else {\n          throw new Error('Cannot express custom unit ' + baseDim + ' in SI units');\n        }\n      }\n    }\n\n    // Replace this unit list with the proposed list\n    ret.units = proposedUnitList;\n    ret.fixPrefix = true;\n    ret.skipAutomaticSimplification = true;\n    return ret;\n  };\n\n  /**\n   * Get a string representation of the units of this Unit, without the value. The unit list is formatted as-is without first being simplified.\n   * @memberof Unit\n   * @return {string}\n   */\n  Unit.prototype.formatUnits = function () {\n    var strNum = '';\n    var strDen = '';\n    var nNum = 0;\n    var nDen = 0;\n    for (var i = 0; i < this.units.length; i++) {\n      if (this.units[i].power > 0) {\n        nNum++;\n        strNum += ' ' + this.units[i].prefix.name + this.units[i].unit.name;\n        if (Math.abs(this.units[i].power - 1.0) > 1e-15) {\n          strNum += '^' + this.units[i].power;\n        }\n      } else if (this.units[i].power < 0) {\n        nDen++;\n      }\n    }\n    if (nDen > 0) {\n      for (var _i4 = 0; _i4 < this.units.length; _i4++) {\n        if (this.units[_i4].power < 0) {\n          if (nNum > 0) {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            if (Math.abs(this.units[_i4].power + 1.0) > 1e-15) {\n              strDen += '^' + -this.units[_i4].power;\n            }\n          } else {\n            strDen += ' ' + this.units[_i4].prefix.name + this.units[_i4].unit.name;\n            strDen += '^' + this.units[_i4].power;\n          }\n        }\n      }\n    }\n    // Remove leading \" \"\n    strNum = strNum.substr(1);\n    strDen = strDen.substr(1);\n\n    // Add parans for better copy/paste back into evaluate, for example, or for better pretty print formatting\n    if (nNum > 1 && nDen > 0) {\n      strNum = '(' + strNum + ')';\n    }\n    if (nDen > 1 && nNum > 0) {\n      strDen = '(' + strDen + ')';\n    }\n    var str = strNum;\n    if (nNum > 0 && nDen > 0) {\n      str += ' / ';\n    }\n    str += strDen;\n    return str;\n  };\n\n  /**\n   * Get a string representation of the Unit, with optional formatting options.\n   * @memberof Unit\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @return {string}\n   */\n  Unit.prototype.format = function (options) {\n    // Simplfy the unit list, unless it is valueless or was created directly in the\n    // constructor or as the result of to or toSI\n    var simp = this.skipAutomaticSimplification || this.value === null ? this.clone() : this.simplify();\n\n    // Apply some custom logic for handling VA and VAR. The goal is to express the value of the unit as a real value, if possible. Otherwise, use a real-valued unit instead of a complex-valued one.\n    var isImaginary = false;\n    if (typeof simp.value !== 'undefined' && simp.value !== null && isComplex(simp.value)) {\n      // TODO: Make this better, for example, use relative magnitude of re and im rather than absolute\n      isImaginary = Math.abs(simp.value.re) < 1e-14;\n    }\n    for (var i in simp.units) {\n      if (hasOwnProperty(simp.units, i)) {\n        if (simp.units[i].unit) {\n          if (simp.units[i].unit.name === 'VA' && isImaginary) {\n            simp.units[i].unit = UNITS.VAR;\n          } else if (simp.units[i].unit.name === 'VAR' && !isImaginary) {\n            simp.units[i].unit = UNITS.VA;\n          }\n        }\n      }\n    }\n\n    // Now apply the best prefix\n    // Units must have only one unit and not have the fixPrefix flag set\n    if (simp.units.length === 1 && !simp.fixPrefix) {\n      // Units must have integer powers, otherwise the prefix will change the\n      // outputted value by not-an-integer-power-of-ten\n      if (Math.abs(simp.units[0].power - Math.round(simp.units[0].power)) < 1e-14) {\n        // Apply the best prefix\n        simp.units[0].prefix = simp._bestPrefix();\n      }\n    }\n    var value = simp._denormalize(simp.value);\n    var str = simp.value !== null ? format(value, options || {}) : '';\n    var unitStr = simp.formatUnits();\n    if (simp.value && isComplex(simp.value)) {\n      str = '(' + str + ')'; // Surround complex values with ( ) to enable better parsing\n    }\n\n    if (unitStr.length > 0 && str.length > 0) {\n      str += ' ';\n    }\n    str += unitStr;\n    return str;\n  };\n\n  /**\n   * Calculate the best prefix using current value.\n   * @memberof Unit\n   * @returns {Object} prefix\n   * @private\n   */\n  Unit.prototype._bestPrefix = function () {\n    if (this.units.length !== 1) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n    if (Math.abs(this.units[0].power - Math.round(this.units[0].power)) >= 1e-14) {\n      throw new Error('Can only compute the best prefix for single units with integer powers, like kg, s^2, N^-1, and so forth!');\n    }\n\n    // find the best prefix value (resulting in the value of which\n    // the absolute value of the log10 is closest to zero,\n    // though with a little offset of 1.2 for nicer values: you get a\n    // sequence 1mm 100mm 500mm 0.6m 1m 10m 100m 500m 0.6km 1km ...\n\n    // Note: the units value can be any numeric type, but to find the best\n    // prefix it's enough to work with limited precision of a regular number\n    // Update: using mathjs abs since we also allow complex numbers\n    var absValue = this.value !== null ? abs(this.value) : 0;\n    var absUnitValue = abs(this.units[0].unit.value);\n    var bestPrefix = this.units[0].prefix;\n    if (absValue === 0) {\n      return bestPrefix;\n    }\n    var power = this.units[0].power;\n    var bestDiff = Math.log(absValue / Math.pow(bestPrefix.value * absUnitValue, power)) / Math.LN10 - 1.2;\n    if (bestDiff > -2.200001 && bestDiff < 1.800001) return bestPrefix; // Allow the original prefix\n    bestDiff = Math.abs(bestDiff);\n    var prefixes = this.units[0].unit.prefixes;\n    for (var p in prefixes) {\n      if (hasOwnProperty(prefixes, p)) {\n        var prefix = prefixes[p];\n        if (prefix.scientific) {\n          var diff = Math.abs(Math.log(absValue / Math.pow(prefix.value * absUnitValue, power)) / Math.LN10 - 1.2);\n          if (diff < bestDiff || diff === bestDiff && prefix.name.length < bestPrefix.name.length) {\n            // choose the prefix with the smallest diff, or if equal, choose the one\n            // with the shortest name (can happen with SHORTLONG for example)\n            bestPrefix = prefix;\n            bestDiff = diff;\n          }\n        }\n      }\n    }\n    return bestPrefix;\n  };\n\n  /**\n   * Returns an array of units whose sum is equal to this unit\n   * @memberof Unit\n   * @param {Array} [parts] An array of strings or valueless units.\n   *\n   *   Example:\n   *\n   *   const u = new Unit(1, 'm')\n   *   u.splitUnit(['feet', 'inch'])\n   *     [ 3 feet, 3.3700787401575 inch ]\n   *\n   * @return {Array} An array of units.\n   */\n  Unit.prototype.splitUnit = function (parts) {\n    var x = this.clone();\n    var ret = [];\n    for (var i = 0; i < parts.length; i++) {\n      // Convert x to the requested unit\n      x = x.to(parts[i]);\n      if (i === parts.length - 1) break;\n\n      // Get the numeric value of this unit\n      var xNumeric = x.toNumeric();\n\n      // Check to see if xNumeric is nearly equal to an integer,\n      // since fix can incorrectly round down if there is round-off error\n      var xRounded = round(xNumeric);\n      var xFixed = void 0;\n      var isNearlyEqual = equal(xRounded, xNumeric);\n      if (isNearlyEqual) {\n        xFixed = xRounded;\n      } else {\n        xFixed = fix(x.toNumeric());\n      }\n      var y = new Unit(xFixed, parts[i].toString());\n      ret.push(y);\n      x = subtract(x, y);\n    }\n\n    // This little bit fixes a bug where the remainder should be 0 but is a little bit off.\n    // But instead of comparing x, the remainder, with zero--we will compare the sum of\n    // all the parts so far with the original value. If they are nearly equal,\n    // we set the remainder to 0.\n    var testSum = 0;\n    for (var _i5 = 0; _i5 < ret.length; _i5++) {\n      testSum = addScalar(testSum, ret[_i5].value);\n    }\n    if (equal(testSum, this.value)) {\n      x.value = 0;\n    }\n    ret.push(x);\n    return ret;\n  };\n  var PREFIXES = {\n    NONE: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      }\n    },\n    SHORT: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e1,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e2,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-1,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-2,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-3,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-6,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-9,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-12,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-15,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-18,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-21,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    LONG: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      deca: {\n        name: 'deca',\n        value: 1e1,\n        scientific: false\n      },\n      hecto: {\n        name: 'hecto',\n        value: 1e2,\n        scientific: false\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      },\n      deci: {\n        name: 'deci',\n        value: 1e-1,\n        scientific: false\n      },\n      centi: {\n        name: 'centi',\n        value: 1e-2,\n        scientific: false\n      },\n      milli: {\n        name: 'milli',\n        value: 1e-3,\n        scientific: true\n      },\n      micro: {\n        name: 'micro',\n        value: 1e-6,\n        scientific: true\n      },\n      nano: {\n        name: 'nano',\n        value: 1e-9,\n        scientific: true\n      },\n      pico: {\n        name: 'pico',\n        value: 1e-12,\n        scientific: true\n      },\n      femto: {\n        name: 'femto',\n        value: 1e-15,\n        scientific: true\n      },\n      atto: {\n        name: 'atto',\n        value: 1e-18,\n        scientific: true\n      },\n      zepto: {\n        name: 'zepto',\n        value: 1e-21,\n        scientific: true\n      },\n      yocto: {\n        name: 'yocto',\n        value: 1e-24,\n        scientific: true\n      }\n    },\n    SQUARED: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e2,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e4,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e6,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e12,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e18,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e24,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e30,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e36,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e42,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e48,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-2,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-4,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-6,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-12,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-18,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-24,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-30,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-36,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-42,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-48,\n        scientific: true\n      }\n    },\n    CUBIC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      da: {\n        name: 'da',\n        value: 1e3,\n        scientific: false\n      },\n      h: {\n        name: 'h',\n        value: 1e6,\n        scientific: false\n      },\n      k: {\n        name: 'k',\n        value: 1e9,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e18,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e27,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e36,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e45,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e54,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e63,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e72,\n        scientific: true\n      },\n      d: {\n        name: 'd',\n        value: 1e-3,\n        scientific: false\n      },\n      c: {\n        name: 'c',\n        value: 1e-6,\n        scientific: false\n      },\n      m: {\n        name: 'm',\n        value: 1e-9,\n        scientific: true\n      },\n      u: {\n        name: 'u',\n        value: 1e-18,\n        scientific: true\n      },\n      n: {\n        name: 'n',\n        value: 1e-27,\n        scientific: true\n      },\n      p: {\n        name: 'p',\n        value: 1e-36,\n        scientific: true\n      },\n      f: {\n        name: 'f',\n        value: 1e-45,\n        scientific: true\n      },\n      a: {\n        name: 'a',\n        value: 1e-54,\n        scientific: true\n      },\n      z: {\n        name: 'z',\n        value: 1e-63,\n        scientific: true\n      },\n      y: {\n        name: 'y',\n        value: 1e-72,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      k: {\n        name: 'k',\n        value: 1e3,\n        scientific: true\n      },\n      M: {\n        name: 'M',\n        value: 1e6,\n        scientific: true\n      },\n      G: {\n        name: 'G',\n        value: 1e9,\n        scientific: true\n      },\n      T: {\n        name: 'T',\n        value: 1e12,\n        scientific: true\n      },\n      P: {\n        name: 'P',\n        value: 1e15,\n        scientific: true\n      },\n      E: {\n        name: 'E',\n        value: 1e18,\n        scientific: true\n      },\n      Z: {\n        name: 'Z',\n        value: 1e21,\n        scientific: true\n      },\n      Y: {\n        name: 'Y',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_SHORT_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      Ki: {\n        name: 'Ki',\n        value: 1024,\n        scientific: true\n      },\n      Mi: {\n        name: 'Mi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      Gi: {\n        name: 'Gi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      Ti: {\n        name: 'Ti',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      Pi: {\n        name: 'Pi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      Ei: {\n        name: 'Ei',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      Zi: {\n        name: 'Zi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      Yi: {\n        name: 'Yi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BINARY_LONG_SI: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kilo: {\n        name: 'kilo',\n        value: 1e3,\n        scientific: true\n      },\n      mega: {\n        name: 'mega',\n        value: 1e6,\n        scientific: true\n      },\n      giga: {\n        name: 'giga',\n        value: 1e9,\n        scientific: true\n      },\n      tera: {\n        name: 'tera',\n        value: 1e12,\n        scientific: true\n      },\n      peta: {\n        name: 'peta',\n        value: 1e15,\n        scientific: true\n      },\n      exa: {\n        name: 'exa',\n        value: 1e18,\n        scientific: true\n      },\n      zetta: {\n        name: 'zetta',\n        value: 1e21,\n        scientific: true\n      },\n      yotta: {\n        name: 'yotta',\n        value: 1e24,\n        scientific: true\n      }\n    },\n    BINARY_LONG_IEC: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      kibi: {\n        name: 'kibi',\n        value: 1024,\n        scientific: true\n      },\n      mebi: {\n        name: 'mebi',\n        value: Math.pow(1024, 2),\n        scientific: true\n      },\n      gibi: {\n        name: 'gibi',\n        value: Math.pow(1024, 3),\n        scientific: true\n      },\n      tebi: {\n        name: 'tebi',\n        value: Math.pow(1024, 4),\n        scientific: true\n      },\n      pebi: {\n        name: 'pebi',\n        value: Math.pow(1024, 5),\n        scientific: true\n      },\n      exi: {\n        name: 'exi',\n        value: Math.pow(1024, 6),\n        scientific: true\n      },\n      zebi: {\n        name: 'zebi',\n        value: Math.pow(1024, 7),\n        scientific: true\n      },\n      yobi: {\n        name: 'yobi',\n        value: Math.pow(1024, 8),\n        scientific: true\n      }\n    },\n    BTU: {\n      '': {\n        name: '',\n        value: 1,\n        scientific: true\n      },\n      MM: {\n        name: 'MM',\n        value: 1e6,\n        scientific: true\n      }\n    }\n  };\n  PREFIXES.SHORTLONG = _extends({}, PREFIXES.SHORT, PREFIXES.LONG);\n  PREFIXES.BINARY_SHORT = _extends({}, PREFIXES.BINARY_SHORT_SI, PREFIXES.BINARY_SHORT_IEC);\n  PREFIXES.BINARY_LONG = _extends({}, PREFIXES.BINARY_LONG_SI, PREFIXES.BINARY_LONG_IEC);\n\n  /* Internally, each unit is represented by a value and a dimension array. The elements of the dimensions array have the following meaning:\n   * Index  Dimension\n   * -----  ---------\n   *   0    Length\n   *   1    Mass\n   *   2    Time\n   *   3    Current\n   *   4    Temperature\n   *   5    Luminous intensity\n   *   6    Amount of substance\n   *   7    Angle\n   *   8    Bit (digital)\n   * For example, the unit \"298.15 K\" is a pure temperature and would have a value of 298.15 and a dimension array of [0, 0, 0, 0, 1, 0, 0, 0, 0]. The unit \"1 cal / (gm °C)\" can be written in terms of the 9 fundamental dimensions as [length^2] / ([time^2] * [temperature]), and would a value of (after conversion to SI) 4184.0 and a dimensions array of [2, 0, -2, 0, -1, 0, 0, 0, 0].\n   *\n   */\n\n  var BASE_DIMENSIONS = ['MASS', 'LENGTH', 'TIME', 'CURRENT', 'TEMPERATURE', 'LUMINOUS_INTENSITY', 'AMOUNT_OF_SUBSTANCE', 'ANGLE', 'BIT'];\n  var BASE_UNITS = {\n    NONE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    MASS: {\n      dimensions: [1, 0, 0, 0, 0, 0, 0, 0, 0]\n    },\n    LENGTH: {\n      dimensions: [0, 1, 0, 0, 0, 0, 0, 0, 0]\n    },\n    TIME: {\n      dimensions: [0, 0, 1, 0, 0, 0, 0, 0, 0]\n    },\n    CURRENT: {\n      dimensions: [0, 0, 0, 1, 0, 0, 0, 0, 0]\n    },\n    TEMPERATURE: {\n      dimensions: [0, 0, 0, 0, 1, 0, 0, 0, 0]\n    },\n    LUMINOUS_INTENSITY: {\n      dimensions: [0, 0, 0, 0, 0, 1, 0, 0, 0]\n    },\n    AMOUNT_OF_SUBSTANCE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 1, 0, 0]\n    },\n    FORCE: {\n      dimensions: [1, 1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    SURFACE: {\n      dimensions: [0, 2, 0, 0, 0, 0, 0, 0, 0]\n    },\n    VOLUME: {\n      dimensions: [0, 3, 0, 0, 0, 0, 0, 0, 0]\n    },\n    ENERGY: {\n      dimensions: [1, 2, -2, 0, 0, 0, 0, 0, 0]\n    },\n    POWER: {\n      dimensions: [1, 2, -3, 0, 0, 0, 0, 0, 0]\n    },\n    PRESSURE: {\n      dimensions: [1, -1, -2, 0, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CHARGE: {\n      dimensions: [0, 0, 1, 1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CAPACITANCE: {\n      dimensions: [-1, -2, 4, 2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_POTENTIAL: {\n      dimensions: [1, 2, -3, -1, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_RESISTANCE: {\n      dimensions: [1, 2, -3, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_INDUCTANCE: {\n      dimensions: [1, 2, -2, -2, 0, 0, 0, 0, 0]\n    },\n    ELECTRIC_CONDUCTANCE: {\n      dimensions: [-1, -2, 3, 2, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX: {\n      dimensions: [1, 2, -2, -1, 0, 0, 0, 0, 0]\n    },\n    MAGNETIC_FLUX_DENSITY: {\n      dimensions: [1, 0, -2, -1, 0, 0, 0, 0, 0]\n    },\n    FREQUENCY: {\n      dimensions: [0, 0, -1, 0, 0, 0, 0, 0, 0]\n    },\n    ANGLE: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 1, 0]\n    },\n    BIT: {\n      dimensions: [0, 0, 0, 0, 0, 0, 0, 0, 1]\n    }\n  };\n  for (var key in BASE_UNITS) {\n    if (hasOwnProperty(BASE_UNITS, key)) {\n      BASE_UNITS[key].key = key;\n    }\n  }\n  var BASE_UNIT_NONE = {};\n  var UNIT_NONE = {\n    name: '',\n    base: BASE_UNIT_NONE,\n    value: 1,\n    offset: 0,\n    dimensions: BASE_DIMENSIONS.map(x => 0)\n  };\n  var UNITS = {\n    // length\n    meter: {\n      name: 'meter',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    inch: {\n      name: 'inch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    foot: {\n      name: 'foot',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yard: {\n      name: 'yard',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mile: {\n      name: 'mile',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    link: {\n      name: 'link',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rod: {\n      name: 'rod',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.0292,\n      offset: 0\n    },\n    chain: {\n      name: 'chain',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    angstrom: {\n      name: 'angstrom',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1e-10,\n      offset: 0\n    },\n    m: {\n      name: 'm',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    in: {\n      name: 'in',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0254,\n      offset: 0\n    },\n    ft: {\n      name: 'ft',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.3048,\n      offset: 0\n    },\n    yd: {\n      name: 'yd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.9144,\n      offset: 0\n    },\n    mi: {\n      name: 'mi',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 1609.344,\n      offset: 0\n    },\n    li: {\n      name: 'li',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.201168,\n      offset: 0\n    },\n    rd: {\n      name: 'rd',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 5.029210,\n      offset: 0\n    },\n    ch: {\n      name: 'ch',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 20.1168,\n      offset: 0\n    },\n    mil: {\n      name: 'mil',\n      base: BASE_UNITS.LENGTH,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000254,\n      offset: 0\n    },\n    // 1/1000 inch\n\n    // Surface\n    m2: {\n      name: 'm2',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.SQUARED,\n      value: 1,\n      offset: 0\n    },\n    sqin: {\n      name: 'sqin',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.00064516,\n      offset: 0\n    },\n    // 645.16 mm2\n    sqft: {\n      name: 'sqft',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.09290304,\n      offset: 0\n    },\n    // 0.09290304 m2\n    sqyd: {\n      name: 'sqyd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 0.83612736,\n      offset: 0\n    },\n    // 0.83612736 m2\n    sqmi: {\n      name: 'sqmi',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 2589988.110336,\n      offset: 0\n    },\n    // 2.589988110336 km2\n    sqrd: {\n      name: 'sqrd',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 25.29295,\n      offset: 0\n    },\n    // 25.29295 m2\n    sqch: {\n      name: 'sqch',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 404.6873,\n      offset: 0\n    },\n    // 404.6873 m2\n    sqmil: {\n      name: 'sqmil',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 6.4516e-10,\n      offset: 0\n    },\n    // 6.4516 * 10^-10 m2\n    acre: {\n      name: 'acre',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 4046.86,\n      offset: 0\n    },\n    // 4046.86 m2\n    hectare: {\n      name: 'hectare',\n      base: BASE_UNITS.SURFACE,\n      prefixes: PREFIXES.NONE,\n      value: 10000,\n      offset: 0\n    },\n    // 10000 m2\n\n    // Volume\n    m3: {\n      name: 'm3',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.CUBIC,\n      value: 1,\n      offset: 0\n    },\n    L: {\n      name: 'L',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    l: {\n      name: 'l',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    // litre\n    litre: {\n      name: 'litre',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    cuin: {\n      name: 'cuin',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1.6387064e-5,\n      offset: 0\n    },\n    // 1.6387064e-5 m3\n    cuft: {\n      name: 'cuft',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.028316846592,\n      offset: 0\n    },\n    // 28.316 846 592 L\n    cuyd: {\n      name: 'cuyd',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.764554857984,\n      offset: 0\n    },\n    // 764.554 857 984 L\n    teaspoon: {\n      name: 'teaspoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000005,\n      offset: 0\n    },\n    // 5 mL\n    tablespoon: {\n      name: 'tablespoon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.000015,\n      offset: 0\n    },\n    // 15 mL\n    // {name: 'cup', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.000240, offset: 0}, // 240 mL  // not possible, we have already another cup\n    drop: {\n      name: 'drop',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n    gtt: {\n      name: 'gtt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 5e-8,\n      offset: 0\n    },\n    // 0.05 mL = 5e-8 m3\n\n    // Liquid volume\n    minim: {\n      name: 'minim',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00000006161152,\n      offset: 0\n    },\n    // 0.06161152 mL\n    fluiddram: {\n      name: 'fluiddram',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    fluidounce: {\n      name: 'fluidounce',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gill: {\n      name: 'gill',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cc: {\n      name: 'cc',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 1e-6,\n      offset: 0\n    },\n    // 1e-6 L\n    cup: {\n      name: 'cup',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pint: {\n      name: 'pint',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    quart: {\n      name: 'quart',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gallon: {\n      name: 'gallon',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    beerbarrel: {\n      name: 'beerbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    oilbarrel: {\n      name: 'oilbarrel',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    hogshead: {\n      name: 'hogshead',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.2384810,\n      offset: 0\n    },\n    // 238.4810 L\n\n    // {name: 'min', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.00000006161152, offset: 0}, // 0.06161152 mL // min is already in use as minute\n    fldr: {\n      name: 'fldr',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0000036966911,\n      offset: 0\n    },\n    // 3.696691 mL\n    floz: {\n      name: 'floz',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.00002957353,\n      offset: 0\n    },\n    // 29.57353 mL\n    gi: {\n      name: 'gi',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0001182941,\n      offset: 0\n    },\n    // 118.2941 mL\n    cp: {\n      name: 'cp',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0002365882,\n      offset: 0\n    },\n    // 236.5882 mL\n    pt: {\n      name: 'pt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0004731765,\n      offset: 0\n    },\n    // 473.1765 mL\n    qt: {\n      name: 'qt',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.0009463529,\n      offset: 0\n    },\n    // 946.3529 mL\n    gal: {\n      name: 'gal',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.003785412,\n      offset: 0\n    },\n    // 3.785412 L\n    bbl: {\n      name: 'bbl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1173478,\n      offset: 0\n    },\n    // 117.3478 L\n    obl: {\n      name: 'obl',\n      base: BASE_UNITS.VOLUME,\n      prefixes: PREFIXES.NONE,\n      value: 0.1589873,\n      offset: 0\n    },\n    // 158.9873 L\n    // {name: 'hogshead', base: BASE_UNITS.VOLUME, prefixes: PREFIXES.NONE, value: 0.2384810, offset: 0}, // 238.4810 L // TODO: hh?\n\n    // Mass\n    g: {\n      name: 'g',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 0.001,\n      offset: 0\n    },\n    gram: {\n      name: 'gram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 0.001,\n      offset: 0\n    },\n    ton: {\n      name: 'ton',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 907.18474,\n      offset: 0\n    },\n    t: {\n      name: 't',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.SHORT,\n      value: 1000,\n      offset: 0\n    },\n    tonne: {\n      name: 'tonne',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.LONG,\n      value: 1000,\n      offset: 0\n    },\n    grain: {\n      name: 'grain',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dram: {\n      name: 'dram',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    ounce: {\n      name: 'ounce',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    poundmass: {\n      name: 'poundmass',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    hundredweight: {\n      name: 'hundredweight',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    stick: {\n      name: 'stick',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 115e-3,\n      offset: 0\n    },\n    stone: {\n      name: 'stone',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 6.35029318,\n      offset: 0\n    },\n    gr: {\n      name: 'gr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 64.79891e-6,\n      offset: 0\n    },\n    dr: {\n      name: 'dr',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 1.7718451953125e-3,\n      offset: 0\n    },\n    oz: {\n      name: 'oz',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 28.349523125e-3,\n      offset: 0\n    },\n    lbm: {\n      name: 'lbm',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 453.59237e-3,\n      offset: 0\n    },\n    cwt: {\n      name: 'cwt',\n      base: BASE_UNITS.MASS,\n      prefixes: PREFIXES.NONE,\n      value: 45.359237,\n      offset: 0\n    },\n    // Time\n    s: {\n      name: 's',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    min: {\n      name: 'min',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    h: {\n      name: 'h',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    second: {\n      name: 'second',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    sec: {\n      name: 'sec',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    minute: {\n      name: 'minute',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 60,\n      offset: 0\n    },\n    hour: {\n      name: 'hour',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3600,\n      offset: 0\n    },\n    day: {\n      name: 'day',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 86400,\n      offset: 0\n    },\n    week: {\n      name: 'week',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 7 * 86400,\n      offset: 0\n    },\n    month: {\n      name: 'month',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 2629800,\n      // 1/12th of Julian year\n      offset: 0\n    },\n    year: {\n      name: 'year',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600,\n      // Julian year\n      offset: 0\n    },\n    decade: {\n      name: 'decade',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 315576000,\n      // Julian decade\n      offset: 0\n    },\n    century: {\n      name: 'century',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 3155760000,\n      // Julian century\n      offset: 0\n    },\n    millennium: {\n      name: 'millennium',\n      base: BASE_UNITS.TIME,\n      prefixes: PREFIXES.NONE,\n      value: 31557600000,\n      // Julian millennium\n      offset: 0\n    },\n    // Frequency\n    hertz: {\n      name: 'Hertz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    Hz: {\n      name: 'Hz',\n      base: BASE_UNITS.FREQUENCY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0,\n      reciprocal: true\n    },\n    // Angle\n    rad: {\n      name: 'rad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    radian: {\n      name: 'radian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // deg = rad / (2*pi) * 360 = rad / 0.017453292519943295769236907684888\n    deg: {\n      name: 'deg',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    degree: {\n      name: 'degree',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // grad = rad / (2*pi) * 400  = rad / 0.015707963267948966192313216916399\n    grad: {\n      name: 'grad',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.SHORT,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    gradian: {\n      name: 'gradian',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.LONG,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // cycle = rad / (2*pi) = rad / 6.2831853071795864769252867665793\n    cycle: {\n      name: 'cycle',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcsec = rad / (3600 * (360 / 2 * pi)) = rad / 0.0000048481368110953599358991410235795\n    arcsec: {\n      name: 'arcsec',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // arcmin = rad / (60 * (360 / 2 * pi)) = rad / 0.00029088820866572159615394846141477\n    arcmin: {\n      name: 'arcmin',\n      base: BASE_UNITS.ANGLE,\n      prefixes: PREFIXES.NONE,\n      value: null,\n      // will be filled in by calculateAngleValues()\n      offset: 0\n    },\n    // Electric current\n    A: {\n      name: 'A',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    ampere: {\n      name: 'ampere',\n      base: BASE_UNITS.CURRENT,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // Temperature\n    // K(C) = °C + 273.15\n    // K(F) = (°F + 459.67) * (5 / 9)\n    // K(R) = °R * (5 / 9)\n    K: {\n      name: 'K',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    degC: {\n      name: 'degC',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 273.15\n    },\n    degF: {\n      name: 'degF',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    degR: {\n      name: 'degR',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.SHORT,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    kelvin: {\n      name: 'kelvin',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    celsius: {\n      name: 'celsius',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 273.15\n    },\n    fahrenheit: {\n      name: 'fahrenheit',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 459.67\n    },\n    rankine: {\n      name: 'rankine',\n      base: BASE_UNITS.TEMPERATURE,\n      prefixes: PREFIXES.LONG,\n      value: new _Fraction(5, 9),\n      offset: 0\n    },\n    // amount of substance\n    mol: {\n      name: 'mol',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    mole: {\n      name: 'mole',\n      base: BASE_UNITS.AMOUNT_OF_SUBSTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // luminous intensity\n    cd: {\n      name: 'cd',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    candela: {\n      name: 'candela',\n      base: BASE_UNITS.LUMINOUS_INTENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    // TODO: units STERADIAN\n    // {name: 'sr', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n    // {name: 'steradian', base: BASE_UNITS.STERADIAN, prefixes: PREFIXES.NONE, value: 1, offset: 0},\n\n    // Force\n    N: {\n      name: 'N',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    newton: {\n      name: 'newton',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    dyn: {\n      name: 'dyn',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.SHORT,\n      value: 0.00001,\n      offset: 0\n    },\n    dyne: {\n      name: 'dyne',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 0.00001,\n      offset: 0\n    },\n    lbf: {\n      name: 'lbf',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    poundforce: {\n      name: 'poundforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 4.4482216152605,\n      offset: 0\n    },\n    kip: {\n      name: 'kip',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.LONG,\n      value: 4448.2216,\n      offset: 0\n    },\n    kilogramforce: {\n      name: 'kilogramforce',\n      base: BASE_UNITS.FORCE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    // Energy\n    J: {\n      name: 'J',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    joule: {\n      name: 'joule',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    erg: {\n      name: 'erg',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both kiloerg and kerg are acceptable\n      value: 1e-7,\n      offset: 0\n    },\n    Wh: {\n      name: 'Wh',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 3600,\n      offset: 0\n    },\n    BTU: {\n      name: 'BTU',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.BTU,\n      value: 1055.05585262,\n      offset: 0\n    },\n    eV: {\n      name: 'eV',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.SHORT,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    electronvolt: {\n      name: 'electronvolt',\n      base: BASE_UNITS.ENERGY,\n      prefixes: PREFIXES.LONG,\n      value: 1.602176565e-19,\n      offset: 0\n    },\n    // Power\n    W: {\n      name: 'W',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    watt: {\n      name: 'watt',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    hp: {\n      name: 'hp',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.NONE,\n      value: 745.6998715386,\n      offset: 0\n    },\n    // Electrical power units\n    VAR: {\n      name: 'VAR',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: Complex.I,\n      offset: 0\n    },\n    VA: {\n      name: 'VA',\n      base: BASE_UNITS.POWER,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Pressure\n    Pa: {\n      name: 'Pa',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    psi: {\n      name: 'psi',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 6894.75729276459,\n      offset: 0\n    },\n    atm: {\n      name: 'atm',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 101325,\n      offset: 0\n    },\n    bar: {\n      name: 'bar',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.SHORTLONG,\n      value: 100000,\n      offset: 0\n    },\n    torr: {\n      name: 'torr',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmHg: {\n      name: 'mmHg',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 133.322,\n      offset: 0\n    },\n    mmH2O: {\n      name: 'mmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 9.80665,\n      offset: 0\n    },\n    cmH2O: {\n      name: 'cmH2O',\n      base: BASE_UNITS.PRESSURE,\n      prefixes: PREFIXES.NONE,\n      value: 98.0665,\n      offset: 0\n    },\n    // Electric charge\n    coulomb: {\n      name: 'coulomb',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    C: {\n      name: 'C',\n      base: BASE_UNITS.ELECTRIC_CHARGE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric capacitance\n    farad: {\n      name: 'farad',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    F: {\n      name: 'F',\n      base: BASE_UNITS.ELECTRIC_CAPACITANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric potential\n    volt: {\n      name: 'volt',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    V: {\n      name: 'V',\n      base: BASE_UNITS.ELECTRIC_POTENTIAL,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric resistance\n    ohm: {\n      name: 'ohm',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORTLONG,\n      // Both Mohm and megaohm are acceptable\n      value: 1,\n      offset: 0\n    },\n    /*\n     * Unicode breaks in browsers if charset is not specified\n    Ω: {\n      name: 'Ω',\n      base: BASE_UNITS.ELECTRIC_RESISTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    */\n    // Electric inductance\n    henry: {\n      name: 'henry',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    H: {\n      name: 'H',\n      base: BASE_UNITS.ELECTRIC_INDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Electric conductance\n    siemens: {\n      name: 'siemens',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    S: {\n      name: 'S',\n      base: BASE_UNITS.ELECTRIC_CONDUCTANCE,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux\n    weber: {\n      name: 'weber',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    Wb: {\n      name: 'Wb',\n      base: BASE_UNITS.MAGNETIC_FLUX,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Magnetic flux density\n    tesla: {\n      name: 'tesla',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.LONG,\n      value: 1,\n      offset: 0\n    },\n    T: {\n      name: 'T',\n      base: BASE_UNITS.MAGNETIC_FLUX_DENSITY,\n      prefixes: PREFIXES.SHORT,\n      value: 1,\n      offset: 0\n    },\n    // Binary\n    b: {\n      name: 'b',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 1,\n      offset: 0\n    },\n    bits: {\n      name: 'bits',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 1,\n      offset: 0\n    },\n    B: {\n      name: 'B',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_SHORT,\n      value: 8,\n      offset: 0\n    },\n    bytes: {\n      name: 'bytes',\n      base: BASE_UNITS.BIT,\n      prefixes: PREFIXES.BINARY_LONG,\n      value: 8,\n      offset: 0\n    }\n  };\n\n  // aliases (formerly plurals)\n  var ALIASES = {\n    meters: 'meter',\n    inches: 'inch',\n    feet: 'foot',\n    yards: 'yard',\n    miles: 'mile',\n    links: 'link',\n    rods: 'rod',\n    chains: 'chain',\n    angstroms: 'angstrom',\n    lt: 'l',\n    litres: 'litre',\n    liter: 'litre',\n    liters: 'litre',\n    teaspoons: 'teaspoon',\n    tablespoons: 'tablespoon',\n    minims: 'minim',\n    fluiddrams: 'fluiddram',\n    fluidounces: 'fluidounce',\n    gills: 'gill',\n    cups: 'cup',\n    pints: 'pint',\n    quarts: 'quart',\n    gallons: 'gallon',\n    beerbarrels: 'beerbarrel',\n    oilbarrels: 'oilbarrel',\n    hogsheads: 'hogshead',\n    gtts: 'gtt',\n    grams: 'gram',\n    tons: 'ton',\n    tonnes: 'tonne',\n    grains: 'grain',\n    drams: 'dram',\n    ounces: 'ounce',\n    poundmasses: 'poundmass',\n    hundredweights: 'hundredweight',\n    sticks: 'stick',\n    lb: 'lbm',\n    lbs: 'lbm',\n    kips: 'kip',\n    kgf: 'kilogramforce',\n    acres: 'acre',\n    hectares: 'hectare',\n    sqfeet: 'sqft',\n    sqyard: 'sqyd',\n    sqmile: 'sqmi',\n    sqmiles: 'sqmi',\n    mmhg: 'mmHg',\n    mmh2o: 'mmH2O',\n    cmh2o: 'cmH2O',\n    seconds: 'second',\n    secs: 'second',\n    minutes: 'minute',\n    mins: 'minute',\n    hours: 'hour',\n    hr: 'hour',\n    hrs: 'hour',\n    days: 'day',\n    weeks: 'week',\n    months: 'month',\n    years: 'year',\n    decades: 'decade',\n    centuries: 'century',\n    millennia: 'millennium',\n    hertz: 'hertz',\n    radians: 'radian',\n    degrees: 'degree',\n    gradians: 'gradian',\n    cycles: 'cycle',\n    arcsecond: 'arcsec',\n    arcseconds: 'arcsec',\n    arcminute: 'arcmin',\n    arcminutes: 'arcmin',\n    BTUs: 'BTU',\n    watts: 'watt',\n    joules: 'joule',\n    amperes: 'ampere',\n    amps: 'ampere',\n    amp: 'ampere',\n    coulombs: 'coulomb',\n    volts: 'volt',\n    ohms: 'ohm',\n    farads: 'farad',\n    webers: 'weber',\n    teslas: 'tesla',\n    electronvolts: 'electronvolt',\n    moles: 'mole',\n    bit: 'bits',\n    byte: 'bytes'\n  };\n\n  /**\n   * Calculate the values for the angle units.\n   * Value is calculated as number or BigNumber depending on the configuration\n   * @param {{number: 'number' | 'BigNumber'}} config\n   */\n  function calculateAngleValues(config) {\n    if (config.number === 'BigNumber') {\n      var pi = createPi(_BigNumber);\n      UNITS.rad.value = new _BigNumber(1);\n      UNITS.deg.value = pi.div(180); // 2 * pi / 360\n      UNITS.grad.value = pi.div(200); // 2 * pi / 400\n      UNITS.cycle.value = pi.times(2); // 2 * pi\n      UNITS.arcsec.value = pi.div(648000); // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = pi.div(10800); // 2 * pi / 360 / 60\n    } else {\n      // number\n      UNITS.rad.value = 1;\n      UNITS.deg.value = Math.PI / 180; // 2 * pi / 360\n      UNITS.grad.value = Math.PI / 200; // 2 * pi / 400\n      UNITS.cycle.value = Math.PI * 2; // 2 * pi\n      UNITS.arcsec.value = Math.PI / 648000; // 2 * pi / 360 / 3600\n      UNITS.arcmin.value = Math.PI / 10800; // 2 * pi / 360 / 60\n    }\n\n    // copy to the full names of the angles\n    UNITS.radian.value = UNITS.rad.value;\n    UNITS.degree.value = UNITS.deg.value;\n    UNITS.gradian.value = UNITS.grad.value;\n  }\n\n  // apply the angle values now\n  calculateAngleValues(config);\n  if (on) {\n    // recalculate the values on change of configuration\n    on('config', function (curr, prev) {\n      if (curr.number !== prev.number) {\n        calculateAngleValues(curr);\n      }\n    });\n  }\n\n  /**\n   * A unit system is a set of dimensionally independent base units plus a set of derived units, formed by multiplication and division of the base units, that are by convention used with the unit system.\n   * A user perhaps could issue a command to select a preferred unit system, or use the default (see below).\n   * Auto unit system: The default unit system is updated on the fly anytime a unit is parsed. The corresponding unit in the default unit system is updated, so that answers are given in the same units the user supplies.\n   */\n  var UNIT_SYSTEMS = {\n    si: {\n      // Base units\n      NONE: {\n        unit: UNIT_NONE,\n        prefix: PREFIXES.NONE['']\n      },\n      LENGTH: {\n        unit: UNITS.m,\n        prefix: PREFIXES.SHORT['']\n      },\n      MASS: {\n        unit: UNITS.g,\n        prefix: PREFIXES.SHORT.k\n      },\n      TIME: {\n        unit: UNITS.s,\n        prefix: PREFIXES.SHORT['']\n      },\n      CURRENT: {\n        unit: UNITS.A,\n        prefix: PREFIXES.SHORT['']\n      },\n      TEMPERATURE: {\n        unit: UNITS.K,\n        prefix: PREFIXES.SHORT['']\n      },\n      LUMINOUS_INTENSITY: {\n        unit: UNITS.cd,\n        prefix: PREFIXES.SHORT['']\n      },\n      AMOUNT_OF_SUBSTANCE: {\n        unit: UNITS.mol,\n        prefix: PREFIXES.SHORT['']\n      },\n      ANGLE: {\n        unit: UNITS.rad,\n        prefix: PREFIXES.SHORT['']\n      },\n      BIT: {\n        unit: UNITS.bits,\n        prefix: PREFIXES.SHORT['']\n      },\n      // Derived units\n      FORCE: {\n        unit: UNITS.N,\n        prefix: PREFIXES.SHORT['']\n      },\n      ENERGY: {\n        unit: UNITS.J,\n        prefix: PREFIXES.SHORT['']\n      },\n      POWER: {\n        unit: UNITS.W,\n        prefix: PREFIXES.SHORT['']\n      },\n      PRESSURE: {\n        unit: UNITS.Pa,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CHARGE: {\n        unit: UNITS.C,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CAPACITANCE: {\n        unit: UNITS.F,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_POTENTIAL: {\n        unit: UNITS.V,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_RESISTANCE: {\n        unit: UNITS.ohm,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_INDUCTANCE: {\n        unit: UNITS.H,\n        prefix: PREFIXES.SHORT['']\n      },\n      ELECTRIC_CONDUCTANCE: {\n        unit: UNITS.S,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX: {\n        unit: UNITS.Wb,\n        prefix: PREFIXES.SHORT['']\n      },\n      MAGNETIC_FLUX_DENSITY: {\n        unit: UNITS.T,\n        prefix: PREFIXES.SHORT['']\n      },\n      FREQUENCY: {\n        unit: UNITS.Hz,\n        prefix: PREFIXES.SHORT['']\n      }\n    }\n  };\n\n  // Clone to create the other unit systems\n  UNIT_SYSTEMS.cgs = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.cgs.LENGTH = {\n    unit: UNITS.m,\n    prefix: PREFIXES.SHORT.c\n  };\n  UNIT_SYSTEMS.cgs.MASS = {\n    unit: UNITS.g,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.FORCE = {\n    unit: UNITS.dyn,\n    prefix: PREFIXES.SHORT['']\n  };\n  UNIT_SYSTEMS.cgs.ENERGY = {\n    unit: UNITS.erg,\n    prefix: PREFIXES.NONE['']\n  };\n  // there are wholly 4 unique cgs systems for electricity and magnetism,\n  // so let's not worry about it unless somebody complains\n\n  UNIT_SYSTEMS.us = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n  UNIT_SYSTEMS.us.LENGTH = {\n    unit: UNITS.ft,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.MASS = {\n    unit: UNITS.lbm,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.TEMPERATURE = {\n    unit: UNITS.degF,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.FORCE = {\n    unit: UNITS.lbf,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.ENERGY = {\n    unit: UNITS.BTU,\n    prefix: PREFIXES.BTU['']\n  };\n  UNIT_SYSTEMS.us.POWER = {\n    unit: UNITS.hp,\n    prefix: PREFIXES.NONE['']\n  };\n  UNIT_SYSTEMS.us.PRESSURE = {\n    unit: UNITS.psi,\n    prefix: PREFIXES.NONE['']\n  };\n\n  // Add additional unit systems here.\n\n  // Choose a unit system to seed the auto unit system.\n  UNIT_SYSTEMS.auto = JSON.parse(JSON.stringify(UNIT_SYSTEMS.si));\n\n  // Set the current unit system\n  var currentUnitSystem = UNIT_SYSTEMS.auto;\n\n  /**\n   * Set a unit system for formatting derived units.\n   * @param {string} [name] The name of the unit system.\n   */\n  Unit.setUnitSystem = function (name) {\n    if (hasOwnProperty(UNIT_SYSTEMS, name)) {\n      currentUnitSystem = UNIT_SYSTEMS[name];\n    } else {\n      throw new Error('Unit system ' + name + ' does not exist. Choices are: ' + Object.keys(UNIT_SYSTEMS).join(', '));\n    }\n  };\n\n  /**\n   * Return the current unit system.\n   * @return {string} The current unit system.\n   */\n  Unit.getUnitSystem = function () {\n    for (var _key in UNIT_SYSTEMS) {\n      if (hasOwnProperty(UNIT_SYSTEMS, _key)) {\n        if (UNIT_SYSTEMS[_key] === currentUnitSystem) {\n          return _key;\n        }\n      }\n    }\n  };\n\n  /**\n   * Converters to convert from number to an other numeric type like BigNumber\n   * or Fraction\n   */\n  Unit.typeConverters = {\n    BigNumber: function BigNumber(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return new _BigNumber(x.n).div(x.d).times(x.s);\n      return new _BigNumber(x + ''); // stringify to prevent constructor error\n    },\n\n    Fraction: function Fraction(x) {\n      return new _Fraction(x);\n    },\n    Complex: function Complex(x) {\n      return x;\n    },\n    number: function number(x) {\n      if (x !== null && x !== void 0 && x.isFraction) return _number(x);\n      return x;\n    }\n  };\n\n  /**\n   * Retrieve the right converter function corresponding with this unit's\n   * value\n   *\n   * @memberof Unit\n   * @return {Function}\n   */\n  Unit.prototype._numberConverter = function () {\n    var convert = Unit.typeConverters[this.valueType()];\n    if (convert) {\n      return convert;\n    }\n    throw new TypeError('Unsupported Unit value type \"' + this.valueType() + '\"');\n  };\n\n  /**\n   * Retrieve the right convertor function corresponding with the type\n   * of provided exampleValue.\n   *\n   * @param {string} type   A string 'number', 'BigNumber', or 'Fraction'\n   *                        In case of an unknown type,\n   * @return {Function}\n   */\n  Unit._getNumberConverter = function (type) {\n    if (!Unit.typeConverters[type]) {\n      throw new TypeError('Unsupported type \"' + type + '\"');\n    }\n    return Unit.typeConverters[type];\n  };\n\n  // Add dimensions to each built-in unit\n  for (var _key2 in UNITS) {\n    if (hasOwnProperty(UNITS, _key2)) {\n      var unit = UNITS[_key2];\n      unit.dimensions = unit.base.dimensions;\n    }\n  }\n\n  // Create aliases\n  for (var _name2 in ALIASES) {\n    if (hasOwnProperty(ALIASES, _name2)) {\n      var _unit2 = UNITS[ALIASES[_name2]];\n      var alias = {};\n      for (var _key3 in _unit2) {\n        if (hasOwnProperty(_unit2, _key3)) {\n          alias[_key3] = _unit2[_key3];\n        }\n      }\n      alias.name = _name2;\n      UNITS[_name2] = alias;\n    }\n  }\n\n  /**\n   * Checks if a character is a valid latin letter (upper or lower case).\n   * Note that this function can be overridden, for example to allow support of other alphabets.\n   * @param {string} c Tested character\n   */\n  Unit.isValidAlpha = function isValidAlpha(c) {\n    return /^[a-zA-Z]$/.test(c);\n  };\n  function assertUnitNameIsValid(name) {\n    for (var i = 0; i < name.length; i++) {\n      c = name.charAt(i);\n      if (i === 0 && !Unit.isValidAlpha(c)) {\n        throw new Error('Invalid unit name (must begin with alpha character): \"' + name + '\"');\n      }\n      if (i > 0 && !(Unit.isValidAlpha(c) || isDigit(c))) {\n        throw new Error('Invalid unit name (only alphanumeric characters are allowed): \"' + name + '\"');\n      }\n    }\n  }\n\n  /**\n   * Wrapper around createUnitSingle.\n   * Example:\n   *  createUnit({\n   *    foo: { },\n   *    bar: {\n   *      definition: 'kg/foo',\n   *      aliases: ['ba', 'barr', 'bars'],\n   *      offset: 200\n   *    },\n   *    baz: '4 bar'\n   *  },\n   *  {\n   *    override: true\n   *  })\n   * @param {object} obj      Object map. Each key becomes a unit which is defined by its value.\n   * @param {object} options\n   */\n  Unit.createUnit = function (obj, options) {\n    if (typeof obj !== 'object') {\n      throw new TypeError(\"createUnit expects first parameter to be of type 'Object'\");\n    }\n\n    // Remove all units and aliases we are overriding\n    if (options && options.override) {\n      for (var _key4 in obj) {\n        if (hasOwnProperty(obj, _key4)) {\n          Unit.deleteUnit(_key4);\n        }\n        if (obj[_key4].aliases) {\n          for (var i = 0; i < obj[_key4].aliases.length; i++) {\n            Unit.deleteUnit(obj[_key4].aliases[i]);\n          }\n        }\n      }\n    }\n\n    // TODO: traverse multiple times until all units have been added\n    var lastUnit;\n    for (var _key5 in obj) {\n      if (hasOwnProperty(obj, _key5)) {\n        lastUnit = Unit.createUnitSingle(_key5, obj[_key5]);\n      }\n    }\n    return lastUnit;\n  };\n\n  /**\n   * Create a user-defined unit and register it with the Unit type.\n   * Example:\n   *  createUnitSingle('knot', '0.514444444 m/s')\n   *  createUnitSingle('acre', new Unit(43560, 'ft^2'))\n   *\n   * @param {string} name      The name of the new unit. Must be unique. Example: 'knot'\n   * @param {string, Unit, Object} definition      Definition of the unit in terms\n   * of existing units. For example, '0.514444444 m / s'. Can be a Unit, a string,\n   * or an Object. If an Object, may have the following properties:\n   *   - definition {string|Unit} The definition of this unit.\n   *   - prefixes {string} \"none\", \"short\", \"long\", \"binary_short\", or \"binary_long\".\n   *     The default is \"none\".\n   *   - aliases {Array} Array of strings. Example: ['knots', 'kt', 'kts']\n   *   - offset {Numeric} An offset to apply when converting from the unit. For\n   *     example, the offset for celsius is 273.15 and the offset for farhenheit\n   *     is 459.67. Default is 0.\n   *   - baseName {string} If the unit's dimension does not match that of any other\n   *     base unit, the name of the newly create base unit. Otherwise, this property\n   *     has no effect.\n   *\n   * @return {Unit}\n   */\n  Unit.createUnitSingle = function (name, obj) {\n    if (typeof obj === 'undefined' || obj === null) {\n      obj = {};\n    }\n    if (typeof name !== 'string') {\n      throw new TypeError(\"createUnitSingle expects first parameter to be of type 'string'\");\n    }\n\n    // Check collisions with existing units\n    if (hasOwnProperty(UNITS, name)) {\n      throw new Error('Cannot create unit \"' + name + '\": a unit with that name already exists');\n    }\n\n    // TODO: Validate name for collisions with other built-in functions (like abs or cos, for example), and for acceptable variable names. For example, '42' is probably not a valid unit. Nor is '%', since it is also an operator.\n\n    assertUnitNameIsValid(name);\n    var defUnit = null; // The Unit from which the new unit will be created.\n    var aliases = [];\n    var offset = 0;\n    var definition;\n    var prefixes;\n    var baseName;\n    if (obj && obj.type === 'Unit') {\n      defUnit = obj.clone();\n    } else if (typeof obj === 'string') {\n      if (obj !== '') {\n        definition = obj;\n      }\n    } else if (typeof obj === 'object') {\n      definition = obj.definition;\n      prefixes = obj.prefixes;\n      offset = obj.offset;\n      baseName = obj.baseName;\n      if (obj.aliases) {\n        aliases = obj.aliases.valueOf(); // aliases could be a Matrix, so convert to Array\n      }\n    } else {\n      throw new TypeError('Cannot create unit \"' + name + '\" from \"' + obj.toString() + '\": expecting \"string\" or \"Unit\" or \"Object\"');\n    }\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        if (hasOwnProperty(UNITS, aliases[i])) {\n          throw new Error('Cannot create alias \"' + aliases[i] + '\": a unit with that name already exists');\n        }\n      }\n    }\n    if (definition && typeof definition === 'string' && !defUnit) {\n      try {\n        defUnit = Unit.parse(definition, {\n          allowNoUnits: true\n        });\n      } catch (ex) {\n        ex.message = 'Could not create unit \"' + name + '\" from \"' + definition + '\": ' + ex.message;\n        throw ex;\n      }\n    } else if (definition && definition.type === 'Unit') {\n      defUnit = definition.clone();\n    }\n    aliases = aliases || [];\n    offset = offset || 0;\n    if (prefixes && prefixes.toUpperCase) {\n      prefixes = PREFIXES[prefixes.toUpperCase()] || PREFIXES.NONE;\n    } else {\n      prefixes = PREFIXES.NONE;\n    }\n\n    // If defUnit is null, it is because the user did not\n    // specify a defintion. So create a new base dimension.\n    var newUnit = {};\n    if (!defUnit) {\n      // Add a new base dimension\n      baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n      if (BASE_DIMENSIONS.indexOf(baseName) >= 0) {\n        throw new Error('Cannot create new base unit \"' + name + '\": a base unit with that name already exists (and cannot be overridden)');\n      }\n      BASE_DIMENSIONS.push(baseName);\n\n      // Push 0 onto existing base units\n      for (var b in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, b)) {\n          BASE_UNITS[b].dimensions[BASE_DIMENSIONS.length - 1] = 0;\n        }\n      }\n\n      // Add the new base unit\n      var newBaseUnit = {\n        dimensions: []\n      };\n      for (var _i6 = 0; _i6 < BASE_DIMENSIONS.length; _i6++) {\n        newBaseUnit.dimensions[_i6] = 0;\n      }\n      newBaseUnit.dimensions[BASE_DIMENSIONS.length - 1] = 1;\n      newBaseUnit.key = baseName;\n      BASE_UNITS[baseName] = newBaseUnit;\n      newUnit = {\n        name,\n        value: 1,\n        dimensions: BASE_UNITS[baseName].dimensions.slice(0),\n        prefixes,\n        offset,\n        base: BASE_UNITS[baseName]\n      };\n      currentUnitSystem[baseName] = {\n        unit: newUnit,\n        prefix: PREFIXES.NONE['']\n      };\n    } else {\n      newUnit = {\n        name,\n        value: defUnit.value,\n        dimensions: defUnit.dimensions.slice(0),\n        prefixes,\n        offset\n      };\n\n      // Create a new base if no matching base exists\n      var anyMatch = false;\n      for (var _i7 in BASE_UNITS) {\n        if (hasOwnProperty(BASE_UNITS, _i7)) {\n          var match = true;\n          for (var j = 0; j < BASE_DIMENSIONS.length; j++) {\n            if (Math.abs((newUnit.dimensions[j] || 0) - (BASE_UNITS[_i7].dimensions[j] || 0)) > 1e-12) {\n              match = false;\n              break;\n            }\n          }\n          if (match) {\n            anyMatch = true;\n            newUnit.base = BASE_UNITS[_i7];\n            break;\n          }\n        }\n      }\n      if (!anyMatch) {\n        baseName = baseName || name + '_STUFF'; // foo --> foo_STUFF, or the essence of foo\n        // Add the new base unit\n        var _newBaseUnit = {\n          dimensions: defUnit.dimensions.slice(0)\n        };\n        _newBaseUnit.key = baseName;\n        BASE_UNITS[baseName] = _newBaseUnit;\n        currentUnitSystem[baseName] = {\n          unit: newUnit,\n          prefix: PREFIXES.NONE['']\n        };\n        newUnit.base = BASE_UNITS[baseName];\n      }\n    }\n    Unit.UNITS[name] = newUnit;\n    for (var _i8 = 0; _i8 < aliases.length; _i8++) {\n      var aliasName = aliases[_i8];\n      var _alias = {};\n      for (var _key6 in newUnit) {\n        if (hasOwnProperty(newUnit, _key6)) {\n          _alias[_key6] = newUnit[_key6];\n        }\n      }\n      _alias.name = aliasName;\n      Unit.UNITS[aliasName] = _alias;\n    }\n    // delete the memoization cache, since adding a new unit to the array\n    // invalidates all old results\n    delete _findUnit.cache;\n    return new Unit(null, name);\n  };\n  Unit.deleteUnit = function (name) {\n    delete Unit.UNITS[name];\n  };\n\n  // expose arrays with prefixes, dimensions, units, systems\n  Unit.PREFIXES = PREFIXES;\n  Unit.BASE_DIMENSIONS = BASE_DIMENSIONS;\n  Unit.BASE_UNITS = BASE_UNITS;\n  Unit.UNIT_SYSTEMS = UNIT_SYSTEMS;\n  Unit.UNITS = UNITS;\n  return Unit;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}