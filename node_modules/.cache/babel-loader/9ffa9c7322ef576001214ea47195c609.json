{"ast":null,"code":"var exec = require('child_process').exec;\n\nvar util = require('util');\n\nvar linuxProvider = '/sbin/iwlist';\n\nfunction parseIwlist(terms, str) {\n  var out = str.replace(/^\\s+/mg, '');\n  out = out.split('\\n');\n  var cells = [];\n  var line;\n  var info = {};\n  var fields = {\n    'mac': new RegExp('^' + terms.Cell + ' \\\\d+ - ' + terms.Address + ': (.*)'),\n    'ssid': new RegExp('^' + terms.ESSID + ':\"(.*)\"'),\n    'channel': new RegExp('^' + terms.Channel + ':(.*)'),\n    // 'protocol' : /^Protocol:(.*)/,\n    // 'mode' : /^Mode:(.*)/,\n    // 'frequency' : /^Frequency:(.*)/,\n    // 'encryption_key' : /Encryption key:(.*)/,\n    // 'bitrates' : /Bit Rates:(.*)/,\n    // 'quality' : /Quality(?:=|\\:)([^\\s]+)/,\n    'signal_level': new RegExp(terms['Signal level'] + '(?:=|\\\\:)([-\\\\w]+)')\n  };\n\n  for (var i = 0, l = out.length; i < l; i++) {\n    line = out[i].trim();\n\n    if (!line.length) {\n      continue;\n    }\n\n    if (line.match(terms[\"Scan completed :\"])) {\n      continue;\n    }\n\n    if (line.match(terms[\"Interface doesn't support scanning.\"])) {\n      continue;\n    }\n\n    if (line.match(fields.mac)) {\n      cells.push(info);\n      info = {};\n    }\n\n    for (var field in fields) {\n      if (line.match(fields[field])) {\n        info[field] = fields[field].exec(line)[1].trim();\n      }\n    }\n  }\n\n  cells.push(info);\n  cells.shift();\n  return cells;\n}\n\nfunction scan(terms, callback) {\n  var new_env = util._extend(process.env, {\n    LANG: \"en\"\n  });\n\n  exec(linuxProvider + ' scan', new_env, function (err, stdout, stderr) {\n    if (err) {\n      callback(err, null);\n      return;\n    }\n\n    callback(null, parseIwlist(terms, stdout));\n  });\n}\n\nexports.scan = scan;\nexports.utility = linuxProvider;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/node-wifiscanner2/lib/iwlist.js"],"names":["exec","require","util","linuxProvider","parseIwlist","terms","str","out","replace","split","cells","line","info","fields","RegExp","Cell","Address","ESSID","Channel","i","l","length","trim","match","mac","push","field","shift","scan","callback","new_env","_extend","process","env","LANG","err","stdout","stderr","exports","utility"],"mappings":"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","sourcesContent":["var exec = require('child_process').exec;\nvar util = require('util');\nvar linuxProvider = '/sbin/iwlist';\n\nfunction parseIwlist(terms, str) {\n    var out = str.replace(/^\\s+/mg, '');\n    out = out.split('\\n');\n    var cells = [];\n    var line;\n    var info = {};\n    var fields = {\n        'mac' : new RegExp('^' + terms.Cell + ' \\\\d+ - ' + terms.Address + ': (.*)'),\n        'ssid' : new RegExp('^' + terms.ESSID + ':\"(.*)\"'),\n        'channel': new RegExp('^' + terms.Channel + ':(.*)'),\n        // 'protocol' : /^Protocol:(.*)/,\n        // 'mode' : /^Mode:(.*)/,\n        // 'frequency' : /^Frequency:(.*)/,\n        // 'encryption_key' : /Encryption key:(.*)/,\n        // 'bitrates' : /Bit Rates:(.*)/,\n        // 'quality' : /Quality(?:=|\\:)([^\\s]+)/,\n        'signal_level' : new RegExp(terms['Signal level'] + '(?:=|\\\\:)([-\\\\w]+)')\n    };\n\n    for (var i=0,l=out.length; i<l; i++) {\n        line = out[i].trim();\n\n        if (!line.length) {\n            continue;\n        }\n        if (line.match(terms[\"Scan completed :\"])) {\n            continue;\n        }\n        if (line.match(terms[\"Interface doesn't support scanning.\"])) {\n            continue;\n        }\n\n        if (line.match(fields.mac)) {\n            cells.push(info);\n            info = {};\n        }\n\n        for (var field in fields) {\n            if (line.match(fields[field])) {\n                info[field] = (fields[field].exec(line)[1]).trim();\n            }\n        }\n    }\n    cells.push(info);\n    cells.shift();\n    return cells;\n}\n\nfunction scan(terms, callback) {\n    var new_env = util._extend(process.env, { LANG: \"en\" });\n    exec(linuxProvider + ' scan', new_env, function (err, stdout, stderr) {\n        if (err) {\n            callback(err, null);\n            return;\n        }\n        callback(null, parseIwlist(terms, stdout));\n    });\n}\n\nexports.scan = scan;\nexports.utility = linuxProvider;\n"]},"metadata":{},"sourceType":"script"}