{"ast":null,"code":"import math from 'math';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = math.matrix(initialEstimate);\n    this.covariance = math.matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = math.multiply(this.covariance, math.divide(this.estimate, math.add(this.lambda, math.multiply(measurement, this.covariance, measurement)))); // Update estimate\n\n    this.estimate = math.add(this.estimate, math.multiply(gain, math.subtract(measurement, math.multiply(measurement, this.estimate)))); // Update covariance\n\n    this.covariance = math.multiply(this.covariance, math.inv(math.add(math.identity(this.covariance.size()[0]), math.multiply(math.multiply(measurement, this.covariance), measurement))));\n    return this.estimate.toArray();\n  }\n\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/src/pages/AdjustPsotion/SensorFusion.js"],"names":["math","AdaptiveFilter","constructor","initialEstimate","initialCovariance","lambda","estimate","matrix","covariance","update","measurement","gain","multiply","divide","add","subtract","inv","identity","size","toArray"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,iBAAlB,EAAqCC,MAArC,EAA6C;AACtD,SAAKC,QAAL,GAAgBN,IAAI,CAACO,MAAL,CAAYJ,eAAZ,CAAhB;AACA,SAAKK,UAAL,GAAkBR,IAAI,CAACO,MAAL,CAAYH,iBAAZ,CAAlB;AACA,SAAKC,MAAL,GAAcA,MAAd,CAHsD,CAGhC;AACvB;;AAEDI,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB;AACA,UAAMC,IAAI,GAAGX,IAAI,CAACY,QAAL,CACX,KAAKJ,UADM,EAEXR,IAAI,CAACa,MAAL,CAAY,KAAKP,QAAjB,EAA2BN,IAAI,CAACc,GAAL,CAAS,KAAKT,MAAd,EAAsBL,IAAI,CAACY,QAAL,CAAcF,WAAd,EAA2B,KAAKF,UAAhC,EAA4CE,WAA5C,CAAtB,CAA3B,CAFW,CAAb,CAFkB,CAOlB;;AACA,SAAKJ,QAAL,GAAgBN,IAAI,CAACc,GAAL,CAAS,KAAKR,QAAd,EAAwBN,IAAI,CAACY,QAAL,CAAcD,IAAd,EAAoBX,IAAI,CAACe,QAAL,CAAcL,WAAd,EAA2BV,IAAI,CAACY,QAAL,CAAcF,WAAd,EAA2B,KAAKJ,QAAhC,CAA3B,CAApB,CAAxB,CAAhB,CARkB,CAUlB;;AACA,SAAKE,UAAL,GAAkBR,IAAI,CAACY,QAAL,CAAc,KAAKJ,UAAnB,EAA+BR,IAAI,CAACgB,GAAL,CAAShB,IAAI,CAACc,GAAL,CAASd,IAAI,CAACiB,QAAL,CAAc,KAAKT,UAAL,CAAgBU,IAAhB,GAAuB,CAAvB,CAAd,CAAT,EAAmDlB,IAAI,CAACY,QAAL,CAAcZ,IAAI,CAACY,QAAL,CAAcF,WAAd,EAA2B,KAAKF,UAAhC,CAAd,EAA2DE,WAA3D,CAAnD,CAAT,CAA/B,CAAlB;AAEA,WAAO,KAAKJ,QAAL,CAAca,OAAd,EAAP;AACD;;AArBkB","sourcesContent":["import math from 'math';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = math.matrix(initialEstimate);\n    this.covariance = math.matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = math.multiply(\n      this.covariance,\n      math.divide(this.estimate, math.add(this.lambda, math.multiply(measurement, this.covariance, measurement)))\n    );\n\n    // Update estimate\n    this.estimate = math.add(this.estimate, math.multiply(gain, math.subtract(measurement, math.multiply(measurement, this.estimate))));\n\n    // Update covariance\n    this.covariance = math.multiply(this.covariance, math.inv(math.add(math.identity(this.covariance.size()[0]), math.multiply(math.multiply(measurement, this.covariance), measurement))));\n\n    return this.estimate.toArray();\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}