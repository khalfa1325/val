{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix', 'concat'];\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    matrix,\n    pow,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var powScalarSignatures = {};\n\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n\n  var powScalar = typed(powScalarSignatures);\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/dotPow.js"],"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo11xS0s","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createDotPow","_ref","typed","equalScalar","matrix","pow","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo11xS0s","matAlgo12xSfs","matrixAlgorithmSuite","powScalarSignatures","signature","signatures","Object","prototype","hasOwnProperty","call","includes","powScalar","elop","SS","DS","Ss","sS"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,QAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,aAAV,EAAyB,QAAzB,EAAmC,KAAnC,EAA0C,aAA1C,EAAyD,QAAzD,CAAnB;AACA,OAAO,IAAIC,YAAY,GAAG,eAAeR,OAAO,CAACM,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC3E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,WAFE;AAGFC,IAAAA,MAHE;AAIFC,IAAAA,GAJE;AAKFC,IAAAA,WALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AAQA,MAAIO,aAAa,GAAGf,mBAAmB,CAAC;AACtCS,IAAAA;AADsC,GAAD,CAAvC;AAGA,MAAIO,aAAa,GAAGf,mBAAmB,CAAC;AACtCQ,IAAAA,KADsC;AAEtCI,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAII,aAAa,GAAGf,mBAAmB,CAAC;AACtCO,IAAAA,KADsC;AAEtCC,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIQ,aAAa,GAAGf,mBAAmB,CAAC;AACtCM,IAAAA,KADsC;AAEtCI,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIM,oBAAoB,GAAGf,0BAA0B,CAAC;AACpDK,IAAAA,KADoD;AAEpDE,IAAAA,MAFoD;AAGpDG,IAAAA;AAHoD,GAAD,CAArD;AAKA,MAAIM,mBAAmB,GAAG,EAA1B;;AACA,OAAK,IAAIC,SAAT,IAAsBT,GAAG,CAACU,UAA1B,EAAsC;AACpC,QAAIC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCd,GAAG,CAACU,UAAzC,EAAqDD,SAArD,CAAJ,EAAqE;AACnE,UAAI,CAACA,SAAS,CAACM,QAAV,CAAmB,QAAnB,CAAD,IAAiC,CAACN,SAAS,CAACM,QAAV,CAAmB,OAAnB,CAAtC,EAAmE;AACjEP,QAAAA,mBAAmB,CAACC,SAAD,CAAnB,GAAiCT,GAAG,CAACU,UAAJ,CAAeD,SAAf,CAAjC;AACD;AACF;AACF;;AACD,MAAIO,SAAS,GAAGnB,KAAK,CAACW,mBAAD,CAArB;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOX,KAAK,CAACJ,IAAD,EAAOc,oBAAoB,CAAC;AACtCU,IAAAA,IAAI,EAAED,SADgC;AAEtCE,IAAAA,EAAE,EAAEd,aAFkC;AAGtCe,IAAAA,EAAE,EAAEhB,aAHkC;AAItCiB,IAAAA,EAAE,EAAEf,aAJkC;AAKtCgB,IAAAA,EAAE,EAAEf;AALkC,GAAD,CAA3B,CAAZ;AAOD,CArE+C,CAAzC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'dotPow';\nvar dependencies = ['typed', 'equalScalar', 'matrix', 'pow', 'DenseMatrix', 'concat'];\nexport var createDotPow = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    matrix,\n    pow,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var powScalarSignatures = {};\n  for (var signature in pow.signatures) {\n    if (Object.prototype.hasOwnProperty.call(pow.signatures, signature)) {\n      if (!signature.includes('Matrix') && !signature.includes('Array')) {\n        powScalarSignatures[signature] = pow.signatures[signature];\n      }\n    }\n  }\n  var powScalar = typed(powScalarSignatures);\n\n  /**\n   * Calculates the power of x to y element wise.\n   *\n   * Syntax:\n   *\n   *    math.dotPow(x, y)\n   *\n   * Examples:\n   *\n   *    math.dotPow(2, 3)            // returns number 8\n   *\n   *    const a = [[1, 2], [4, 3]]\n   *    math.dotPow(a, 2)            // returns Array [[1, 4], [16, 9]]\n   *    math.pow(a, 2)               // returns Array [[9, 8], [16, 17]]\n   *\n   * See also:\n   *\n   *    pow, sqrt, multiply\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x  The base\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y  The exponent\n   * @return {number | BigNumber | Complex | Unit | Array | Matrix}                     The value of `x` to the power `y`\n   */\n  return typed(name, matrixAlgorithmSuite({\n    elop: powScalar,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo11xS0s,\n    sS: matAlgo12xSfs\n  }));\n});"]},"metadata":{},"sourceType":"module"}