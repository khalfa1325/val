{"ast":null,"code":"import { createMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['typed', 'parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     math.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node '1 + 2'\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node '1 + 2'\n   *     math.simplify('x+y', {x:2, y: math.parse('x+x')}).toString() // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n\n  function _resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set(); // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n\n    if (!scope) {\n      return node;\n    }\n\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n\n      var value = scope.get(node.name);\n\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return _resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(_resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n\n      return new FunctionNode(node.name, _args);\n    } // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n\n\n    return node.map(child => _resolve(child, scope, within));\n  }\n\n  return typed('resolve', {\n    Node: _resolve,\n    'Node, Map | null | undefined': _resolve,\n    'Node, Object': (n, scope) => _resolve(n, createMap(scope)),\n    // For arrays and matrices, we map `self` rather than `_resolve`\n    // because resolve is fairly expensive anyway, and this way\n    // we get nice error messages if one entry in the array has wrong type.\n    'Array | Matrix': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array | Matrix, null | undefined': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array, Object': typed.referTo('Array,Map', selfAM => (A, scope) => selfAM(A, createMap(scope))),\n    'Matrix, Object': typed.referTo('Matrix,Map', selfMM => (A, scope) => selfMM(A, createMap(scope))),\n    'Array | Matrix, Map': typed.referToSelf(self => (A, scope) => A.map(n => self(n, scope)))\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/resolve.js"],"names":["createMap","isFunctionNode","isNode","isOperatorNode","isParenthesisNode","isSymbolNode","factory","name","dependencies","createResolve","_ref","typed","parse","ConstantNode","FunctionNode","OperatorNode","ParenthesisNode","_resolve","node","scope","within","arguments","length","undefined","Set","has","variables","Array","from","join","ReferenceError","concat","value","get","nextWithin","add","String","args","map","arg","op","fn","implicit","content","_args","child","Node","n","referToSelf","self","A","referTo","selfAM","selfMM"],"mappings":"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","sourcesContent":["import { createMap } from '../../utils/map.js';\nimport { isFunctionNode, isNode, isOperatorNode, isParenthesisNode, isSymbolNode } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'resolve';\nvar dependencies = ['typed', 'parse', 'ConstantNode', 'FunctionNode', 'OperatorNode', 'ParenthesisNode'];\nexport var createResolve = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    ConstantNode,\n    FunctionNode,\n    OperatorNode,\n    ParenthesisNode\n  } = _ref;\n  /**\n   * resolve(expr, scope) replaces variable nodes with their scoped values\n   *\n   * Syntax:\n   *\n   *     math.resolve(expr, scope)\n   *\n   * Examples:\n   *\n   *     math.resolve('x + y', {x:1, y:2})           // Node '1 + 2'\n   *     math.resolve(math.parse('x+y'), {x:1, y:2}) // Node '1 + 2'\n   *     math.simplify('x+y', {x:2, y: math.parse('x+x')}).toString() // \"6\"\n   *\n   * See also:\n   *\n   *     simplify, evaluate\n   *\n   * @param {Node | Node[]} node\n   *     The expression tree (or trees) to be simplified\n   * @param {Object} scope\n   *     Scope specifying variables to be resolved\n   * @return {Node | Node[]} Returns `node` with variables recursively substituted.\n   * @throws {ReferenceError}\n   *     If there is a cyclic dependency among the variables in `scope`,\n   *     resolution is impossible and a ReferenceError is thrown.\n   */\n  function _resolve(node, scope) {\n    var within = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n    // note `within`:\n    // `within` is not documented, since it is for internal cycle\n    // detection only\n    if (!scope) {\n      return node;\n    }\n    if (isSymbolNode(node)) {\n      if (within.has(node.name)) {\n        var variables = Array.from(within).join(', ');\n        throw new ReferenceError(\"recursive loop of variable definitions among {\".concat(variables, \"}\"));\n      }\n      var value = scope.get(node.name);\n      if (isNode(value)) {\n        var nextWithin = new Set(within);\n        nextWithin.add(node.name);\n        return _resolve(value, scope, nextWithin);\n      } else if (typeof value === 'number') {\n        return parse(String(value));\n      } else if (value !== undefined) {\n        return new ConstantNode(value);\n      } else {\n        return node;\n      }\n    } else if (isOperatorNode(node)) {\n      var args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new OperatorNode(node.op, node.fn, args, node.implicit);\n    } else if (isParenthesisNode(node)) {\n      return new ParenthesisNode(_resolve(node.content, scope, within));\n    } else if (isFunctionNode(node)) {\n      var _args = node.args.map(function (arg) {\n        return _resolve(arg, scope, within);\n      });\n      return new FunctionNode(node.name, _args);\n    }\n\n    // Otherwise just recursively resolve any children (might also work\n    // for some of the above special cases)\n    return node.map(child => _resolve(child, scope, within));\n  }\n  return typed('resolve', {\n    Node: _resolve,\n    'Node, Map | null | undefined': _resolve,\n    'Node, Object': (n, scope) => _resolve(n, createMap(scope)),\n    // For arrays and matrices, we map `self` rather than `_resolve`\n    // because resolve is fairly expensive anyway, and this way\n    // we get nice error messages if one entry in the array has wrong type.\n    'Array | Matrix': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array | Matrix, null | undefined': typed.referToSelf(self => A => A.map(n => self(n))),\n    'Array, Object': typed.referTo('Array,Map', selfAM => (A, scope) => selfAM(A, createMap(scope))),\n    'Matrix, Object': typed.referTo('Matrix,Map', selfMM => (A, scope) => selfMM(A, createMap(scope))),\n    'Array | Matrix, Map': typed.referToSelf(self => (A, scope) => A.map(n => self(n, scope)))\n  });\n});"]},"metadata":{},"sourceType":"module"}