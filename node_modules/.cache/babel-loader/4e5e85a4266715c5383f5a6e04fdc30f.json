{"ast":null,"code":"import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isEmptyIndex, validateIndex, validateIndexSourceSize } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix', 'zeros', 'add'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    zeros,\n    add\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))             // returns 3\n   *     math.subset(d, math.index([0, 1], 1))        // returns [[2], [4]]\n   *     math.subset(d, math.index([false, true], 0)) // returns [[3]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 0, 6], [0, 7, 0]]\n   *     math.subset(g, math.index([false, true], 1), 8)          // returns [[5, 0, 6], [0, 8, 0]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1, 2, 3], [4, 5, 6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  return typed(name, {\n    // get subset\n    'Matrix, Index': function MatrixIndex(value, index) {\n      if (isEmptyIndex(index)) {\n        return matrix();\n      }\n\n      validateIndexSourceSize(value, index);\n      return value.subset(index);\n    },\n    'Array, Index': typed.referTo('Matrix, Index', function (subsetRef) {\n      return function (value, index) {\n        var subsetResult = subsetRef(matrix(value), index);\n        return index.isScalar() ? subsetResult : subsetResult.valueOf();\n      };\n    }),\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      if (isEmptyIndex(index)) {\n        return value;\n      }\n\n      validateIndexSourceSize(value, index);\n      return value.clone().subset(index, _broadcastReplacement(replacement, index), defaultValue);\n    },\n    'Array, Index, any, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement, defaultValue) {\n        var subsetResult = subsetRef(matrix(value), index, replacement, defaultValue);\n        return subsetResult.isMatrix ? subsetResult.valueOf() : subsetResult;\n      };\n    }),\n    'Array, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(matrix(value), index, replacement, undefined).valueOf();\n      };\n    }),\n    'Matrix, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(value, index, replacement, undefined);\n      };\n    }),\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n  /**\n   * Broadcasts a replacment value to be the same size as index\n   * @param {number | BigNumber | Array | Matrix} replacement Replacement value to try to broadcast\n   * @param {*} index Index value\n   * @returns broadcasted replacement that matches the size of index\n   */\n\n  function _broadcastReplacement(replacement, index) {\n    if (typeof replacement === 'string') {\n      throw new Error('can\\'t boradcast a string');\n    }\n\n    if (index._isScalar) {\n      return replacement;\n    }\n\n    var indexSize = index.size();\n\n    if (indexSize.every(d => d > 0)) {\n      try {\n        return add(replacement, zeros(indexSize));\n      } catch (error) {\n        return replacement;\n      }\n    } else {\n      return replacement;\n    }\n  }\n});\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\n\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (isEmptyIndex(index)) {\n    return '';\n  }\n\n  validateIndexSourceSize(Array.from(str), index);\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be used when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\n\n\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n\n  if (isEmptyIndex(index)) {\n    return str;\n  }\n\n  validateIndexSourceSize(Array.from(str), index);\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n\n  var range = index.dimension(0);\n  var len = range.size()[0];\n\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  } // validate whether the range is out of range\n\n\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]); // copy the string into an array with characters\n\n  var chars = [];\n\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  }); // initialize undefined characters with a space\n\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n\n  return chars.join('');\n}\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\n\n\nfunction _getObjectProperty(object, index) {\n  if (isEmptyIndex(index)) {\n    return undefined;\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  return getSafeProperty(object, key);\n}\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\n\n\nfunction _setObjectProperty(object, index, replacement) {\n  if (isEmptyIndex(index)) {\n    return object;\n  }\n\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n\n  var key = index.dimension(0);\n\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  } // clone the object, and apply the property to the clone\n\n\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/matrix/subset.js"],"names":["isIndex","clone","isEmptyIndex","validateIndex","validateIndexSourceSize","getSafeProperty","setSafeProperty","DimensionError","factory","name","dependencies","createSubset","_ref","typed","matrix","zeros","add","MatrixIndex","value","index","subset","referTo","subsetRef","subsetResult","isScalar","valueOf","_getObjectProperty","_getSubstring","MatrixIndexAnyAny","replacement","defaultValue","_broadcastReplacement","isMatrix","undefined","_setSubstring","_setObjectProperty","Error","_isScalar","indexSize","size","every","d","error","str","TypeError","Array","from","length","strLen","min","max","range","dimension","substr","forEach","v","charAt","len","chars","i","_i","_len","join","object","key","updated"],"mappings":"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","sourcesContent":["import { isIndex } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isEmptyIndex, validateIndex, validateIndexSourceSize } from '../../utils/array.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'subset';\nvar dependencies = ['typed', 'matrix', 'zeros', 'add'];\nexport var createSubset = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    zeros,\n    add\n  } = _ref;\n  /**\n   * Get or set a subset of a matrix or string.\n   *\n   * Syntax:\n   *     math.subset(value, index)                                // retrieve a subset\n   *     math.subset(value, index, replacement [, defaultValue])  // replace a subset\n   *\n   * Examples:\n   *\n   *     // get a subset\n   *     const d = [[1, 2], [3, 4]]\n   *     math.subset(d, math.index(1, 0))             // returns 3\n   *     math.subset(d, math.index([0, 1], 1))        // returns [[2], [4]]\n   *     math.subset(d, math.index([false, true], 0)) // returns [[3]]\n   *\n   *     // replace a subset\n   *     const e = []\n   *     const f = math.subset(e, math.index(0, [0, 2]), [5, 6])  // f = [[5, 0, 6]]\n   *     const g = math.subset(f, math.index(1, 1), 7, 0)         // g = [[5, 0, 6], [0, 7, 0]]\n   *     math.subset(g, math.index([false, true], 1), 8)          // returns [[5, 0, 6], [0, 8, 0]]\n   *\n   *     // get submatrix using ranges\n   *     const M = [\n   *       [1,2,3],\n   *       [4,5,6],\n   *       [7,8,9]\n   *     ]\n   *     math.subset(M, math.index(math.range(0,2), math.range(0,3))) // [[1, 2, 3], [4, 5, 6]]\n   *\n   * See also:\n   *\n   *     size, resize, squeeze, index\n   *\n   * @param {Array | Matrix | string} matrix  An array, matrix, or string\n   * @param {Index} index\n   *    For each dimension of the target, specifies an index or a list of\n   *    indices to fetch or set. `subset` uses the cartesian product of\n   *    the indices specified in each dimension.\n   * @param {*} [replacement]                 An array, matrix, or scalar.\n   *                                          If provided, the subset is replaced with replacement.\n   *                                          If not provided, the subset is returned\n   * @param {*} [defaultValue=undefined]      Default value, filled in on new entries when\n   *                                          the matrix is resized. If not provided,\n   *                                          math.matrix elements will be left undefined.\n   * @return {Array | Matrix | string} Either the retrieved subset or the updated matrix.\n   */\n\n  return typed(name, {\n    // get subset\n    'Matrix, Index': function MatrixIndex(value, index) {\n      if (isEmptyIndex(index)) {\n        return matrix();\n      }\n      validateIndexSourceSize(value, index);\n      return value.subset(index);\n    },\n    'Array, Index': typed.referTo('Matrix, Index', function (subsetRef) {\n      return function (value, index) {\n        var subsetResult = subsetRef(matrix(value), index);\n        return index.isScalar() ? subsetResult : subsetResult.valueOf();\n      };\n    }),\n    'Object, Index': _getObjectProperty,\n    'string, Index': _getSubstring,\n    // set subset\n    'Matrix, Index, any, any': function MatrixIndexAnyAny(value, index, replacement, defaultValue) {\n      if (isEmptyIndex(index)) {\n        return value;\n      }\n      validateIndexSourceSize(value, index);\n      return value.clone().subset(index, _broadcastReplacement(replacement, index), defaultValue);\n    },\n    'Array, Index, any, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement, defaultValue) {\n        var subsetResult = subsetRef(matrix(value), index, replacement, defaultValue);\n        return subsetResult.isMatrix ? subsetResult.valueOf() : subsetResult;\n      };\n    }),\n    'Array, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(matrix(value), index, replacement, undefined).valueOf();\n      };\n    }),\n    'Matrix, Index, any': typed.referTo('Matrix, Index, any, any', function (subsetRef) {\n      return function (value, index, replacement) {\n        return subsetRef(value, index, replacement, undefined);\n      };\n    }),\n    'string, Index, string': _setSubstring,\n    'string, Index, string, string': _setSubstring,\n    'Object, Index, any': _setObjectProperty\n  });\n\n  /**\n   * Broadcasts a replacment value to be the same size as index\n   * @param {number | BigNumber | Array | Matrix} replacement Replacement value to try to broadcast\n   * @param {*} index Index value\n   * @returns broadcasted replacement that matches the size of index\n   */\n\n  function _broadcastReplacement(replacement, index) {\n    if (typeof replacement === 'string') {\n      throw new Error('can\\'t boradcast a string');\n    }\n    if (index._isScalar) {\n      return replacement;\n    }\n    var indexSize = index.size();\n    if (indexSize.every(d => d > 0)) {\n      try {\n        return add(replacement, zeros(indexSize));\n      } catch (error) {\n        return replacement;\n      }\n    } else {\n      return replacement;\n    }\n  }\n});\n\n/**\n * Retrieve a subset of a string\n * @param {string} str            string from which to get a substring\n * @param {Index} index           An index or list of indices (character positions)\n * @returns {string} substring\n * @private\n */\nfunction _getSubstring(str, index) {\n  if (!isIndex(index)) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (isEmptyIndex(index)) {\n    return '';\n  }\n  validateIndexSourceSize(Array.from(str), index);\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0], strLen);\n  validateIndex(index.max()[0], strLen);\n  var range = index.dimension(0);\n  var substr = '';\n  range.forEach(function (v) {\n    substr += str.charAt(v);\n  });\n  return substr;\n}\n\n/**\n * Replace a substring in a string\n * @param {string} str            string to be replaced\n * @param {Index} index           An index or list of indices (character positions)\n * @param {string} replacement    Replacement string\n * @param {string} [defaultValue] Default value to be used when resizing\n *                                the string. is ' ' by default\n * @returns {string} result\n * @private\n */\nfunction _setSubstring(str, index, replacement, defaultValue) {\n  if (!index || index.isIndex !== true) {\n    // TODO: better error message\n    throw new TypeError('Index expected');\n  }\n  if (isEmptyIndex(index)) {\n    return str;\n  }\n  validateIndexSourceSize(Array.from(str), index);\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size().length, 1);\n  }\n  if (defaultValue !== undefined) {\n    if (typeof defaultValue !== 'string' || defaultValue.length !== 1) {\n      throw new TypeError('Single character expected as defaultValue');\n    }\n  } else {\n    defaultValue = ' ';\n  }\n  var range = index.dimension(0);\n  var len = range.size()[0];\n  if (len !== replacement.length) {\n    throw new DimensionError(range.size()[0], replacement.length);\n  }\n\n  // validate whether the range is out of range\n  var strLen = str.length;\n  validateIndex(index.min()[0]);\n  validateIndex(index.max()[0]);\n\n  // copy the string into an array with characters\n  var chars = [];\n  for (var i = 0; i < strLen; i++) {\n    chars[i] = str.charAt(i);\n  }\n  range.forEach(function (v, i) {\n    chars[v] = replacement.charAt(i[0]);\n  });\n\n  // initialize undefined characters with a space\n  if (chars.length > strLen) {\n    for (var _i = strLen - 1, _len = chars.length; _i < _len; _i++) {\n      if (!chars[_i]) {\n        chars[_i] = defaultValue;\n      }\n    }\n  }\n  return chars.join('');\n}\n\n/**\n * Retrieve a property from an object\n * @param {Object} object\n * @param {Index} index\n * @return {*} Returns the value of the property\n * @private\n */\nfunction _getObjectProperty(object, index) {\n  if (isEmptyIndex(index)) {\n    return undefined;\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n  return getSafeProperty(object, key);\n}\n\n/**\n * Set a property on an object\n * @param {Object} object\n * @param {Index} index\n * @param {*} replacement\n * @return {*} Returns the updated object\n * @private\n */\nfunction _setObjectProperty(object, index, replacement) {\n  if (isEmptyIndex(index)) {\n    return object;\n  }\n  if (index.size().length !== 1) {\n    throw new DimensionError(index.size(), 1);\n  }\n  var key = index.dimension(0);\n  if (typeof key !== 'string') {\n    throw new TypeError('String expected as index to retrieve an object property');\n  }\n\n  // clone the object, and apply the property to the clone\n  var updated = clone(object);\n  setSafeProperty(updated, key, replacement);\n  return updated;\n}"]},"metadata":{},"sourceType":"module"}