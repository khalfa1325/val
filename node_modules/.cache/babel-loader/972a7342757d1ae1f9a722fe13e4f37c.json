{"ast":null,"code":"import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'deepEqual', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    deepEqual,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *\n    *    math.distance([x1,y1], [x2,y2])\n    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})\n    *    math.distance([x1,y1,z1], [x2,y2,z2])\n    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})\n    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])\n    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])\n    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])\n    *    math.distance([pointX,pointY], [a,b,c])\n    *    math.distance([pointX,pointY], [lineOnePtX,lineOnePtY], [lineTwoPtX,lineTwoPtY])\n    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})\n    *    math.distance([pointX,pointY,pointZ], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([0, 0], [3, 0], [0, 4])        // Returns 2.4\n    *    math.distance(\n    *     {pointX: 0, pointY: 0},\n    *     {lineOnePtX: 3, lineOnePtY: 0},\n    *     {lineTwoPtX: 0, lineTwoPtY: 4})                // Returns 2.4\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n\n        if (deepEqual(y, z)) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n\n        var xCoeff = subtract(z[1], y[1]);\n        var yCoeff = subtract(y[0], z[0]);\n        var constant = subtract(multiplyScalar(z[0], y[1]), multiplyScalar(y[0], z[1]));\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n\n        if (deepEqual(_objectToArray(y), _objectToArray(z))) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var xCoeff = subtract(z.lineTwoPtY, y.lineOnePtY);\n          var yCoeff = subtract(y.lineOnePtX, z.lineTwoPtX);\n          var constant = subtract(multiplyScalar(z.lineTwoPtX, y.lineOnePtY), multiplyScalar(y.lineOnePtX, z.lineTwoPtY));\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n\n      return _distancePairwise(arr);\n    }\n  });\n\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n\n    return a.every(_isNumber);\n  }\n\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n\n    return a;\n  }\n\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n\n    return true;\n  }\n\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n\n    return sqrt(result);\n  }\n\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n\n    return result;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/geometry/distance.js"],"names":["isBigNumber","factory","name","dependencies","createDistance","_ref","typed","addScalar","subtract","multiplyScalar","divideScalar","deepEqual","sqrt","abs","ArrayArrayArray","x","y","z","length","_2d","TypeError","xCoeff","yCoeff","constant","_distancePointLine2D","ObjectObjectObject","Object","keys","_objectToArray","lineTwoPtY","lineOnePtY","lineOnePtX","lineTwoPtX","pointX","pointY","ArrayArray","_3d","_parametricLine","_distancePointLine3D","_containsOnlyNumbers","_euclideanDistance","ObjectObject","xCoeffLine","yCoeffLine","pointZ","x0","y0","z0","a","b","c","pointOneX","pointOneY","pointTwoX","pointTwoY","pointOneZ","pointTwoZ","Array","arr","_pairwise","_distancePairwise","_isNumber","constructor","isArray","every","o","i","push","some","aI","num","den","vectorSize","result","diff","pointA","pointB","j"],"mappings":"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","sourcesContent":["import { isBigNumber } from '../../utils/is.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'distance';\nvar dependencies = ['typed', 'addScalar', 'subtract', 'divideScalar', 'multiplyScalar', 'deepEqual', 'sqrt', 'abs'];\nexport var createDistance = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    addScalar,\n    subtract,\n    multiplyScalar,\n    divideScalar,\n    deepEqual,\n    sqrt,\n    abs\n  } = _ref;\n  /**\n    * Calculates:\n    *    The eucledian distance between two points in N-dimensional spaces.\n    *    Distance between point and a line in 2 and 3 dimensional spaces.\n    *    Pairwise distance between a set of 2D or 3D points\n    * NOTE:\n    *    When substituting coefficients of a line(a, b and c), use ax + by + c = 0 instead of ax + by = c\n    *    For parametric equation of a 3D line, x0, y0, z0, a, b, c are from: (x−x0, y−y0, z−z0) = t(a, b, c)\n    *\n    * Syntax:\n    *\n    *    math.distance([x1,y1], [x2,y2])\n    *    math.distance({pointOneX, pointOneY}, {pointTwoX, pointTwoY})\n    *    math.distance([x1,y1,z1], [x2,y2,z2])\n    *    math.distance({pointOneX, pointOneY, pointOneZ}, {pointTwoX, pointTwoY, pointTwoZ})\n    *    math.distance([x1,y1,z1,a1], [x2,y2,z2,a2])\n    *    math.distance([[x1,y1], [x2,y2], [x3,y3]])\n    *    math.distance([[x1,y1,z1], [x2,y2,z2], [x3,y3,z3]])\n    *    math.distance([pointX,pointY], [a,b,c])\n    *    math.distance([pointX,pointY], [lineOnePtX,lineOnePtY], [lineTwoPtX,lineTwoPtY])\n    *    math.distance({pointX, pointY}, {lineOnePtX, lineOnePtY}, {lineTwoPtX, lineTwoPtY})\n    *    math.distance([pointX,pointY,pointZ], [x0, y0, z0, a, b, c])\n    *    math.distance({pointX, pointY, pointZ}, {x0, y0, z0, a, b, c})\n    *\n    * Examples:\n    *    math.distance([0,0], [4,4])                     // Returns 5.656854249492381\n    *    math.distance(\n    *     {pointOneX: 0, pointOneY: 0},\n    *     {pointTwoX: 10, pointTwoY: 10})                // Returns 14.142135623730951\n    *    math.distance([1, 0, 1], [4, -2, 2])            // Returns 3.7416573867739413\n    *    math.distance(\n    *     {pointOneX: 4, pointOneY: 5, pointOneZ: 8},\n    *     {pointTwoX: 2, pointTwoY: 7, pointTwoZ: 9})    // Returns 3\n    *    math.distance([1, 0, 1, 0], [0, -1, 0, -1])     // Returns 2\n    *    math.distance([[1, 2], [1, 2], [1, 3]])         // Returns [0, 1, 1]\n    *    math.distance([[1,2,4], [1,2,6], [8,1,3]])      // Returns [2, 7.14142842854285, 7.681145747868608]\n    *    math.distance([10, 10], [8, 1, 3])              // Returns 11.535230316796387\n    *    math.distance([0, 0], [3, 0], [0, 4])        // Returns 2.4\n    *    math.distance(\n    *     {pointX: 0, pointY: 0},\n    *     {lineOnePtX: 3, lineOnePtY: 0},\n    *     {lineTwoPtX: 0, lineTwoPtY: 4})                // Returns 2.4\n    *    math.distance([2, 3, 1], [1, 1, 2, 5, 0, 1])    // Returns 2.3204774044612857\n    *    math.distance(\n    *     {pointX: 2, pointY: 3, pointZ: 1},\n    *     {x0: 1, y0: 1, z0: 2, a: 5, b: 0, c: 1})       // Returns 2.3204774044612857\n    *\n    * @param {Array | Matrix | Object} x    Co-ordinates of first point\n    * @param {Array | Matrix | Object} y    Co-ordinates of second point\n    * @return {Number | BigNumber} Returns the distance from two/three points\n  */\n  return typed(name, {\n    'Array, Array, Array': function ArrayArrayArray(x, y, z) {\n      // Point to Line 2D (x=Point, y=LinePoint1, z=LinePoint2)\n      if (x.length === 2 && y.length === 2 && z.length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for second argument');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for third argument');\n        }\n        if (deepEqual(y, z)) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n        var xCoeff = subtract(z[1], y[1]);\n        var yCoeff = subtract(y[0], z[0]);\n        var constant = subtract(multiplyScalar(z[0], y[1]), multiplyScalar(y[0], z[1]));\n        return _distancePointLine2D(x[0], x[1], xCoeff, yCoeff, constant);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object, Object': function ObjectObjectObject(x, y, z) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 2 && Object.keys(z).length === 2) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of lineOnePtX and lineOnePtY should be numbers or BigNumbers');\n        }\n        if (!_2d(z)) {\n          throw new TypeError('Values of lineTwoPtX and lineTwoPtY should be numbers or BigNumbers');\n        }\n        if (deepEqual(_objectToArray(y), _objectToArray(z))) {\n          throw new TypeError('LinePoint1 should not be same with LinePoint2');\n        }\n        if ('pointX' in x && 'pointY' in x && 'lineOnePtX' in y && 'lineOnePtY' in y && 'lineTwoPtX' in z && 'lineTwoPtY' in z) {\n          var xCoeff = subtract(z.lineTwoPtY, y.lineOnePtY);\n          var yCoeff = subtract(y.lineOnePtX, z.lineTwoPtX);\n          var constant = subtract(multiplyScalar(z.lineTwoPtX, y.lineOnePtY), multiplyScalar(y.lineOnePtX, z.lineTwoPtY));\n          return _distancePointLine2D(x.pointX, x.pointY, xCoeff, yCoeff, constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Array, Array': function ArrayArray(x, y) {\n      // Point to Line 2D (x=[pointX, pointY], y=[x-coeff, y-coeff, const])\n      if (x.length === 2 && y.length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Array with 2 numbers or BigNumbers expected for first argument');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine2D(x[0], x[1], y[0], y[1], y[2]);\n      } else if (x.length === 3 && y.length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Array with 3 numbers or BigNumbers expected for first argument');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Array with 6 numbers or BigNumbers expected for second argument');\n        }\n        return _distancePointLine3D(x[0], x[1], x[2], y[0], y[1], y[2], y[3], y[4], y[5]);\n      } else if (x.length === y.length && x.length > 0) {\n        // Point to Point N-dimensions\n        if (!_containsOnlyNumbers(x)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        if (!_containsOnlyNumbers(y)) {\n          throw new TypeError('All values of an array should be numbers or BigNumbers');\n        }\n        return _euclideanDistance(x, y);\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    'Object, Object': function ObjectObject(x, y) {\n      if (Object.keys(x).length === 2 && Object.keys(y).length === 3) {\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointX and pointY should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of xCoeffLine, yCoeffLine and constant should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'xCoeffLine' in y && 'yCoeffLine' in y && 'constant' in y) {\n          return _distancePointLine2D(x.pointX, x.pointY, y.xCoeffLine, y.yCoeffLine, y.constant);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 6) {\n        // Point to Line 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointX, pointY and pointZ should be numbers or BigNumbers');\n        }\n        if (!_parametricLine(y)) {\n          throw new TypeError('Values of x0, y0, z0, a, b and c should be numbers or BigNumbers');\n        }\n        if ('pointX' in x && 'pointY' in x && 'x0' in y && 'y0' in y && 'z0' in y && 'a' in y && 'b' in y && 'c' in y) {\n          return _distancePointLine3D(x.pointX, x.pointY, x.pointZ, y.x0, y.y0, y.z0, y.a, y.b, y.c);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 2 && Object.keys(y).length === 2) {\n        // Point to Point 2D\n        if (!_2d(x)) {\n          throw new TypeError('Values of pointOneX and pointOneY should be numbers or BigNumbers');\n        }\n        if (!_2d(y)) {\n          throw new TypeError('Values of pointTwoX and pointTwoY should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointTwoX' in y && 'pointTwoY' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY], [y.pointTwoX, y.pointTwoY]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else if (Object.keys(x).length === 3 && Object.keys(y).length === 3) {\n        // Point to Point 3D\n        if (!_3d(x)) {\n          throw new TypeError('Values of pointOneX, pointOneY and pointOneZ should be numbers or BigNumbers');\n        }\n        if (!_3d(y)) {\n          throw new TypeError('Values of pointTwoX, pointTwoY and pointTwoZ should be numbers or BigNumbers');\n        }\n        if ('pointOneX' in x && 'pointOneY' in x && 'pointOneZ' in x && 'pointTwoX' in y && 'pointTwoY' in y && 'pointTwoZ' in y) {\n          return _euclideanDistance([x.pointOneX, x.pointOneY, x.pointOneZ], [y.pointTwoX, y.pointTwoY, y.pointTwoZ]);\n        } else {\n          throw new TypeError('Key names do not match');\n        }\n      } else {\n        throw new TypeError('Invalid Arguments: Try again');\n      }\n    },\n    Array: function Array(arr) {\n      if (!_pairwise(arr)) {\n        throw new TypeError('Incorrect array format entered for pairwise distance calculation');\n      }\n      return _distancePairwise(arr);\n    }\n  });\n  function _isNumber(a) {\n    // distance supports numbers and bignumbers\n    return typeof a === 'number' || isBigNumber(a);\n  }\n  function _2d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]);\n  }\n  function _3d(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]);\n  }\n  function _containsOnlyNumbers(a) {\n    // checks if the number of arguments are correct in count and are valid (should be numbers)\n    if (!Array.isArray(a)) {\n      a = _objectToArray(a);\n    }\n    return a.every(_isNumber);\n  }\n  function _parametricLine(a) {\n    if (a.constructor !== Array) {\n      a = _objectToArray(a);\n    }\n    return _isNumber(a[0]) && _isNumber(a[1]) && _isNumber(a[2]) && _isNumber(a[3]) && _isNumber(a[4]) && _isNumber(a[5]);\n  }\n  function _objectToArray(o) {\n    var keys = Object.keys(o);\n    var a = [];\n    for (var i = 0; i < keys.length; i++) {\n      a.push(o[keys[i]]);\n    }\n    return a;\n  }\n  function _pairwise(a) {\n    // checks for valid arguments passed to _distancePairwise(Array)\n    if (a[0].length === 2 && _isNumber(a[0][0]) && _isNumber(a[0][1])) {\n      if (a.some(aI => aI.length !== 2 || !_isNumber(aI[0]) || !_isNumber(aI[1]))) {\n        return false;\n      }\n    } else if (a[0].length === 3 && _isNumber(a[0][0]) && _isNumber(a[0][1]) && _isNumber(a[0][2])) {\n      if (a.some(aI => aI.length !== 3 || !_isNumber(aI[0]) || !_isNumber(aI[1]) || !_isNumber(aI[2]))) {\n        return false;\n      }\n    } else {\n      return false;\n    }\n    return true;\n  }\n  function _distancePointLine2D(x, y, a, b, c) {\n    var num = abs(addScalar(addScalar(multiplyScalar(a, x), multiplyScalar(b, y)), c));\n    var den = sqrt(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)));\n    return divideScalar(num, den);\n  }\n  function _distancePointLine3D(x, y, z, x0, y0, z0, a, b, c) {\n    var num = [subtract(multiplyScalar(subtract(y0, y), c), multiplyScalar(subtract(z0, z), b)), subtract(multiplyScalar(subtract(z0, z), a), multiplyScalar(subtract(x0, x), c)), subtract(multiplyScalar(subtract(x0, x), b), multiplyScalar(subtract(y0, y), a))];\n    num = sqrt(addScalar(addScalar(multiplyScalar(num[0], num[0]), multiplyScalar(num[1], num[1])), multiplyScalar(num[2], num[2])));\n    var den = sqrt(addScalar(addScalar(multiplyScalar(a, a), multiplyScalar(b, b)), multiplyScalar(c, c)));\n    return divideScalar(num, den);\n  }\n  function _euclideanDistance(x, y) {\n    var vectorSize = x.length;\n    var result = 0;\n    var diff = 0;\n    for (var i = 0; i < vectorSize; i++) {\n      diff = subtract(x[i], y[i]);\n      result = addScalar(multiplyScalar(diff, diff), result);\n    }\n    return sqrt(result);\n  }\n  function _distancePairwise(a) {\n    var result = [];\n    var pointA = [];\n    var pointB = [];\n    for (var i = 0; i < a.length - 1; i++) {\n      for (var j = i + 1; j < a.length; j++) {\n        if (a[0].length === 2) {\n          pointA = [a[i][0], a[i][1]];\n          pointB = [a[j][0], a[j][1]];\n        } else if (a[0].length === 3) {\n          pointA = [a[i][0], a[i][1], a[i][2]];\n          pointB = [a[j][0], a[j][1], a[j][2]];\n        }\n        result.push(_euclideanDistance(pointA, pointB));\n      }\n    }\n    return result;\n  }\n});"]},"metadata":{},"sourceType":"module"}