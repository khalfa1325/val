{"ast":null,"code":"import { applyCallback } from '../../utils/applyCallback.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n/**\n * forEach for a multidimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\n\nfunction _forEach(array, callback) {\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      return applyCallback(callback, value, index, array, 'forEach');\n    }\n  };\n\n  recurse(array, []);\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/matrix/forEach.js"],"names":["applyCallback","forEach","forEachArray","factory","name","dependencies","createForEach","_ref","typed","_forEach","MatrixFunction","x","callback","array","recurse","value","index","Array","isArray","child","i","concat"],"mappings":"AAAA,SAASA,aAAT,QAA8B,8BAA9B;AACA,SAASC,OAAO,IAAIC,YAApB,QAAwC,sBAAxC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC5E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjB,uBAAmBK,QADF;AAEjB,wBAAoB,SAASC,cAAT,CAAwBC,CAAxB,EAA2BC,QAA3B,EAAqC;AACvDD,MAAAA,CAAC,CAACV,OAAF,CAAUW,QAAV;AACD;AAJgB,GAAP,CAAZ;AAMD,CAjCgD,CAA1C;AAmCP;AACA;AACA;AACA;AACA;AACA;;AACA,SAASH,QAAT,CAAkBI,KAAlB,EAAyBD,QAAzB,EAAmC;AACjC,MAAIE,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,KAAxB,EAA+B;AAC3C,QAAIC,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBb,MAAAA,YAAY,CAACa,KAAD,EAAQ,UAAUI,KAAV,EAAiBC,CAAjB,EAAoB;AACtC;AACAN,QAAAA,OAAO,CAACK,KAAD,EAAQH,KAAK,CAACK,MAAN,CAAaD,CAAb,CAAR,CAAP;AACD,OAHW,CAAZ;AAID,KALD,MAKO;AACL;AACA,aAAOpB,aAAa,CAACY,QAAD,EAAWG,KAAX,EAAkBC,KAAlB,EAAyBH,KAAzB,EAAgC,SAAhC,CAApB;AACD;AACF,GAVD;;AAWAC,EAAAA,OAAO,CAACD,KAAD,EAAQ,EAAR,CAAP;AACD","sourcesContent":["import { applyCallback } from '../../utils/applyCallback.js';\nimport { forEach as forEachArray } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'forEach';\nvar dependencies = ['typed'];\nexport var createForEach = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterate over all elements of a matrix/array, and executes the given callback function.\n   *\n   * Syntax:\n   *\n   *    math.forEach(x, callback)\n   *\n   * Examples:\n   *\n   *    math.forEach([1, 2, 3], function(value) {\n   *      console.log(value)\n   *    })\n   *    // outputs 1, 2, 3\n   *\n   * See also:\n   *\n   *    filter, map, sort\n   *\n   * @param {Matrix | Array} x    The matrix to iterate on.\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix/array being traversed.\n   */\n  return typed(name, {\n    'Array, function': _forEach,\n    'Matrix, function': function MatrixFunction(x, callback) {\n      x.forEach(callback);\n    }\n  });\n});\n\n/**\n * forEach for a multidimensional array\n * @param {Array} array\n * @param {Function} callback\n * @private\n */\nfunction _forEach(array, callback) {\n  var recurse = function recurse(value, index) {\n    if (Array.isArray(value)) {\n      forEachArray(value, function (child, i) {\n        // we create a copy of the index array and append the new index value\n        recurse(child, index.concat(i));\n      });\n    } else {\n      // invoke the callback function with the right number of arguments\n      return applyCallback(callback, value, index, array, 'forEach');\n    }\n  };\n  recurse(array, []);\n}"]},"metadata":{},"sourceType":"module"}