{"ast":null,"code":"import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { getOperator } from '../../expression/operators.js';\nimport { createUtil } from './simplify/util.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'simplifyCore';\nvar dependencies = ['typed', 'parse', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplifyCore = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  var nodeT = new ConstantNode(true);\n  var nodeF = new ConstantNode(false); // test if a node will always have a boolean value (true/false)\n  // not sure if this list is complete\n\n  function isAlwaysBoolean(node) {\n    return isOperatorNode(node) && ['and', 'not', 'or'].includes(node.op);\n  }\n\n  var {\n    hasProperty,\n    isCommutative\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. To roughly summarize,\n   * it handles cases along the lines of simplifyConstant() but where\n   * knowledge of a single argument is sufficient to determine the value.\n   * In contrast, simplify() extends simplifyCore() with additional passes\n   * to provide deeper simplification (such as gathering like terms).\n   *\n   * Specifically, simplifyCore:\n   *\n   * * Converts all function calls with operator equivalents to their\n   *   operator forms.\n   * * Removes operators or function calls that are guaranteed to have no\n   *   effect (such as unary '+').\n   * * Removes double unary '-', '~', and 'not'\n   * * Eliminates addition/subtraction of 0 and multiplication/division/powers\n   *   by 1 or 0.\n   * * Converts addition of a negation into subtraction.\n   * * Eliminates logical operations with constant true or false leading\n   *   arguments.\n   * * Puts constants on the left of a product, if multiplication is\n   *   considered commutative by the options (which is the default)\n   *\n   * Syntax:\n   *\n   *     math.simplifyCore(expr)\n   *     math.simplifyCore(expr, options)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (1 - 0)')\n   *     math.simplifyCore(f)                          // Node \"2 * x\"\n   *     math.simplify('2 * 1 * x ^ (1 - 0)', [math.simplifyCore]) // Node \"2 * x\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyConstant, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with basic simplifications applied\n   */\n\n  function _simplifyCore(nodeToSimplify) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var context = options ? options.context : undefined;\n\n    if (hasProperty(nodeToSimplify, 'trivial', context)) {\n      // This node does nothing if it has only one argument, so if so,\n      // return that argument simplified\n      if (isFunctionNode(nodeToSimplify) && nodeToSimplify.args.length === 1) {\n        return _simplifyCore(nodeToSimplify.args[0], options);\n      } // For other node types, we try the generic methods\n\n\n      var simpChild = false;\n      var childCount = 0;\n      nodeToSimplify.forEach(c => {\n        ++childCount;\n\n        if (childCount === 1) {\n          simpChild = _simplifyCore(c, options);\n        }\n      });\n\n      if (childCount === 1) {\n        return simpChild;\n      }\n    }\n\n    var node = nodeToSimplify;\n\n    if (isFunctionNode(node)) {\n      var op = getOperator(node.name);\n\n      if (op) {\n        // Replace FunctionNode with a new OperatorNode\n        if (node.args.length > 2 && hasProperty(node, 'associative', context)) {\n          // unflatten into binary operations since that's what simplifyCore handles\n          while (node.args.length > 2) {\n            var last = node.args.pop();\n            var seclast = node.args.pop();\n            node.args.push(new OperatorNode(op, node.name, [last, seclast]));\n          }\n        }\n\n        node = new OperatorNode(op, node.name, node.args);\n      } else {\n        return new FunctionNode(_simplifyCore(node.fn), node.args.map(n => _simplifyCore(n, options)));\n      }\n    }\n\n    if (isOperatorNode(node) && node.isUnary()) {\n      var a0 = _simplifyCore(node.args[0], options);\n\n      if (node.op === '~') {\n        // bitwise not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === '~') {\n          return a0.args[0];\n        }\n      }\n\n      if (node.op === 'not') {\n        // logical not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === 'not') {\n          // Has the effect of turning the argument into a boolean\n          // So can only eliminate the double negation if\n          // the inside is already boolean\n          if (isAlwaysBoolean(a0.args[0])) {\n            return a0.args[0];\n          }\n        }\n      }\n\n      var finish = true;\n\n      if (node.op === '-') {\n        // unary minus\n        if (isOperatorNode(a0)) {\n          if (a0.isBinary() && a0.fn === 'subtract') {\n            node = new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n            finish = false; // continue to process the new binary node\n          }\n\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          }\n        }\n      }\n\n      if (finish) return new OperatorNode(node.op, node.fn, [a0]);\n    }\n\n    if (isOperatorNode(node) && node.isBinary()) {\n      var _a = _simplifyCore(node.args[0], options);\n\n      var a1 = _simplifyCore(node.args[1], options);\n\n      if (node.op === '+') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return a1;\n        }\n\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          a1 = a1.args[0];\n          node = new OperatorNode('-', 'subtract', [_a, a1]);\n        }\n      }\n\n      if (node.op === '-') {\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          return _simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);\n        }\n\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return _simplifyCore(new OperatorNode('-', 'unaryMinus', [a1]));\n        }\n\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n\n      if (node.op === '*') {\n        if (isConstantNode(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          }\n        }\n\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n\n          if (isCommutative(node, context)) {\n            return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      }\n\n      if (node.op === '/') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return node0;\n        }\n\n        if (isConstantNode(a1) && equal(a1.value, 1)) {\n          return _a;\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n\n      if (node.op === '^') {\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n        }\n      }\n\n      if (node.op === 'and') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            if (isAlwaysBoolean(a1)) return a1;\n          } else {\n            return nodeF;\n          }\n        }\n\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            if (isAlwaysBoolean(_a)) return _a;\n          } else {\n            return nodeF;\n          }\n        }\n      }\n\n      if (node.op === 'or') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(a1)) return a1;\n          }\n        }\n\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(_a)) return _a;\n          }\n        }\n      }\n\n      return new OperatorNode(node.op, node.fn, [_a, a1]);\n    }\n\n    if (isOperatorNode(node)) {\n      return new OperatorNode(node.op, node.fn, node.args.map(a => _simplifyCore(a, options)));\n    }\n\n    if (isArrayNode(node)) {\n      return new ArrayNode(node.items.map(n => _simplifyCore(n, options)));\n    }\n\n    if (isAccessorNode(node)) {\n      return new AccessorNode(_simplifyCore(node.object, options), _simplifyCore(node.index, options));\n    }\n\n    if (isIndexNode(node)) {\n      return new IndexNode(node.dimensions.map(n => _simplifyCore(n, options)));\n    }\n\n    if (isObjectNode(node)) {\n      var newProps = {};\n\n      for (var prop in node.properties) {\n        newProps[prop] = _simplifyCore(node.properties[prop], options);\n      }\n\n      return new ObjectNode(newProps);\n    } // cannot simplify\n\n\n    return node;\n  }\n\n  return typed(name, {\n    Node: _simplifyCore,\n    'Node,Object': _simplifyCore\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/algebra/simplifyCore.js"],"names":["isAccessorNode","isArrayNode","isConstantNode","isFunctionNode","isIndexNode","isObjectNode","isOperatorNode","getOperator","createUtil","factory","name","dependencies","createSimplifyCore","_ref","typed","parse","equal","isZero","add","subtract","multiply","divide","pow","AccessorNode","ArrayNode","ConstantNode","FunctionNode","IndexNode","ObjectNode","OperatorNode","ParenthesisNode","SymbolNode","node0","node1","nodeT","nodeF","isAlwaysBoolean","node","includes","op","hasProperty","isCommutative","_simplifyCore","nodeToSimplify","options","arguments","length","undefined","context","args","simpChild","childCount","forEach","c","last","pop","seclast","push","fn","map","n","isUnary","a0","finish","isBinary","_a","a1","value","implicit","a","items","object","index","dimensions","newProps","prop","properties","Node"],"mappings":"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","sourcesContent":["import { isAccessorNode, isArrayNode, isConstantNode, isFunctionNode, isIndexNode, isObjectNode, isOperatorNode } from '../../utils/is.js';\nimport { getOperator } from '../../expression/operators.js';\nimport { createUtil } from './simplify/util.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'simplifyCore';\nvar dependencies = ['typed', 'parse', 'equal', 'isZero', 'add', 'subtract', 'multiply', 'divide', 'pow', 'AccessorNode', 'ArrayNode', 'ConstantNode', 'FunctionNode', 'IndexNode', 'ObjectNode', 'OperatorNode', 'ParenthesisNode', 'SymbolNode'];\nexport var createSimplifyCore = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    parse,\n    equal,\n    isZero,\n    add,\n    subtract,\n    multiply,\n    divide,\n    pow,\n    AccessorNode,\n    ArrayNode,\n    ConstantNode,\n    FunctionNode,\n    IndexNode,\n    ObjectNode,\n    OperatorNode,\n    ParenthesisNode,\n    SymbolNode\n  } = _ref;\n  var node0 = new ConstantNode(0);\n  var node1 = new ConstantNode(1);\n  var nodeT = new ConstantNode(true);\n  var nodeF = new ConstantNode(false);\n  // test if a node will always have a boolean value (true/false)\n  // not sure if this list is complete\n  function isAlwaysBoolean(node) {\n    return isOperatorNode(node) && ['and', 'not', 'or'].includes(node.op);\n  }\n  var {\n    hasProperty,\n    isCommutative\n  } = createUtil({\n    FunctionNode,\n    OperatorNode,\n    SymbolNode\n  });\n  /**\n   * simplifyCore() performs single pass simplification suitable for\n   * applications requiring ultimate performance. To roughly summarize,\n   * it handles cases along the lines of simplifyConstant() but where\n   * knowledge of a single argument is sufficient to determine the value.\n   * In contrast, simplify() extends simplifyCore() with additional passes\n   * to provide deeper simplification (such as gathering like terms).\n   *\n   * Specifically, simplifyCore:\n   *\n   * * Converts all function calls with operator equivalents to their\n   *   operator forms.\n   * * Removes operators or function calls that are guaranteed to have no\n   *   effect (such as unary '+').\n   * * Removes double unary '-', '~', and 'not'\n   * * Eliminates addition/subtraction of 0 and multiplication/division/powers\n   *   by 1 or 0.\n   * * Converts addition of a negation into subtraction.\n   * * Eliminates logical operations with constant true or false leading\n   *   arguments.\n   * * Puts constants on the left of a product, if multiplication is\n   *   considered commutative by the options (which is the default)\n   *\n   * Syntax:\n   *\n   *     math.simplifyCore(expr)\n   *     math.simplifyCore(expr, options)\n   *\n   * Examples:\n   *\n   *     const f = math.parse('2 * 1 * x ^ (1 - 0)')\n   *     math.simplifyCore(f)                          // Node \"2 * x\"\n   *     math.simplify('2 * 1 * x ^ (1 - 0)', [math.simplifyCore]) // Node \"2 * x\"\n   *\n   * See also:\n   *\n   *     simplify, simplifyConstant, resolve, derivative\n   *\n   * @param {Node | string} node\n   *     The expression to be simplified\n   * @param {Object} options\n   *     Simplification options, as per simplify()\n   * @return {Node} Returns expression with basic simplifications applied\n   */\n  function _simplifyCore(nodeToSimplify) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var context = options ? options.context : undefined;\n    if (hasProperty(nodeToSimplify, 'trivial', context)) {\n      // This node does nothing if it has only one argument, so if so,\n      // return that argument simplified\n      if (isFunctionNode(nodeToSimplify) && nodeToSimplify.args.length === 1) {\n        return _simplifyCore(nodeToSimplify.args[0], options);\n      }\n      // For other node types, we try the generic methods\n      var simpChild = false;\n      var childCount = 0;\n      nodeToSimplify.forEach(c => {\n        ++childCount;\n        if (childCount === 1) {\n          simpChild = _simplifyCore(c, options);\n        }\n      });\n      if (childCount === 1) {\n        return simpChild;\n      }\n    }\n    var node = nodeToSimplify;\n    if (isFunctionNode(node)) {\n      var op = getOperator(node.name);\n      if (op) {\n        // Replace FunctionNode with a new OperatorNode\n        if (node.args.length > 2 && hasProperty(node, 'associative', context)) {\n          // unflatten into binary operations since that's what simplifyCore handles\n          while (node.args.length > 2) {\n            var last = node.args.pop();\n            var seclast = node.args.pop();\n            node.args.push(new OperatorNode(op, node.name, [last, seclast]));\n          }\n        }\n        node = new OperatorNode(op, node.name, node.args);\n      } else {\n        return new FunctionNode(_simplifyCore(node.fn), node.args.map(n => _simplifyCore(n, options)));\n      }\n    }\n    if (isOperatorNode(node) && node.isUnary()) {\n      var a0 = _simplifyCore(node.args[0], options);\n      if (node.op === '~') {\n        // bitwise not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === '~') {\n          return a0.args[0];\n        }\n      }\n      if (node.op === 'not') {\n        // logical not\n        if (isOperatorNode(a0) && a0.isUnary() && a0.op === 'not') {\n          // Has the effect of turning the argument into a boolean\n          // So can only eliminate the double negation if\n          // the inside is already boolean\n          if (isAlwaysBoolean(a0.args[0])) {\n            return a0.args[0];\n          }\n        }\n      }\n      var finish = true;\n      if (node.op === '-') {\n        // unary minus\n        if (isOperatorNode(a0)) {\n          if (a0.isBinary() && a0.fn === 'subtract') {\n            node = new OperatorNode('-', 'subtract', [a0.args[1], a0.args[0]]);\n            finish = false; // continue to process the new binary node\n          }\n\n          if (a0.isUnary() && a0.op === '-') {\n            return a0.args[0];\n          }\n        }\n      }\n      if (finish) return new OperatorNode(node.op, node.fn, [a0]);\n    }\n    if (isOperatorNode(node) && node.isBinary()) {\n      var _a = _simplifyCore(node.args[0], options);\n      var a1 = _simplifyCore(node.args[1], options);\n      if (node.op === '+') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return a1;\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          a1 = a1.args[0];\n          node = new OperatorNode('-', 'subtract', [_a, a1]);\n        }\n      }\n      if (node.op === '-') {\n        if (isOperatorNode(a1) && a1.isUnary() && a1.op === '-') {\n          return _simplifyCore(new OperatorNode('+', 'add', [_a, a1.args[0]]), options);\n        }\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return _simplifyCore(new OperatorNode('-', 'unaryMinus', [a1]));\n        }\n        if (isConstantNode(a1) && isZero(a1.value)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '*') {\n        if (isConstantNode(_a)) {\n          if (isZero(_a.value)) {\n            return node0;\n          } else if (equal(_a.value, 1)) {\n            return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node0;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n          if (isCommutative(node, context)) {\n            return new OperatorNode(node.op, node.fn, [a1, _a], node.implicit); // constants on left\n          }\n        }\n\n        return new OperatorNode(node.op, node.fn, [_a, a1], node.implicit);\n      }\n      if (node.op === '/') {\n        if (isConstantNode(_a) && isZero(_a.value)) {\n          return node0;\n        }\n        if (isConstantNode(a1) && equal(a1.value, 1)) {\n          return _a;\n        }\n        return new OperatorNode(node.op, node.fn, [_a, a1]);\n      }\n      if (node.op === '^') {\n        if (isConstantNode(a1)) {\n          if (isZero(a1.value)) {\n            return node1;\n          } else if (equal(a1.value, 1)) {\n            return _a;\n          }\n        }\n      }\n      if (node.op === 'and') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            if (isAlwaysBoolean(a1)) return a1;\n          } else {\n            return nodeF;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            if (isAlwaysBoolean(_a)) return _a;\n          } else {\n            return nodeF;\n          }\n        }\n      }\n      if (node.op === 'or') {\n        if (isConstantNode(_a)) {\n          if (_a.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(a1)) return a1;\n          }\n        }\n        if (isConstantNode(a1)) {\n          if (a1.value) {\n            return nodeT;\n          } else {\n            if (isAlwaysBoolean(_a)) return _a;\n          }\n        }\n      }\n      return new OperatorNode(node.op, node.fn, [_a, a1]);\n    }\n    if (isOperatorNode(node)) {\n      return new OperatorNode(node.op, node.fn, node.args.map(a => _simplifyCore(a, options)));\n    }\n    if (isArrayNode(node)) {\n      return new ArrayNode(node.items.map(n => _simplifyCore(n, options)));\n    }\n    if (isAccessorNode(node)) {\n      return new AccessorNode(_simplifyCore(node.object, options), _simplifyCore(node.index, options));\n    }\n    if (isIndexNode(node)) {\n      return new IndexNode(node.dimensions.map(n => _simplifyCore(n, options)));\n    }\n    if (isObjectNode(node)) {\n      var newProps = {};\n      for (var prop in node.properties) {\n        newProps[prop] = _simplifyCore(node.properties[prop], options);\n      }\n      return new ObjectNode(newProps);\n    }\n    // cannot simplify\n    return node;\n  }\n  return typed(name, {\n    Node: _simplifyCore,\n    'Node,Object': _simplifyCore\n  });\n});"]},"metadata":{},"sourceType":"module"}