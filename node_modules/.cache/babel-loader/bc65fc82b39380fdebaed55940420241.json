{"ast":null,"code":"import { matrix, multiply, add, subtract, identity, divide, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = matrix(initialEstimate);\n    this.covariance = matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = multiply(this.covariance, divide(this.estimate, add(this.lambda, multiply(measurement, multiply(this.covariance, measurement))))); // Update estimate\n\n    this.estimate = add(this.estimate, multiply(gain, subtract(measurement, multiply(measurement, this.estimate)))); // Update covariance\n\n    this.covariance = multiply(this.covariance, inv(add(identity(this.covariance.size()[0]), multiply(multiply(measurement, this.covariance), measurement))));\n    return this.estimate.toArray();\n  }\n\n}\n\nexport default AdaptiveFilter;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/src/pages/AdjustPsotion/SensorFusion.js"],"names":["matrix","multiply","add","subtract","identity","divide","inv","AdaptiveFilter","constructor","initialEstimate","initialCovariance","lambda","estimate","covariance","update","measurement","gain","size","toArray"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,GAA3B,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,MAApD,EAA4DC,GAA5D,QAAuE,QAAvE;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,iBAAlB,EAAqCC,MAArC,EAA6C;AACtD,SAAKC,QAAL,GAAgBZ,MAAM,CAACS,eAAD,CAAtB;AACA,SAAKI,UAAL,GAAkBb,MAAM,CAACU,iBAAD,CAAxB;AACA,SAAKC,MAAL,GAAcA,MAAd,CAHsD,CAGhC;AACvB;;AAEDG,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB;AACA,UAAMC,IAAI,GAAGf,QAAQ,CACnB,KAAKY,UADc,EAEnBR,MAAM,CAAC,KAAKO,QAAN,EAAgBV,GAAG,CAAC,KAAKS,MAAN,EAAcV,QAAQ,CAACc,WAAD,EAAcd,QAAQ,CAAC,KAAKY,UAAN,EAAkBE,WAAlB,CAAtB,CAAtB,CAAnB,CAFa,CAArB,CAFkB,CAOlB;;AACA,SAAKH,QAAL,GAAgBV,GAAG,CAAC,KAAKU,QAAN,EAAgBX,QAAQ,CAACe,IAAD,EAAOb,QAAQ,CAACY,WAAD,EAAcd,QAAQ,CAACc,WAAD,EAAc,KAAKH,QAAnB,CAAtB,CAAf,CAAxB,CAAnB,CARkB,CAUlB;;AACA,SAAKC,UAAL,GAAkBZ,QAAQ,CAAC,KAAKY,UAAN,EAAkBP,GAAG,CAACJ,GAAG,CAACE,QAAQ,CAAC,KAAKS,UAAL,CAAgBI,IAAhB,GAAuB,CAAvB,CAAD,CAAT,EAAsChB,QAAQ,CAACA,QAAQ,CAACc,WAAD,EAAc,KAAKF,UAAnB,CAAT,EAAyCE,WAAzC,CAA9C,CAAJ,CAArB,CAA1B;AAEA,WAAO,KAAKH,QAAL,CAAcM,OAAd,EAAP;AACD;;AArBkB;;AAwBrB,eAAeX,cAAf","sourcesContent":["import { matrix, multiply, add, subtract, identity, divide, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = matrix(initialEstimate);\n    this.covariance = matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = multiply(\n      this.covariance,\n      divide(this.estimate, add(this.lambda, multiply(measurement, multiply(this.covariance, measurement))))\n    );\n\n    // Update estimate\n    this.estimate = add(this.estimate, multiply(gain, subtract(measurement, multiply(measurement, this.estimate))));\n\n    // Update covariance\n    this.covariance = multiply(this.covariance, inv(add(identity(this.covariance.size()[0]), multiply(multiply(measurement, this.covariance), measurement))));\n\n    return this.estimate.toArray();\n  }\n}\n\nexport default AdaptiveFilter;\n"]},"metadata":{},"sourceType":"module"}