{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'concat'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n\n    if (inv) {\n      root = root.neg();\n    }\n\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    } // edge cases zero and infinity\n\n\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n\n    var x = a.abs().pow(one.div(root)); // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/nthRoot.js"],"names":["factory","createMatAlgo01xDSid","createMatAlgo02xDS0","createMatAlgo06xS0S0","createMatAlgo11xS0s","createMatrixAlgorithmSuite","nthRootNumber","name","dependencies","createNthRoot","_ref","typed","matrix","equalScalar","BigNumber","_BigNumber","concat","matAlgo01xDSid","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","complexErr","Error","number","x","_bigNthRoot","Complex","Array","referTo","selfDn","valueOf","DenseMatrix","SparseMatrix","selfSn","referToSelf","self","y","density","selfDS","scalar","SD","Ss","sS","a","root","precision","Big","clone","zero","one","inv","isNegative","neg","isZero","abs","mod","equals","Infinity","isFinite","pow","div","isNeg","toPrecision","createNthRootNumber","_ref2"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo01xDSid } from '../../type/matrix/utils/matAlgo01xDSid.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { nthRootNumber } from '../../plain/number/index.js';\nvar name = 'nthRoot';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'BigNumber', 'concat'];\nexport var createNthRoot = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    BigNumber: _BigNumber,\n    concat\n  } = _ref;\n  var matAlgo01xDSid = createMatAlgo01xDSid({\n    typed\n  });\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Calculate the nth root of a value.\n   * The principal nth root of a positive real number A, is the positive real\n   * solution of the equation\n   *\n   *     x^root = A\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *     math.nthRoot(a)\n   *     math.nthRoot(a, root)\n   *\n   * Examples:\n   *\n   *     math.nthRoot(9, 2)    // returns 3 (since 3^2 == 9)\n   *     math.sqrt(9)          // returns 3 (since 3^2 == 9)\n   *     math.nthRoot(64, 3)   // returns 4 (since 4^3 == 64)\n   *\n   * See also:\n   *\n   *     sqrt, pow\n   *\n   * @param {number | BigNumber | Array | Matrix | Complex} a\n   *              Value for which to calculate the nth root\n   * @param {number | BigNumber} [root=2]    The root.\n   * @return {number | Complex | Array | Matrix} Returns the nth root of `a`\n   */\n  function complexErr() {\n    throw new Error('Complex number not supported in function nthRoot. Use nthRoots instead.');\n  }\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber,\n    BigNumber: x => _bigNthRoot(x, new _BigNumber(2)),\n    'BigNumber, BigNumber': _bigNthRoot,\n    Complex: complexErr,\n    'Complex, number': complexErr,\n    Array: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(matrix(x), 2).valueOf()),\n    DenseMatrix: typed.referTo('DenseMatrix,number', selfDn => x => selfDn(x, 2)),\n    SparseMatrix: typed.referTo('SparseMatrix,number', selfSn => x => selfSn(x, 2)),\n    'SparseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse + sparse\n        return matAlgo06xS0S0(x, y, self);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'DenseMatrix, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // dense + sparse\n        return matAlgo01xDSid(x, y, self, false);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    }),\n    'Array, SparseMatrix': typed.referTo('DenseMatrix,SparseMatrix', selfDS => (x, y) => selfDS(matrix(x), y)),\n    'number | BigNumber, SparseMatrix': typed.referToSelf(self => (x, y) => {\n      // density must be one (no zeros in matrix)\n      if (y.density() === 1) {\n        // sparse - scalar\n        return matAlgo11xS0s(y, x, self, true);\n      } else {\n        // throw exception\n        throw new Error('Root must be non-zero');\n      }\n    })\n  }, matrixAlgorithmSuite({\n    scalar: 'number | BigNumber',\n    SD: matAlgo02xDS0,\n    Ss: matAlgo11xS0s,\n    sS: false\n  }));\n\n  /**\n   * Calculate the nth root of a for BigNumbers, solve x^root == a\n   * https://rosettacode.org/wiki/Nth_root#JavaScript\n   * @param {BigNumber} a\n   * @param {BigNumber} root\n   * @private\n   */\n  function _bigNthRoot(a, root) {\n    var precision = _BigNumber.precision;\n    var Big = _BigNumber.clone({\n      precision: precision + 2\n    });\n    var zero = new _BigNumber(0);\n    var one = new Big(1);\n    var inv = root.isNegative();\n    if (inv) {\n      root = root.neg();\n    }\n    if (root.isZero()) {\n      throw new Error('Root must be non-zero');\n    }\n    if (a.isNegative() && !root.abs().mod(2).equals(1)) {\n      throw new Error('Root must be odd when a is negative.');\n    }\n\n    // edge cases zero and infinity\n    if (a.isZero()) {\n      return inv ? new Big(Infinity) : 0;\n    }\n    if (!a.isFinite()) {\n      return inv ? zero : a;\n    }\n    var x = a.abs().pow(one.div(root));\n    // If a < 0, we require that root is an odd integer,\n    // so (-1) ^ (1/root) = -1\n    x = a.isNeg() ? x.neg() : x;\n    return new _BigNumber((inv ? one.div(x) : x).toPrecision(precision));\n  }\n});\nexport var createNthRootNumber = /* #__PURE__ */factory(name, ['typed'], _ref2 => {\n  var {\n    typed\n  } = _ref2;\n  return typed(name, {\n    number: nthRootNumber,\n    'number, number': nthRootNumber\n  });\n});"]},"metadata":{},"sourceType":"module"}