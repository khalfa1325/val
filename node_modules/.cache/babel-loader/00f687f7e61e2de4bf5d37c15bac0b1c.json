{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n\n  class ConstantNode extends Node {\n    /**\n     * A ConstantNode holds a constant value like a number or string.\n     *\n     * Usage:\n     *\n     *     new ConstantNode(2.3)\n     *     new ConstantNode('hello')\n     *\n     * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n     * @constructor ConstantNode\n     * @extends {Node}\n     */\n    constructor(value) {\n      super();\n      this.value = value;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isConstantNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var value = this.value;\n      return function evalConstantNode() {\n        return value;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {// nothing to do, we don't have any children\n    }\n    /**\n     * Create a new ConstantNode with children produced by the given callback.\n     * Trivial because there are no children.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ConstantNode} Returns a clone of the node\n     */\n\n\n    map(callback) {\n      return this.clone();\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ConstantNode}\n     */\n\n\n    clone() {\n      return new ConstantNode(this.value);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      return format(this.value, options);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var value = this._toString(options);\n\n      switch (typeOf(this.value)) {\n        case 'number':\n        case 'BigNumber':\n        case 'Fraction':\n          return '<span class=\"math-number\">' + value + '</span>';\n\n        case 'string':\n          return '<span class=\"math-string\">' + value + '</span>';\n\n        case 'boolean':\n          return '<span class=\"math-boolean\">' + value + '</span>';\n\n        case 'null':\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\n\n        case 'undefined':\n          return '<span class=\"math-undefined\">' + value + '</span>';\n\n        default:\n          return '<span class=\"math-symbol\">' + value + '</span>';\n      }\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        value: this.value\n      };\n    }\n    /**\n     * Instantiate a ConstantNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n     *                       where mathjs is optional\n     * @returns {ConstantNode}\n     */\n\n\n    static fromJSON(json) {\n      return new ConstantNode(json.value);\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var value = this._toString(options);\n\n      switch (typeOf(this.value)) {\n        case 'string':\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\n\n        case 'number':\n        case 'BigNumber':\n          {\n            if (!isFinite(this.value)) {\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n            }\n\n            var index = value.toLowerCase().indexOf('e');\n\n            if (index !== -1) {\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n            }\n          }\n          return value;\n\n        case 'Fraction':\n          return this.value.toLatex();\n\n        default:\n          return value;\n      }\n    }\n\n  }\n\n  _defineProperty(ConstantNode, \"name\", name);\n\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/node/ConstantNode.js"],"names":["_defineProperty","format","typeOf","escapeLatex","factory","name","dependencies","createConstantNode","_ref","Node","ConstantNode","constructor","value","type","isConstantNode","_compile","math","argNames","evalConstantNode","forEach","callback","map","clone","_toString","options","toHTML","toJSON","mathjs","fromJSON","json","_toTex","isFinite","valueOf","index","toLowerCase","indexOf","substring","toLatex","isClass","isNode"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format } from '../../utils/string.js';\nimport { typeOf } from '../../utils/is.js';\nimport { escapeLatex } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'ConstantNode';\nvar dependencies = ['Node'];\nexport var createConstantNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  class ConstantNode extends Node {\n    /**\n     * A ConstantNode holds a constant value like a number or string.\n     *\n     * Usage:\n     *\n     *     new ConstantNode(2.3)\n     *     new ConstantNode('hello')\n     *\n     * @param {*} value    Value can be any type (number, BigNumber, string, ...)\n     * @constructor ConstantNode\n     * @extends {Node}\n     */\n    constructor(value) {\n      super();\n      this.value = value;\n    }\n    get type() {\n      return name;\n    }\n    get isConstantNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var value = this.value;\n      return function evalConstantNode() {\n        return value;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      // nothing to do, we don't have any children\n    }\n\n    /**\n     * Create a new ConstantNode with children produced by the given callback.\n     * Trivial because there are no children.\n     * @param {function(child: Node, path: string, parent: Node) : Node} callback\n     * @returns {ConstantNode} Returns a clone of the node\n     */\n    map(callback) {\n      return this.clone();\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {ConstantNode}\n     */\n    clone() {\n      return new ConstantNode(this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      return format(this.value, options);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var value = this._toString(options);\n      switch (typeOf(this.value)) {\n        case 'number':\n        case 'BigNumber':\n        case 'Fraction':\n          return '<span class=\"math-number\">' + value + '</span>';\n        case 'string':\n          return '<span class=\"math-string\">' + value + '</span>';\n        case 'boolean':\n          return '<span class=\"math-boolean\">' + value + '</span>';\n        case 'null':\n          return '<span class=\"math-null-symbol\">' + value + '</span>';\n        case 'undefined':\n          return '<span class=\"math-undefined\">' + value + '</span>';\n        default:\n          return '<span class=\"math-symbol\">' + value + '</span>';\n      }\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate a ConstantNode from its JSON representation\n     * @param {Object} json  An object structured like\n     *                       `{\"mathjs\": \"SymbolNode\", value: 2.3}`,\n     *                       where mathjs is optional\n     * @returns {ConstantNode}\n     */\n    static fromJSON(json) {\n      return new ConstantNode(json.value);\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var value = this._toString(options);\n      switch (typeOf(this.value)) {\n        case 'string':\n          return '\\\\mathtt{' + escapeLatex(value) + '}';\n        case 'number':\n        case 'BigNumber':\n          {\n            if (!isFinite(this.value)) {\n              return this.value.valueOf() < 0 ? '-\\\\infty' : '\\\\infty';\n            }\n            var index = value.toLowerCase().indexOf('e');\n            if (index !== -1) {\n              return value.substring(0, index) + '\\\\cdot10^{' + value.substring(index + 1) + '}';\n            }\n          }\n          return value;\n        case 'Fraction':\n          return this.value.toLatex();\n        default:\n          return value;\n      }\n    }\n  }\n  _defineProperty(ConstantNode, \"name\", name);\n  return ConstantNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}