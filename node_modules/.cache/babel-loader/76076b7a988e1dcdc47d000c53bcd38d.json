{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cos';\nvar dependencies = ['typed'];\nexport var createCos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the cosine of a value.\n   *\n   * To avoid confusion with the matrix cosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosine of x\n   */\n\n  return typed(name, {\n    number: Math.cos,\n    'Complex | BigNumber': x => x.cos()\n  }, trigUnit);\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/trigonometry/cos.js"],"names":["factory","createTrigUnit","name","dependencies","createCos","_ref","typed","trigUnit","number","Math","cos","x"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeJ,OAAO,CAACE,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACxE,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA,MAAIE,QAAQ,GAAGN,cAAc,CAAC;AAC5BK,IAAAA;AAD4B,GAAD,CAA7B;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjBM,IAAAA,MAAM,EAAEC,IAAI,CAACC,GADI;AAEjB,2BAAuBC,CAAC,IAAIA,CAAC,CAACD,GAAF;AAFX,GAAP,EAGTH,QAHS,CAAZ;AAID,CAvC4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'cos';\nvar dependencies = ['typed'];\nexport var createCos = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the cosine of a value.\n   *\n   * To avoid confusion with the matrix cosine, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.cos(x)\n   *\n   * Examples:\n   *\n   *    math.cos(2)                      // returns number -0.4161468365471422\n   *    math.cos(math.pi / 4)            // returns number  0.7071067811865475\n   *    math.cos(math.unit(180, 'deg'))  // returns number -1\n   *    math.cos(math.unit(60, 'deg'))   // returns number  0.5\n   *\n   *    const angle = 0.2\n   *    math.pow(math.sin(angle), 2) + math.pow(math.cos(angle), 2) // returns number ~1\n   *\n   * See also:\n   *\n   *    cos, tan\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Cosine of x\n   */\n  return typed(name, {\n    number: Math.cos,\n    'Complex | BigNumber': x => x.cos()\n  }, trigUnit);\n});"]},"metadata":{},"sourceType":"module"}