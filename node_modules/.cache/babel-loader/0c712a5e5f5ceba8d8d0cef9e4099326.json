{"ast":null,"code":"import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype; // discover rows & columns, do not use math.size() to avoid looping array twice\n\n    var rows = data.length;\n    var columns = 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    } // check we have rows (empty array)\n\n\n    if (rows > 0) {\n      // column index\n      var j = 0;\n\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length); // loop rows\n\n\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i]; // check row is an array\n\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            } // check row has column\n\n\n            if (j < row.length) {\n              // value\n              var v = row[j]; // check value != 0\n\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v); // index\n\n\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            } // check value != 0 (row is a scalar)\n\n\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row); // index\n\n\n              matrix._index.push(i);\n            }\n          }\n        } // increment index\n\n\n        j++;\n      } while (j < columns);\n    } // store number of values in ptr\n\n\n    matrix._ptr.push(matrix._index.length); // size\n\n\n    matrix._size = [rows, columns];\n  }\n\n  SparseMatrix.prototype = new Matrix();\n  /**\n   * Create a new SparseMatrix\n   */\n\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Attach type information\n   */\n\n\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n\n\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n\n\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n\n\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n\n\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // calculate density\n\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n\n\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    } // check arguments\n\n\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n      // intentional fall through\n\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n\n    var isScalar = idx.isScalar();\n\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    } // validate dimensions\n\n\n    var size = idx.size();\n\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    } // vars\n\n\n    var i, ii, k, kk; // validate if any of the ranges in the index is out of range\n\n    var min = idx.min();\n    var max = idx.max();\n\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    } // matrix arrays\n\n\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr; // rows & columns dimensions for result matrix\n\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1); // workspace & permutation vector\n\n    var w = [];\n    var pv = []; // loop rows in resulting matrix\n\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0]; // mark i in workspace\n\n      w[i] = true;\n    }); // result matrix arrays\n\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = []; // loop columns in result matrix\n\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length); // loop values in column j\n\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k]; // check row is in result matrix\n\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]); // check we need to process values\n\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    }); // update ptr\n\n    ptr.push(index.length); // return matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    } // get index size and check whether the index contains a single value\n\n\n    var iSize = index.size();\n    var isScalar = index.isScalar(); // calculate the size of the submatrix, and convert it into an Array if needed\n\n    var sSize;\n\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size(); // use array representation\n\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    } // check index is a scalar\n\n\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      } // set value\n\n\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      } // check submatrix and index have the same dimensions\n\n\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        } // unsqueeze both outer and inner dimensions\n\n\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      } // check whether the size of the submatrix matches the index size\n\n\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      } // insert the sub matrix\n\n\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n\n    return matrix;\n  }\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n\n\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // check i, j are valid\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n\n    return 0;\n  };\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n\n\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    } // check it is a pattern matrix\n\n\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    } // row and column\n\n\n    var i = index[0];\n    var j = index[1]; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, this._datatype);\n    } // check we need to resize matrix\n\n\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue); // update rows & columns\n\n\n      rows = this._size[0];\n      columns = this._size[1];\n    } // check i, j are valid\n\n\n    validateIndex(i, rows);\n    validateIndex(j, columns); // find value index\n\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index); // check k is prior to next column k and it is in the correct row\n\n\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n\n    return this;\n  };\n\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    } // loop rows [top, bottom[\n\n\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    } // we did not find row\n\n\n    return top;\n  }\n\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1); // update pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v); // update row for k\n\n    index.splice(k, 0, i); // update column pointers\n\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n\n\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    } // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n\n\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // check sizes\n\n\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    }); // matrix to resize\n\n    var m = copy ? this.clone() : this; // resize matrix\n\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype); // convert value to the same datatype\n\n      value = typed.convert(value, matrix._datatype);\n    } // should we insert the value?\n\n\n    var ins = !eq(value, zero); // old columns and rows\n\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k; // check we need to increase columns\n\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length; // check we need to insert matrix._values\n\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value); // update matrix._index\n\n\n            matrix._index.push(i);\n          }\n        }\n      } // store number of matrix._values in matrix._ptr\n\n\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns); // truncate matrix._values and matrix._index\n\n\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    } // update columns\n\n\n    c = columns; // check we need to increase rows\n\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0; // loop columns\n\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n; // where to insert matrix._values\n\n          k = matrix._ptr[j + 1] + n; // pointer\n\n          var p = 0; // loop new rows, initialize pointer\n\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value); // update matrix._index\n\n\n            matrix._index.splice(k + p, 0, i); // increment inserts\n\n\n            n++;\n          }\n        } // store number of matrix._values in matrix._ptr\n\n\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0; // loop columns\n\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d; // where matrix._values start for next column\n\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d; // loop matrix._index\n\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k]; // check we need to delete value and matrix._index\n\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1); // remove item from matrix._index\n\n\n            matrix._index.splice(k, 1); // increase deletes\n\n\n            d++;\n          }\n        }\n      } // update matrix._ptr for current column\n\n\n      matrix._ptr[j] = matrix._values.length;\n    } // update matrix._size\n\n\n    matrix._size[0] = rows;\n    matrix._size[1] = columns; // return matrix\n\n    return matrix;\n  }\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n\n\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    } // check sizes\n\n\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1]; // m * n must not change\n\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    } // matrix to reshape\n\n\n    var m = copy ? this.clone() : this; // return unchanged if the same shape\n\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    } // Convert to COO format (generate a column index)\n\n\n    var colIndex = [];\n\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    } // Clone the values array\n\n\n    var values = m._values.slice(); // Clone the row index array\n\n\n    var rowIndex = m._index.slice(); // Transform the (row, column) indices\n\n\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    } // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n    // OR, we could easily just:\n    // 1. Remove all values from the matrix\n\n\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    } // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n\n\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    } // The value indices are inserted out of order, but apparently that's... still OK?\n\n\n    return m;\n  };\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n\n\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n\n\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n\n\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // invoke callback\n\n    var args = maxArgumentCount(callback);\n\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    }; // invoke _map\n\n\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n\n\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = []; // equal signature to use\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, matrix._datatype);\n    } // invoke callback\n\n\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y); // check value != 0\n\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v); // index\n\n        index.push(x);\n      }\n    }; // loop columns\n\n\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length); // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k]; // check i is in range\n\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    } // store number of values in ptr\n\n\n    ptr.push(values.length); // return sparse matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n\n\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    } // matrix instance\n\n\n    var me = this; // rows and columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k]; // value @ k\n\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        } // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n\n\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n\n\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n\n    var columns = this._size[1];\n\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n\n\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1]; // result\n\n    var a = []; // vars\n\n    var i, j; // initialize array\n\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    } // loop columns\n\n\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k]; // set value (use one for pattern matrix)\n\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n\n    return a;\n  }\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1]; // density\n\n    var density = this.density(); // rows & columns\n\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n'; // loop columns\n\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop k within [k0, k1[\n\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k]; // append value\n\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n\n    return str;\n  };\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n\n\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n\n\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n\n\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows & columns\n\n    var rows = this._size[0];\n    var columns = this._size[1]; // number diagonal values\n\n    var n = Math.min(rows - kSub, columns - kSuper); // diagonal arrays\n\n    var values = [];\n    var index = [];\n    var ptr = []; // initial ptr value\n\n    ptr[0] = 0; // loop columns\n\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1]; // loop x within [k0, k1[\n\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x]; // check row\n\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]); // store row\n\n          index[values.length - 1] = i - kSub; // exit loop\n\n          break;\n        }\n      }\n    } // close ptr\n\n\n    ptr.push(values.length); // return matrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n\n\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    } // map size & validate\n\n\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      } // validate arguments\n\n\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n\n      return s;\n    }); // validate k if any\n\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      } // is must be an integer\n\n\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    } // equal signature to use\n\n\n    var eq = equalScalar; // zero value\n\n    var zero = 0;\n\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar; // convert 0 to the same datatype\n\n      zero = typed.convert(0, datatype);\n    }\n\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0; // rows and columns\n\n    var rows = size[0];\n    var columns = size[1]; // number of non-zero items\n\n    var n = Math.min(rows - kSub, columns - kSuper); // value extraction function\n\n    var _value; // check value\n\n\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size(); // validate matrix\n\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      } // define function\n\n\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    } // create arrays\n\n\n    var values = [];\n    var index = [];\n    var ptr = []; // loop items\n\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length); // diagonal index\n\n      var i = j - kSuper; // check we need to set diagonal value\n\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i); // check for zero\n\n\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub); // add value\n\n          values.push(v);\n        }\n      }\n    } // last value should be number of values\n\n\n    ptr.push(values.length); // create SparseMatrix\n\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n\n\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    } // check dimensions\n\n\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    } // validate index\n\n\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]); // swap rows\n\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr); // return current instance\n\n\n    return this;\n  };\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n\n\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1]; // loop\n\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n\n\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1]; // find value index @ x\n\n      var kx = _getValueIndex(x, k0, k1, index); // find value index @ x\n\n\n      var ky = _getValueIndex(y, k0, k1, index); // check both rows exist in matrix\n\n\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        } // next column\n\n\n        continue;\n      } // check x row exist & no y row\n\n\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined; // insert value @ y\n\n        index.splice(ky, 0, y);\n\n        if (values) {\n          values.splice(ky, 0, vx);\n        } // remove value @ x (adjust array index if needed)\n\n\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        } // next column\n\n\n        continue;\n      } // check y row exist & no x row\n\n\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined; // insert value @ x\n\n        index.splice(kx, 0, x);\n\n        if (values) {\n          values.splice(kx, 0, vy);\n        } // remove value @ y (adjust array index if needed)\n\n\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n\n  return SparseMatrix;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/SparseMatrix.js"],"names":["isArray","isBigNumber","isCollection","isIndex","isMatrix","isNumber","isString","typeOf","isInteger","format","clone","deepStrictEqual","arraySize","getArrayDataType","processSizesWildcard","unsqueeze","validateIndex","factory","DimensionError","maxArgumentCount","name","dependencies","createSparseMatrixClass","_ref","typed","equalScalar","Matrix","SparseMatrix","data","datatype","SyntaxError","Error","_createFromMatrix","index","ptr","size","_values","values","_index","_ptr","_size","_datatype","_createFromArray","TypeError","matrix","source","type","undefined","valueOf","rows","length","columns","eq","zero","find","convert","j","push","i","row","v","prototype","createSparseMatrix","Object","defineProperty","value","constructor","isSparseMatrix","getDataType","storage","create","density","subset","replacement","defaultValue","arguments","_getsubset","_setsubset","idx","isScalar","get","min","ii","k","kk","max","mvalues","mindex","mptr","dimension","w","pv","forEach","r","submatrix","iSize","sSize","toArray","set","outer","range","dataIndex","subIndex","firstDimensionRange","secondDimensionRange","firstDataIndex","firstSubIndex","secondDataIndex","secondSubIndex","_getValueIndex","_resize","Math","_remove","_insert","top","bottom","splice","x","resize","copy","sizeArray","map","Array","m","ins","c","n","p","d","k0","k1","reshape","sizes","currentLength","newLength","colIndex","slice","rowIndex","_i","r1","c1","flat","floor","_i2","h","_i3","_j","callback","skipZeros","me","args","invoke","_map","minRow","maxRow","minColumn","maxColumn","y","_k","_i4","_i5","_k2","_i6","_i7","Symbol","iterator","_toArray","a","options","str","toString","toJSON","mathjs","diagonal","toNumber","kSuper","kSub","fromJSON","json","s","_value","ms","swapRows","_swapRows","_forEachRow","kx","ky","vx","vy","isClass"],"mappings":"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","sourcesContent":["import { isArray, isBigNumber, isCollection, isIndex, isMatrix, isNumber, isString, typeOf } from '../../utils/is.js';\nimport { isInteger } from '../../utils/number.js';\nimport { format } from '../../utils/string.js';\nimport { clone, deepStrictEqual } from '../../utils/object.js';\nimport { arraySize, getArrayDataType, processSizesWildcard, unsqueeze, validateIndex } from '../../utils/array.js';\nimport { factory } from '../../utils/factory.js';\nimport { DimensionError } from '../../error/DimensionError.js';\nimport { maxArgumentCount } from '../../utils/function.js';\nvar name = 'SparseMatrix';\nvar dependencies = ['typed', 'equalScalar', 'Matrix'];\nexport var createSparseMatrixClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    equalScalar,\n    Matrix\n  } = _ref;\n  /**\n   * Sparse Matrix implementation. This type implements\n   * a [Compressed Column Storage](https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_(CSC_or_CCS))\n   * format for two-dimensional sparse matrices.\n   * @class SparseMatrix\n   */\n  function SparseMatrix(data, datatype) {\n    if (!(this instanceof SparseMatrix)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (datatype && !isString(datatype)) {\n      throw new Error('Invalid datatype: ' + datatype);\n    }\n    if (isMatrix(data)) {\n      // create from matrix\n      _createFromMatrix(this, data, datatype);\n    } else if (data && isArray(data.index) && isArray(data.ptr) && isArray(data.size)) {\n      // initialize fields\n      this._values = data.values;\n      this._index = data.index;\n      this._ptr = data.ptr;\n      this._size = data.size;\n      this._datatype = datatype || data.datatype;\n    } else if (isArray(data)) {\n      // create from array\n      _createFromArray(this, data, datatype);\n    } else if (data) {\n      // unsupported type\n      throw new TypeError('Unsupported type of data (' + typeOf(data) + ')');\n    } else {\n      // nothing provided\n      this._values = [];\n      this._index = [];\n      this._ptr = [0];\n      this._size = [0, 0];\n      this._datatype = datatype;\n    }\n  }\n  function _createFromMatrix(matrix, source, datatype) {\n    // check matrix type\n    if (source.type === 'SparseMatrix') {\n      // clone arrays\n      matrix._values = source._values ? clone(source._values) : undefined;\n      matrix._index = clone(source._index);\n      matrix._ptr = clone(source._ptr);\n      matrix._size = clone(source._size);\n      matrix._datatype = datatype || source._datatype;\n    } else {\n      // build from matrix data\n      _createFromArray(matrix, source.valueOf(), datatype || source._datatype);\n    }\n  }\n  function _createFromArray(matrix, data, datatype) {\n    // initialize fields\n    matrix._values = [];\n    matrix._index = [];\n    matrix._ptr = [];\n    matrix._datatype = datatype;\n    // discover rows & columns, do not use math.size() to avoid looping array twice\n    var rows = data.length;\n    var columns = 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n\n    // check we have rows (empty array)\n    if (rows > 0) {\n      // column index\n      var j = 0;\n      do {\n        // store pointer to values index\n        matrix._ptr.push(matrix._index.length);\n        // loop rows\n        for (var i = 0; i < rows; i++) {\n          // current row\n          var row = data[i];\n          // check row is an array\n          if (isArray(row)) {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < row.length) {\n              columns = row.length;\n            }\n            // check row has column\n            if (j < row.length) {\n              // value\n              var v = row[j];\n              // check value != 0\n              if (!eq(v, zero)) {\n                // store value\n                matrix._values.push(v);\n                // index\n                matrix._index.push(i);\n              }\n            }\n          } else {\n            // update columns if needed (only on first column)\n            if (j === 0 && columns < 1) {\n              columns = 1;\n            }\n            // check value != 0 (row is a scalar)\n            if (!eq(row, zero)) {\n              // store value\n              matrix._values.push(row);\n              // index\n              matrix._index.push(i);\n            }\n          }\n        }\n        // increment index\n        j++;\n      } while (j < columns);\n    }\n    // store number of values in ptr\n    matrix._ptr.push(matrix._index.length);\n    // size\n    matrix._size = [rows, columns];\n  }\n  SparseMatrix.prototype = new Matrix();\n\n  /**\n   * Create a new SparseMatrix\n   */\n  SparseMatrix.prototype.createSparseMatrix = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Attach type information\n   */\n  Object.defineProperty(SparseMatrix, 'name', {\n    value: 'SparseMatrix'\n  });\n  SparseMatrix.prototype.constructor = SparseMatrix;\n  SparseMatrix.prototype.type = 'SparseMatrix';\n  SparseMatrix.prototype.isSparseMatrix = true;\n\n  /**\n   * Get the matrix type\n   *\n   * Usage:\n   *    const matrixType = matrix.getDataType()  // retrieves the matrix type\n   *\n   * @memberOf SparseMatrix\n   * @return {string}   type information; if multiple types are found from the Matrix, it will return \"mixed\"\n   */\n  SparseMatrix.prototype.getDataType = function () {\n    return getArrayDataType(this._values, typeOf);\n  };\n\n  /**\n   * Get the storage format used by the matrix.\n   *\n   * Usage:\n   *     const format = matrix.storage()   // retrieve storage format\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The storage format.\n   */\n  SparseMatrix.prototype.storage = function () {\n    return 'sparse';\n  };\n\n  /**\n   * Get the datatype of the data stored in the matrix.\n   *\n   * Usage:\n   *     const format = matrix.datatype()    // retrieve matrix datatype\n   *\n   * @memberof SparseMatrix\n   * @return {string}           The datatype.\n   */\n  SparseMatrix.prototype.datatype = function () {\n    return this._datatype;\n  };\n\n  /**\n   * Create a new SparseMatrix\n   * @memberof SparseMatrix\n   * @param {Array} data\n   * @param {string} [datatype]\n   */\n  SparseMatrix.prototype.create = function (data, datatype) {\n    return new SparseMatrix(data, datatype);\n  };\n\n  /**\n   * Get the matrix density.\n   *\n   * Usage:\n   *     const density = matrix.density()                   // retrieve matrix density\n   *\n   * @memberof SparseMatrix\n   * @return {number}           The matrix density.\n   */\n  SparseMatrix.prototype.density = function () {\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // calculate density\n    return rows !== 0 && columns !== 0 ? this._index.length / (rows * columns) : 0;\n  };\n\n  /**\n   * Get a subset of the matrix, or replace a subset of the matrix.\n   *\n   * Usage:\n   *     const subset = matrix.subset(index)               // retrieve subset\n   *     const value = matrix.subset(index, replacement)   // replace subset\n   *\n   * @memberof SparseMatrix\n   * @param {Index} index\n   * @param {Array | Matrix | *} [replacement]\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be filled with zeros.\n   */\n  SparseMatrix.prototype.subset = function (index, replacement, defaultValue) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke subset on a Pattern only matrix');\n    }\n\n    // check arguments\n    switch (arguments.length) {\n      case 1:\n        return _getsubset(this, index);\n\n      // intentional fall through\n      case 2:\n      case 3:\n        return _setsubset(this, index, replacement, defaultValue);\n      default:\n        throw new SyntaxError('Wrong number of arguments');\n    }\n  };\n  function _getsubset(matrix, idx) {\n    // check idx\n    if (!isIndex(idx)) {\n      throw new TypeError('Invalid index');\n    }\n    var isScalar = idx.isScalar();\n    if (isScalar) {\n      // return a scalar\n      return matrix.get(idx.min());\n    }\n    // validate dimensions\n    var size = idx.size();\n    if (size.length !== matrix._size.length) {\n      throw new DimensionError(size.length, matrix._size.length);\n    }\n\n    // vars\n    var i, ii, k, kk;\n\n    // validate if any of the ranges in the index is out of range\n    var min = idx.min();\n    var max = idx.max();\n    for (i = 0, ii = matrix._size.length; i < ii; i++) {\n      validateIndex(min[i], matrix._size[i]);\n      validateIndex(max[i], matrix._size[i]);\n    }\n\n    // matrix arrays\n    var mvalues = matrix._values;\n    var mindex = matrix._index;\n    var mptr = matrix._ptr;\n\n    // rows & columns dimensions for result matrix\n    var rows = idx.dimension(0);\n    var columns = idx.dimension(1);\n\n    // workspace & permutation vector\n    var w = [];\n    var pv = [];\n\n    // loop rows in resulting matrix\n    rows.forEach(function (i, r) {\n      // update permutation vector\n      pv[i] = r[0];\n      // mark i in workspace\n      w[i] = true;\n    });\n\n    // result matrix arrays\n    var values = mvalues ? [] : undefined;\n    var index = [];\n    var ptr = [];\n\n    // loop columns in result matrix\n    columns.forEach(function (j) {\n      // update ptr\n      ptr.push(index.length);\n      // loop values in column j\n      for (k = mptr[j], kk = mptr[j + 1]; k < kk; k++) {\n        // row\n        i = mindex[k];\n        // check row is in result matrix\n        if (w[i] === true) {\n          // push index\n          index.push(pv[i]);\n          // check we need to process values\n          if (values) {\n            values.push(mvalues[k]);\n          }\n        }\n      }\n    });\n    // update ptr\n    ptr.push(index.length);\n\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size,\n      datatype: matrix._datatype\n    });\n  }\n  function _setsubset(matrix, index, submatrix, defaultValue) {\n    // check index\n    if (!index || index.isIndex !== true) {\n      throw new TypeError('Invalid index');\n    }\n\n    // get index size and check whether the index contains a single value\n    var iSize = index.size();\n    var isScalar = index.isScalar();\n\n    // calculate the size of the submatrix, and convert it into an Array if needed\n    var sSize;\n    if (isMatrix(submatrix)) {\n      // submatrix size\n      sSize = submatrix.size();\n      // use array representation\n      submatrix = submatrix.toArray();\n    } else {\n      // get submatrix size (array, scalar)\n      sSize = arraySize(submatrix);\n    }\n\n    // check index is a scalar\n    if (isScalar) {\n      // verify submatrix is a scalar\n      if (sSize.length !== 0) {\n        throw new TypeError('Scalar expected');\n      }\n      // set value\n      matrix.set(index.min(), submatrix, defaultValue);\n    } else {\n      // validate dimensions, index size must be one or two dimensions\n      if (iSize.length !== 1 && iSize.length !== 2) {\n        throw new DimensionError(iSize.length, matrix._size.length, '<');\n      }\n\n      // check submatrix and index have the same dimensions\n      if (sSize.length < iSize.length) {\n        // calculate number of missing outer dimensions\n        var i = 0;\n        var outer = 0;\n        while (iSize[i] === 1 && sSize[i] === 1) {\n          i++;\n        }\n        while (iSize[i] === 1) {\n          outer++;\n          i++;\n        }\n        // unsqueeze both outer and inner dimensions\n        submatrix = unsqueeze(submatrix, iSize.length, outer, sSize);\n      }\n\n      // check whether the size of the submatrix matches the index size\n      if (!deepStrictEqual(iSize, sSize)) {\n        throw new DimensionError(iSize, sSize, '>');\n      }\n\n      // insert the sub matrix\n      if (iSize.length === 1) {\n        // if the replacement index only has 1 dimension, go trough each one and set its value\n        var range = index.dimension(0);\n        range.forEach(function (dataIndex, subIndex) {\n          validateIndex(dataIndex);\n          matrix.set([dataIndex, 0], submatrix[subIndex[0]], defaultValue);\n        });\n      } else {\n        // if the replacement index has 2 dimensions, go through each one and set the value in the correct index\n        var firstDimensionRange = index.dimension(0);\n        var secondDimensionRange = index.dimension(1);\n        firstDimensionRange.forEach(function (firstDataIndex, firstSubIndex) {\n          validateIndex(firstDataIndex);\n          secondDimensionRange.forEach(function (secondDataIndex, secondSubIndex) {\n            validateIndex(secondDataIndex);\n            matrix.set([firstDataIndex, secondDataIndex], submatrix[firstSubIndex[0]][secondSubIndex[0]], defaultValue);\n          });\n        });\n      }\n    }\n    return matrix;\n  }\n\n  /**\n   * Get a single element from the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @return {*} value\n   */\n  SparseMatrix.prototype.get = function (index) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke get on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // check i, j are valid\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[1]);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      return this._values[k];\n    }\n    return 0;\n  };\n\n  /**\n   * Replace a single element in the matrix.\n   * @memberof SparseMatrix\n   * @param {number[]} index   Zero-based index\n   * @param {*} v\n   * @param {*} [defaultValue]        Default value, filled in on new entries when\n   *                                  the matrix is resized. If not provided,\n   *                                  new matrix elements will be set to zero.\n   * @return {SparseMatrix} self\n   */\n  SparseMatrix.prototype.set = function (index, v, defaultValue) {\n    if (!isArray(index)) {\n      throw new TypeError('Array expected');\n    }\n    if (index.length !== this._size.length) {\n      throw new DimensionError(index.length, this._size.length);\n    }\n\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke set on a Pattern only matrix');\n    }\n\n    // row and column\n    var i = index[0];\n    var j = index[1];\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(this._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [this._datatype, this._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, this._datatype);\n    }\n\n    // check we need to resize matrix\n    if (i > rows - 1 || j > columns - 1) {\n      // resize matrix\n      _resize(this, Math.max(i + 1, rows), Math.max(j + 1, columns), defaultValue);\n      // update rows & columns\n      rows = this._size[0];\n      columns = this._size[1];\n    }\n\n    // check i, j are valid\n    validateIndex(i, rows);\n    validateIndex(j, columns);\n\n    // find value index\n    var k = _getValueIndex(i, this._ptr[j], this._ptr[j + 1], this._index);\n    // check k is prior to next column k and it is in the correct row\n    if (k < this._ptr[j + 1] && this._index[k] === i) {\n      // check value != 0\n      if (!eq(v, zero)) {\n        // update value\n        this._values[k] = v;\n      } else {\n        // remove value from matrix\n        _remove(k, j, this._values, this._index, this._ptr);\n      }\n    } else {\n      if (!eq(v, zero)) {\n        // insert value @ (i, j)\n        _insert(k, i, j, v, this._values, this._index, this._ptr);\n      }\n    }\n    return this;\n  };\n  function _getValueIndex(i, top, bottom, index) {\n    // check row is on the bottom side\n    if (bottom - top === 0) {\n      return bottom;\n    }\n    // loop rows [top, bottom[\n    for (var r = top; r < bottom; r++) {\n      // check we found value index\n      if (index[r] === i) {\n        return r;\n      }\n    }\n    // we did not find row\n    return top;\n  }\n  function _remove(k, j, values, index, ptr) {\n    // remove value @ k\n    values.splice(k, 1);\n    index.splice(k, 1);\n    // update pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]--;\n    }\n  }\n  function _insert(k, i, j, v, values, index, ptr) {\n    // insert value\n    values.splice(k, 0, v);\n    // update row for k\n    index.splice(k, 0, i);\n    // update column pointers\n    for (var x = j + 1; x < ptr.length; x++) {\n      ptr[x]++;\n    }\n  }\n\n  /**\n   * Resize the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (resize in place).\n   *\n   * @memberof SparseMatrix\n   * @param {number[] | Matrix} size  The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {*} [defaultValue=0]      Default value, filled in on new entries.\n   *                                  If not provided, the matrix elements will\n   *                                  be filled with zeros.\n   * @param {boolean} [copy]          Return a resized copy of the matrix\n   *\n   * @return {Matrix}                 The resized matrix\n   */\n  SparseMatrix.prototype.resize = function (size, defaultValue, copy) {\n    // validate arguments\n    if (!isCollection(size)) {\n      throw new TypeError('Array or Matrix expected');\n    }\n\n    // SparseMatrix input is always 2d, flatten this into 1d if it's indeed a vector\n    var sizeArray = size.valueOf().map(value => {\n      return Array.isArray(value) && value.length === 1 ? value[0] : value;\n    });\n    if (sizeArray.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // check sizes\n    sizeArray.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value < 0) {\n        throw new TypeError('Invalid size, must contain positive integers ' + '(size: ' + format(sizeArray) + ')');\n      }\n    });\n\n    // matrix to resize\n    var m = copy ? this.clone() : this;\n    // resize matrix\n    return _resize(m, sizeArray[0], sizeArray[1], defaultValue);\n  };\n  function _resize(matrix, rows, columns, defaultValue) {\n    // value to insert at the time of growing matrix\n    var value = defaultValue || 0;\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n      // convert value to the same datatype\n      value = typed.convert(value, matrix._datatype);\n    }\n\n    // should we insert the value?\n    var ins = !eq(value, zero);\n\n    // old columns and rows\n    var r = matrix._size[0];\n    var c = matrix._size[1];\n    var i, j, k;\n\n    // check we need to increase columns\n    if (columns > c) {\n      // loop new columns\n      for (j = c; j < columns; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._values.length;\n        // check we need to insert matrix._values\n        if (ins) {\n          // loop rows\n          for (i = 0; i < r; i++) {\n            // add new matrix._values\n            matrix._values.push(value);\n            // update matrix._index\n            matrix._index.push(i);\n          }\n        }\n      }\n      // store number of matrix._values in matrix._ptr\n      matrix._ptr[columns] = matrix._values.length;\n    } else if (columns < c) {\n      // truncate matrix._ptr\n      matrix._ptr.splice(columns + 1, c - columns);\n      // truncate matrix._values and matrix._index\n      matrix._values.splice(matrix._ptr[columns], matrix._values.length);\n      matrix._index.splice(matrix._ptr[columns], matrix._index.length);\n    }\n    // update columns\n    c = columns;\n\n    // check we need to increase rows\n    if (rows > r) {\n      // check we have to insert values\n      if (ins) {\n        // inserts\n        var n = 0;\n        // loop columns\n        for (j = 0; j < c; j++) {\n          // update matrix._ptr for current column\n          matrix._ptr[j] = matrix._ptr[j] + n;\n          // where to insert matrix._values\n          k = matrix._ptr[j + 1] + n;\n          // pointer\n          var p = 0;\n          // loop new rows, initialize pointer\n          for (i = r; i < rows; i++, p++) {\n            // add value\n            matrix._values.splice(k + p, 0, value);\n            // update matrix._index\n            matrix._index.splice(k + p, 0, i);\n            // increment inserts\n            n++;\n          }\n        }\n        // store number of matrix._values in matrix._ptr\n        matrix._ptr[c] = matrix._values.length;\n      }\n    } else if (rows < r) {\n      // deletes\n      var d = 0;\n      // loop columns\n      for (j = 0; j < c; j++) {\n        // update matrix._ptr for current column\n        matrix._ptr[j] = matrix._ptr[j] - d;\n        // where matrix._values start for next column\n        var k0 = matrix._ptr[j];\n        var k1 = matrix._ptr[j + 1] - d;\n        // loop matrix._index\n        for (k = k0; k < k1; k++) {\n          // row\n          i = matrix._index[k];\n          // check we need to delete value and matrix._index\n          if (i > rows - 1) {\n            // remove value\n            matrix._values.splice(k, 1);\n            // remove item from matrix._index\n            matrix._index.splice(k, 1);\n            // increase deletes\n            d++;\n          }\n        }\n      }\n      // update matrix._ptr for current column\n      matrix._ptr[j] = matrix._values.length;\n    }\n    // update matrix._size\n    matrix._size[0] = rows;\n    matrix._size[1] = columns;\n    // return matrix\n    return matrix;\n  }\n\n  /**\n   * Reshape the matrix to the given size. Returns a copy of the matrix when\n   * `copy=true`, otherwise return the matrix itself (reshape in place).\n   *\n   * NOTE: This might be better suited to copy by default, instead of modifying\n   *       in place. For now, it operates in place to remain consistent with\n   *       resize().\n   *\n   * @memberof SparseMatrix\n   * @param {number[]} sizes          The new size the matrix should have.\n   *                                  Since sparse matrices are always two-dimensional,\n   *                                  size must be two numbers in either an array or a matrix\n   * @param {boolean} [copy]          Return a reshaped copy of the matrix\n   *\n   * @return {Matrix}                 The reshaped matrix\n   */\n  SparseMatrix.prototype.reshape = function (sizes, copy) {\n    // validate arguments\n    if (!isArray(sizes)) {\n      throw new TypeError('Array expected');\n    }\n    if (sizes.length !== 2) {\n      throw new Error('Sparse matrices can only be reshaped in two dimensions');\n    }\n\n    // check sizes\n    sizes.forEach(function (value) {\n      if (!isNumber(value) || !isInteger(value) || value <= -2 || value === 0) {\n        throw new TypeError('Invalid size, must contain positive integers or -1 ' + '(size: ' + format(sizes) + ')');\n      }\n    });\n    var currentLength = this._size[0] * this._size[1];\n    sizes = processSizesWildcard(sizes, currentLength);\n    var newLength = sizes[0] * sizes[1];\n\n    // m * n must not change\n    if (currentLength !== newLength) {\n      throw new Error('Reshaping sparse matrix will result in the wrong number of elements');\n    }\n\n    // matrix to reshape\n    var m = copy ? this.clone() : this;\n\n    // return unchanged if the same shape\n    if (this._size[0] === sizes[0] && this._size[1] === sizes[1]) {\n      return m;\n    }\n\n    // Convert to COO format (generate a column index)\n    var colIndex = [];\n    for (var i = 0; i < m._ptr.length; i++) {\n      for (var j = 0; j < m._ptr[i + 1] - m._ptr[i]; j++) {\n        colIndex.push(i);\n      }\n    }\n\n    // Clone the values array\n    var values = m._values.slice();\n\n    // Clone the row index array\n    var rowIndex = m._index.slice();\n\n    // Transform the (row, column) indices\n    for (var _i = 0; _i < m._index.length; _i++) {\n      var r1 = rowIndex[_i];\n      var c1 = colIndex[_i];\n      var flat = r1 * m._size[1] + c1;\n      colIndex[_i] = flat % sizes[1];\n      rowIndex[_i] = Math.floor(flat / sizes[1]);\n    }\n\n    // Now reshaping is supposed to preserve the row-major order, BUT these sparse matrices are stored\n    // in column-major order, so we have to reorder the value array now. One option is to use a multisort,\n    // sorting several arrays based on some other array.\n\n    // OR, we could easily just:\n\n    // 1. Remove all values from the matrix\n    m._values.length = 0;\n    m._index.length = 0;\n    m._ptr.length = sizes[1] + 1;\n    m._size = sizes.slice();\n    for (var _i2 = 0; _i2 < m._ptr.length; _i2++) {\n      m._ptr[_i2] = 0;\n    }\n\n    // 2. Re-insert all elements in the proper order (simplified code from SparseMatrix.prototype.set)\n    // This step is probably the most time-consuming\n    for (var h = 0; h < values.length; h++) {\n      var _i3 = rowIndex[h];\n      var _j = colIndex[h];\n      var v = values[h];\n      var k = _getValueIndex(_i3, m._ptr[_j], m._ptr[_j + 1], m._index);\n      _insert(k, _i3, _j, v, m._values, m._index, m._ptr);\n    }\n\n    // The value indices are inserted out of order, but apparently that's... still OK?\n\n    return m;\n  };\n\n  /**\n   * Create a clone of the matrix\n   * @memberof SparseMatrix\n   * @return {SparseMatrix} clone\n   */\n  SparseMatrix.prototype.clone = function () {\n    var m = new SparseMatrix({\n      values: this._values ? clone(this._values) : undefined,\n      index: clone(this._index),\n      ptr: clone(this._ptr),\n      size: clone(this._size),\n      datatype: this._datatype\n    });\n    return m;\n  };\n\n  /**\n   * Retrieve the size of the matrix.\n   * @memberof SparseMatrix\n   * @returns {number[]} size\n   */\n  SparseMatrix.prototype.size = function () {\n    return this._size.slice(0); // copy the Array\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on\n   * each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *\n   * @return {SparseMatrix} matrix\n   */\n  SparseMatrix.prototype.map = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke map on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // invoke callback\n    var args = maxArgumentCount(callback);\n    var invoke = function invoke(v, i, j) {\n      // invoke callback\n      if (args === 1) return callback(v);\n      if (args === 2) return callback(v, [i, j]);\n      return callback(v, [i, j], me);\n    };\n    // invoke _map\n    return _map(this, 0, rows - 1, 0, columns - 1, invoke, skipZeros);\n  };\n\n  /**\n   * Create a new matrix with the results of the callback function executed on the interval\n   * [minRow..maxRow, minColumn..maxColumn].\n   */\n  function _map(matrix, minRow, maxRow, minColumn, maxColumn, callback, skipZeros) {\n    // result arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(matrix._datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [matrix._datatype, matrix._datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, matrix._datatype);\n    }\n\n    // invoke callback\n    var invoke = function invoke(v, x, y) {\n      // invoke callback\n      v = callback(v, x, y);\n      // check value != 0\n      if (!eq(v, zero)) {\n        // store value\n        values.push(v);\n        // index\n        index.push(x);\n      }\n    };\n    // loop columns\n    for (var j = minColumn; j <= maxColumn; j++) {\n      // store pointer to values index\n      ptr.push(values.length);\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = matrix._ptr[j];\n      var k1 = matrix._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = matrix._index[k];\n          // check i is in range\n          if (i >= minRow && i <= maxRow) {\n            // value @ k\n            invoke(matrix._values[k], i - minRow, j - minColumn);\n          }\n        }\n      } else {\n        // create a cache holding all defined values\n        var _values = {};\n        for (var _k = k0; _k < k1; _k++) {\n          var _i4 = matrix._index[_k];\n          _values[_i4] = matrix._values[_k];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i5 = minRow; _i5 <= maxRow; _i5++) {\n          var value = _i5 in _values ? _values[_i5] : 0;\n          invoke(value, _i5 - minRow, j - minColumn);\n        }\n      }\n    }\n\n    // store number of values in ptr\n    ptr.push(values.length);\n    // return sparse matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [maxRow - minRow + 1, maxColumn - minColumn + 1]\n    });\n  }\n\n  /**\n   * Execute a callback function on each entry of the matrix.\n   * @memberof SparseMatrix\n   * @param {Function} callback   The callback function is invoked with three\n   *                              parameters: the value of the element, the index\n   *                              of the element, and the Matrix being traversed.\n   * @param {boolean} [skipZeros] Invoke callback function for non-zero values only.\n   *                              If false, the indices are guaranteed to be in order,\n   *                              if true, the indices can be unordered.\n   */\n  SparseMatrix.prototype.forEach = function (callback, skipZeros) {\n    // check it is a pattern matrix\n    if (!this._values) {\n      throw new Error('Cannot invoke forEach on a Pattern only matrix');\n    }\n    // matrix instance\n    var me = this;\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      if (skipZeros) {\n        // loop k within [k0, k1[\n        for (var k = k0; k < k1; k++) {\n          // row index\n          var i = this._index[k];\n\n          // value @ k\n          callback(this._values[k], [i, j], me);\n        }\n      } else {\n        // create a cache holding all defined values\n        var values = {};\n        for (var _k2 = k0; _k2 < k1; _k2++) {\n          var _i6 = this._index[_k2];\n          values[_i6] = this._values[_k2];\n        }\n\n        // loop over all rows (indexes can be unordered so we can't use that),\n        // and either read the value or zero\n        for (var _i7 = 0; _i7 < rows; _i7++) {\n          var value = _i7 in values ? values[_i7] : 0;\n          callback(value, [_i7, j], me);\n        }\n      }\n    }\n  };\n\n  /**\n   * Iterate over the matrix elements, skipping zeros\n   * @return {Iterable<{ value, index: number[] }>}\n   */\n  SparseMatrix.prototype[Symbol.iterator] = function* () {\n    if (!this._values) {\n      throw new Error('Cannot iterate a Pattern only matrix');\n    }\n    var columns = this._size[1];\n    for (var j = 0; j < columns; j++) {\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        yield {\n          value: this._values[k],\n          index: [i, j]\n        };\n      }\n    }\n  };\n\n  /**\n   * Create an Array with a copy of the data of the SparseMatrix\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.toArray = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, true);\n  };\n\n  /**\n   * Get the primitive value of the SparseMatrix: a two dimensions array\n   * @memberof SparseMatrix\n   * @returns {Array} array\n   */\n  SparseMatrix.prototype.valueOf = function () {\n    return _toArray(this._values, this._index, this._ptr, this._size, false);\n  };\n  function _toArray(values, index, ptr, size, copy) {\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n    // result\n    var a = [];\n    // vars\n    var i, j;\n    // initialize array\n    for (i = 0; i < rows; i++) {\n      a[i] = [];\n      for (j = 0; j < columns; j++) {\n        a[i][j] = 0;\n      }\n    }\n\n    // loop columns\n    for (j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        i = index[k];\n        // set value (use one for pattern matrix)\n        a[i][j] = values ? copy ? clone(values[k]) : values[k] : 1;\n      }\n    }\n    return a;\n  }\n\n  /**\n   * Get a string representation of the matrix, with optional formatting options.\n   * @memberof SparseMatrix\n   * @param {Object | number | Function} [options]  Formatting options. See\n   *                                                lib/utils/number:format for a\n   *                                                description of the available\n   *                                                options.\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.format = function (options) {\n    // rows and columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n    // density\n    var density = this.density();\n    // rows & columns\n    var str = 'Sparse Matrix [' + format(rows, options) + ' x ' + format(columns, options) + '] density: ' + format(density, options) + '\\n';\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop k within [k0, k1[\n      for (var k = k0; k < k1; k++) {\n        // row index\n        var i = this._index[k];\n        // append value\n        str += '\\n    (' + format(i, options) + ', ' + format(j, options) + ') ==> ' + (this._values ? format(this._values[k], options) : 'X');\n      }\n    }\n    return str;\n  };\n\n  /**\n   * Get a string representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {string} str\n   */\n  SparseMatrix.prototype.toString = function () {\n    return format(this.toArray());\n  };\n\n  /**\n   * Get a JSON representation of the matrix\n   * @memberof SparseMatrix\n   * @returns {Object}\n   */\n  SparseMatrix.prototype.toJSON = function () {\n    return {\n      mathjs: 'SparseMatrix',\n      values: this._values,\n      index: this._index,\n      ptr: this._ptr,\n      size: this._size,\n      datatype: this._datatype\n    };\n  };\n\n  /**\n   * Get the kth Matrix diagonal.\n   *\n   * @memberof SparseMatrix\n   * @param {number | BigNumber} [k=0]     The kth diagonal where the vector will retrieved.\n   *\n   * @returns {Matrix}                     The matrix vector with the diagonal values.\n   */\n  SparseMatrix.prototype.diagonal = function (k) {\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows & columns\n    var rows = this._size[0];\n    var columns = this._size[1];\n\n    // number diagonal values\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // diagonal arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n    // initial ptr value\n    ptr[0] = 0;\n    // loop columns\n    for (var j = kSuper; j < columns && values.length < n; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = this._ptr[j];\n      var k1 = this._ptr[j + 1];\n      // loop x within [k0, k1[\n      for (var x = k0; x < k1; x++) {\n        // row index\n        var i = this._index[x];\n        // check row\n        if (i === j - kSuper + kSub) {\n          // value on this column\n          values.push(this._values[x]);\n          // store row\n          index[values.length - 1] = i - kSub;\n          // exit loop\n          break;\n        }\n      }\n    }\n    // close ptr\n    ptr.push(values.length);\n    // return matrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [n, 1]\n    });\n  };\n\n  /**\n   * Generate a matrix from a JSON object\n   * @memberof SparseMatrix\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"SparseMatrix\", \"values\": [], \"index\": [], \"ptr\": [], \"size\": []}`,\n   *                       where mathjs is optional\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.fromJSON = function (json) {\n    return new SparseMatrix(json);\n  };\n\n  /**\n   * Create a diagonal matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {Array} size                       The matrix size.\n   * @param {number | Array | Matrix } value   The values for the diagonal.\n   * @param {number | BigNumber} [k=0]         The kth diagonal where the vector will be filled in.\n   * @param {number} [defaultValue]            The default value for non-diagonal\n   * @param {string} [datatype]                The Matrix datatype, values must be of this datatype.\n   *\n   * @returns {SparseMatrix}\n   */\n  SparseMatrix.diagonal = function (size, value, k, defaultValue, datatype) {\n    if (!isArray(size)) {\n      throw new TypeError('Array expected, size parameter');\n    }\n    if (size.length !== 2) {\n      throw new Error('Only two dimensions matrix are supported');\n    }\n\n    // map size & validate\n    size = size.map(function (s) {\n      // check it is a big number\n      if (isBigNumber(s)) {\n        // convert it\n        s = s.toNumber();\n      }\n      // validate arguments\n      if (!isNumber(s) || !isInteger(s) || s < 1) {\n        throw new Error('Size values must be positive integers');\n      }\n      return s;\n    });\n\n    // validate k if any\n    if (k) {\n      // convert BigNumber to a number\n      if (isBigNumber(k)) {\n        k = k.toNumber();\n      }\n      // is must be an integer\n      if (!isNumber(k) || !isInteger(k)) {\n        throw new TypeError('The parameter k must be an integer number');\n      }\n    } else {\n      // default value\n      k = 0;\n    }\n\n    // equal signature to use\n    var eq = equalScalar;\n    // zero value\n    var zero = 0;\n    if (isString(datatype)) {\n      // find signature that matches (datatype, datatype)\n      eq = typed.find(equalScalar, [datatype, datatype]) || equalScalar;\n      // convert 0 to the same datatype\n      zero = typed.convert(0, datatype);\n    }\n    var kSuper = k > 0 ? k : 0;\n    var kSub = k < 0 ? -k : 0;\n\n    // rows and columns\n    var rows = size[0];\n    var columns = size[1];\n\n    // number of non-zero items\n    var n = Math.min(rows - kSub, columns - kSuper);\n\n    // value extraction function\n    var _value;\n\n    // check value\n    if (isArray(value)) {\n      // validate array\n      if (value.length !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid value array length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value[i];\n      };\n    } else if (isMatrix(value)) {\n      // matrix size\n      var ms = value.size();\n      // validate matrix\n      if (ms.length !== 1 || ms[0] !== n) {\n        // number of values in array must be n\n        throw new Error('Invalid matrix length');\n      }\n      // define function\n      _value = function _value(i) {\n        // return value @ i\n        return value.get([i]);\n      };\n    } else {\n      // define function\n      _value = function _value() {\n        // return value\n        return value;\n      };\n    }\n\n    // create arrays\n    var values = [];\n    var index = [];\n    var ptr = [];\n\n    // loop items\n    for (var j = 0; j < columns; j++) {\n      // number of rows with value\n      ptr.push(values.length);\n      // diagonal index\n      var i = j - kSuper;\n      // check we need to set diagonal value\n      if (i >= 0 && i < n) {\n        // get value @ i\n        var v = _value(i);\n        // check for zero\n        if (!eq(v, zero)) {\n          // column\n          index.push(i + kSub);\n          // add value\n          values.push(v);\n        }\n      }\n    }\n    // last value should be number of values\n    ptr.push(values.length);\n    // create SparseMatrix\n    return new SparseMatrix({\n      values,\n      index,\n      ptr,\n      size: [rows, columns]\n    });\n  };\n\n  /**\n   * Swap rows i and j in Matrix.\n   *\n   * @memberof SparseMatrix\n   * @param {number} i       Matrix row index 1\n   * @param {number} j       Matrix row index 2\n   *\n   * @return {Matrix}        The matrix reference\n   */\n  SparseMatrix.prototype.swapRows = function (i, j) {\n    // check index\n    if (!isNumber(i) || !isInteger(i) || !isNumber(j) || !isInteger(j)) {\n      throw new Error('Row index must be positive integers');\n    }\n    // check dimensions\n    if (this._size.length !== 2) {\n      throw new Error('Only two dimensional matrix is supported');\n    }\n    // validate index\n    validateIndex(i, this._size[0]);\n    validateIndex(j, this._size[0]);\n\n    // swap rows\n    SparseMatrix._swapRows(i, j, this._size[1], this._values, this._index, this._ptr);\n    // return current instance\n    return this;\n  };\n\n  /**\n   * Loop rows with data in column j.\n   *\n   * @param {number} j            Column\n   * @param {Array} values        Matrix values\n   * @param {Array} index         Matrix row indeces\n   * @param {Array} ptr           Matrix column pointers\n   * @param {Function} callback   Callback function invoked for every row in column j\n   */\n  SparseMatrix._forEachRow = function (j, values, index, ptr, callback) {\n    // indeces for column j\n    var k0 = ptr[j];\n    var k1 = ptr[j + 1];\n    // loop\n    for (var k = k0; k < k1; k++) {\n      // invoke callback\n      callback(index[k], values[k]);\n    }\n  };\n\n  /**\n   * Swap rows x and y in Sparse Matrix data structures.\n   *\n   * @param {number} x         Matrix row index 1\n   * @param {number} y         Matrix row index 2\n   * @param {number} columns   Number of columns in matrix\n   * @param {Array} values     Matrix values\n   * @param {Array} index      Matrix row indeces\n   * @param {Array} ptr        Matrix column pointers\n   */\n  SparseMatrix._swapRows = function (x, y, columns, values, index, ptr) {\n    // loop columns\n    for (var j = 0; j < columns; j++) {\n      // k0 <= k < k1 where k0 = _ptr[j] && k1 = _ptr[j+1]\n      var k0 = ptr[j];\n      var k1 = ptr[j + 1];\n      // find value index @ x\n      var kx = _getValueIndex(x, k0, k1, index);\n      // find value index @ x\n      var ky = _getValueIndex(y, k0, k1, index);\n      // check both rows exist in matrix\n      if (kx < k1 && ky < k1 && index[kx] === x && index[ky] === y) {\n        // swap values (check for pattern matrix)\n        if (values) {\n          var v = values[kx];\n          values[kx] = values[ky];\n          values[ky] = v;\n        }\n        // next column\n        continue;\n      }\n      // check x row exist & no y row\n      if (kx < k1 && index[kx] === x && (ky >= k1 || index[ky] !== y)) {\n        // value @ x (check for pattern matrix)\n        var vx = values ? values[kx] : undefined;\n        // insert value @ y\n        index.splice(ky, 0, y);\n        if (values) {\n          values.splice(ky, 0, vx);\n        }\n        // remove value @ x (adjust array index if needed)\n        index.splice(ky <= kx ? kx + 1 : kx, 1);\n        if (values) {\n          values.splice(ky <= kx ? kx + 1 : kx, 1);\n        }\n        // next column\n        continue;\n      }\n      // check y row exist & no x row\n      if (ky < k1 && index[ky] === y && (kx >= k1 || index[kx] !== x)) {\n        // value @ y (check for pattern matrix)\n        var vy = values ? values[ky] : undefined;\n        // insert value @ x\n        index.splice(kx, 0, x);\n        if (values) {\n          values.splice(kx, 0, vy);\n        }\n        // remove value @ y (adjust array index if needed)\n        index.splice(kx <= ky ? ky + 1 : ky, 1);\n        if (values) {\n          values.splice(kx <= ky ? ky + 1 : ky, 1);\n        }\n      }\n    }\n  };\n  return SparseMatrix;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}