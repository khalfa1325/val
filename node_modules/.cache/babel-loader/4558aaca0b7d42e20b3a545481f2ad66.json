{"ast":null,"code":"import { isChain } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    math,\n    typed\n  } = _ref;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n\n\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n\n\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n\n\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n\n\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n\n\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n\n\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n\n      return undefined; // if not a function, ignore\n    });\n  }\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n\n\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n\n      var args = [this.value];\n\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args); // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n\n\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, () => arg0[_name]);\n        }\n      }; // createProxy(values)\n\n\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n\n  }; // create proxy for everything that is in math.js\n\n  Chain.createProxy(math); // register on the import event, automatically add a proxy for every imported function.\n\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n\n  return Chain;\n}, {\n  isClass: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/chain/Chain.js"],"names":["isChain","format","hasOwnProperty","lazy","factory","name","dependencies","createChainClass","_ref","on","math","typed","Chain","value","SyntaxError","prototype","type","done","valueOf","toString","toJSON","mathjs","fromJSON","json","createProxy","fn","chainify","createLazyProxy","resolver","outerResolver","undefined","arguments","length","args","i","isTypedFunction","sigObject","resolve","params","Error","implementation","apply","arg0","arg1","_loop","_name","excludedNames","expression","docs","classes","error","path","isClass"],"mappings":"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","sourcesContent":["import { isChain } from '../../utils/is.js';\nimport { format } from '../../utils/string.js';\nimport { hasOwnProperty, lazy } from '../../utils/object.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Chain';\nvar dependencies = ['?on', 'math', 'typed'];\nexport var createChainClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    on,\n    math,\n    typed\n  } = _ref;\n  /**\n   * @constructor Chain\n   * Wrap any value in a chain, allowing to perform chained operations on\n   * the value.\n   *\n   * All methods available in the math.js library can be called upon the chain,\n   * and then will be evaluated with the value itself as first argument.\n   * The chain can be closed by executing chain.done(), which will return\n   * the final value.\n   *\n   * The Chain has a number of special functions:\n   * - done()             Finalize the chained operation and return the\n   *                      chain's value.\n   * - valueOf()          The same as done()\n   * - toString()         Returns a string representation of the chain's value.\n   *\n   * @param {*} [value]\n   */\n  function Chain(value) {\n    if (!(this instanceof Chain)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    if (isChain(value)) {\n      this.value = value.value;\n    } else {\n      this.value = value;\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Chain.prototype.type = 'Chain';\n  Chain.prototype.isChain = true;\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method valueOf()\n   * @returns {*} value\n   */\n  Chain.prototype.done = function () {\n    return this.value;\n  };\n\n  /**\n   * Close the chain. Returns the final value.\n   * Does the same as method done()\n   * @returns {*} value\n   */\n  Chain.prototype.valueOf = function () {\n    return this.value;\n  };\n\n  /**\n   * Get a string representation of the value in the chain\n   * @returns {string}\n   */\n  Chain.prototype.toString = function () {\n    return format(this.value);\n  };\n\n  /**\n   * Get a JSON representation of the chain\n   * @returns {Object}\n   */\n  Chain.prototype.toJSON = function () {\n    return {\n      mathjs: 'Chain',\n      value: this.value\n    };\n  };\n\n  /**\n   * Instantiate a Chain from its JSON representation\n   * @param {Object} json  An object structured like\n   *                       `{\"mathjs\": \"Chain\", value: ...}`,\n   *                       where mathjs is optional\n   * @returns {Chain}\n   */\n  Chain.fromJSON = function (json) {\n    return new Chain(json.value);\n  };\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {Function} fn      The function to be proxied\n   *                           If fn is no function, it is silently ignored.\n   * @private\n   */\n  function createProxy(name, fn) {\n    if (typeof fn === 'function') {\n      Chain.prototype[name] = chainify(fn);\n    }\n  }\n\n  /**\n   * Create a proxy method for the chain\n   * @param {string} name\n   * @param {function} resolver   The function resolving with the\n   *                              function to be proxied\n   * @private\n   */\n  function createLazyProxy(name, resolver) {\n    lazy(Chain.prototype, name, function outerResolver() {\n      var fn = resolver();\n      if (typeof fn === 'function') {\n        return chainify(fn);\n      }\n      return undefined; // if not a function, ignore\n    });\n  }\n\n  /**\n   * Make a function chainable\n   * @param {function} fn\n   * @return {Function} chain function\n   * @private\n   */\n  function chainify(fn) {\n    return function () {\n      // Here, `this` will be the context of a Chain instance\n      if (arguments.length === 0) {\n        return new Chain(fn(this.value));\n      }\n      var args = [this.value];\n      for (var i = 0; i < arguments.length; i++) {\n        args[i + 1] = arguments[i];\n      }\n      if (typed.isTypedFunction(fn)) {\n        var sigObject = typed.resolve(fn, args);\n        // We want to detect if a rest parameter has matched across the\n        // value in the chain and the current arguments of this call.\n        // That is the case if and only if the matching signature has\n        // exactly one parameter (which then must be a rest parameter\n        // as it is matching at least two actual arguments).\n        if (sigObject.params.length === 1) {\n          throw new Error('chain function ' + fn.name + ' cannot match rest parameter between chain value and additional arguments.');\n        }\n        return new Chain(sigObject.implementation.apply(fn, args));\n      }\n      return new Chain(fn.apply(fn, args));\n    };\n  }\n\n  /**\n   * Create a proxy for a single method, or an object with multiple methods.\n   * Example usage:\n   *\n   *   Chain.createProxy('add', function add (x, y) {...})\n   *   Chain.createProxy({\n   *     add:      function add (x, y) {...},\n   *     subtract: function subtract (x, y) {...}\n   *   }\n   *\n   * @param {string | Object} arg0   A name (string), or an object with\n   *                                 functions\n   * @param {*} [arg1]               A function, when arg0 is a name\n   */\n  Chain.createProxy = function (arg0, arg1) {\n    if (typeof arg0 === 'string') {\n      // createProxy(name, value)\n      createProxy(arg0, arg1);\n    } else {\n      var _loop = function _loop(_name) {\n        if (hasOwnProperty(arg0, _name) && excludedNames[_name] === undefined) {\n          createLazyProxy(_name, () => arg0[_name]);\n        }\n      };\n      // createProxy(values)\n      for (var _name in arg0) {\n        _loop(_name);\n      }\n    }\n  };\n  var excludedNames = {\n    expression: true,\n    docs: true,\n    type: true,\n    classes: true,\n    json: true,\n    error: true,\n    isChain: true // conflicts with the property isChain of a Chain instance\n  };\n\n  // create proxy for everything that is in math.js\n  Chain.createProxy(math);\n\n  // register on the import event, automatically add a proxy for every imported function.\n  if (on) {\n    on('import', function (name, resolver, path) {\n      if (!path) {\n        // an imported function (not a data type or something special)\n        createLazyProxy(name, resolver);\n      }\n    });\n  }\n  return Chain;\n}, {\n  isClass: true\n});"]},"metadata":{},"sourceType":"module"}