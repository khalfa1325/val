{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix', 'concat'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n\n      if (y === null) {\n        return x !== null;\n      }\n\n      if (x === undefined) {\n        return y !== undefined;\n      }\n\n      if (y === undefined) {\n        return x !== undefined;\n      }\n\n      return !equalScalar(x, y);\n    }\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/relational/unequal.js"],"names":["factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","name","dependencies","createUnequal","_ref","typed","config","equalScalar","matrix","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","createUnequalNumber","elop","_unequal","SS","DS","Ss","x","y","_ref2","anyAny","undefined"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,IAAIC,IAAI,GAAG,SAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,QAAnC,EAA6C,aAA7C,EAA4D,QAA5D,CAAnB;AACA,OAAO,IAAIC,aAAa,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC5E,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,MAJE;AAKFC,IAAAA,WALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AAQA,MAAIO,aAAa,GAAGd,mBAAmB,CAAC;AACtCQ,IAAAA;AADsC,GAAD,CAAvC;AAGA,MAAIO,aAAa,GAAGd,mBAAmB,CAAC;AACtCO,IAAAA,KADsC;AAEtCI,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAII,aAAa,GAAGd,mBAAmB,CAAC;AACtCM,IAAAA,KADsC;AAEtCI,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIK,oBAAoB,GAAGd,0BAA0B,CAAC;AACpDK,IAAAA,KADoD;AAEpDG,IAAAA,MAFoD;AAGpDE,IAAAA;AAHoD,GAAD,CAArD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOL,KAAK,CAACJ,IAAD,EAAOc,mBAAmB,CAAC;AACrCV,IAAAA,KADqC;AAErCE,IAAAA;AAFqC,GAAD,CAA1B,EAGRO,oBAAoB,CAAC;AACvBE,IAAAA,IAAI,EAAEC,QADiB;AAEvBC,IAAAA,EAAE,EAAEN,aAFmB;AAGvBO,IAAAA,EAAE,EAAER,aAHmB;AAIvBS,IAAAA,EAAE,EAAEP;AAJmB,GAAD,CAHZ,CAAZ;;AASA,WAASI,QAAT,CAAkBI,CAAlB,EAAqBC,CAArB,EAAwB;AACtB,WAAO,CAACf,WAAW,CAACc,CAAD,EAAIC,CAAJ,CAAnB;AACD;AACF,CAjFgD,CAA1C;AAkFP,OAAO,IAAIP,mBAAmB,GAAGnB,OAAO,CAACK,IAAD,EAAO,CAAC,OAAD,EAAU,aAAV,CAAP,EAAiCsB,KAAK,IAAI;AAChF,MAAI;AACFlB,IAAAA,KADE;AAEFE,IAAAA;AAFE,MAGAgB,KAHJ;AAIA,SAAOlB,KAAK,CAACJ,IAAD,EAAO;AACjB,gBAAY,SAASuB,MAAT,CAAgBH,CAAhB,EAAmBC,CAAnB,EAAsB;AAChC;AACA,UAAID,CAAC,KAAK,IAAV,EAAgB;AACd,eAAOC,CAAC,KAAK,IAAb;AACD;;AACD,UAAIA,CAAC,KAAK,IAAV,EAAgB;AACd,eAAOD,CAAC,KAAK,IAAb;AACD;;AACD,UAAIA,CAAC,KAAKI,SAAV,EAAqB;AACnB,eAAOH,CAAC,KAAKG,SAAb;AACD;;AACD,UAAIH,CAAC,KAAKG,SAAV,EAAqB;AACnB,eAAOJ,CAAC,KAAKI,SAAb;AACD;;AACD,aAAO,CAAClB,WAAW,CAACc,CAAD,EAAIC,CAAJ,CAAnB;AACD;AAhBgB,GAAP,CAAZ;AAkBD,CAvBuC,CAAjC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nvar name = 'unequal';\nvar dependencies = ['typed', 'config', 'equalScalar', 'matrix', 'DenseMatrix', 'concat'];\nexport var createUnequal = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    equalScalar,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Test whether two values are unequal.\n   *\n   * The function tests whether the relative difference between x and y is\n   * larger than the configured epsilon. The function cannot be used to compare\n   * values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * In case of complex numbers, x.re must unequal y.re, or x.im must unequal y.im.\n   * Strings are compared by their numerical value.\n   *\n   * Values `null` and `undefined` are compared strictly, thus `null` is unequal\n   * with everything except `null`, and `undefined` is unequal with everything\n   * except `undefined`.\n   *\n   * Syntax:\n   *\n   *    math.unequal(x, y)\n   *\n   * Examples:\n   *\n   *    math.unequal(2 + 2, 3)       // returns true\n   *    math.unequal(2 + 2, 4)       // returns false\n   *\n   *    const a = math.unit('50 cm')\n   *    const b = math.unit('5 m')\n   *    math.unequal(a, b)           // returns false\n   *\n   *    const c = [2, 5, 1]\n   *    const d = [2, 7, 1]\n   *\n   *    math.unequal(c, d)           // returns [false, true, false]\n   *    math.deepEqual(c, d)         // returns false\n   *\n   *    math.unequal(0, null)        // returns true\n   * See also:\n   *\n   *    equal, deepEqual, smaller, smallerEq, larger, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Complex | Unit | string | Array | Matrix | undefined} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the compared values are unequal, else returns false\n   */\n  return typed(name, createUnequalNumber({\n    typed,\n    equalScalar\n  }), matrixAlgorithmSuite({\n    elop: _unequal,\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n  function _unequal(x, y) {\n    return !equalScalar(x, y);\n  }\n});\nexport var createUnequalNumber = factory(name, ['typed', 'equalScalar'], _ref2 => {\n  var {\n    typed,\n    equalScalar\n  } = _ref2;\n  return typed(name, {\n    'any, any': function anyAny(x, y) {\n      // strict equality for null and undefined?\n      if (x === null) {\n        return y !== null;\n      }\n      if (y === null) {\n        return x !== null;\n      }\n      if (x === undefined) {\n        return y !== undefined;\n      }\n      if (y === undefined) {\n        return x !== undefined;\n      }\n      return !equalScalar(x, y);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}