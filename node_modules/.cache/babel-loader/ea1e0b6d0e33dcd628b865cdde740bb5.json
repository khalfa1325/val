{"ast":null,"code":"import { isArray, isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix', 'getMatrixDataType'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix,\n    getMatrixDataType\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     An Array with Booleans\n   *     A Matrix with the Set values\n   *     A Matrix with Booleans\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n\n    this._dimensions = [];\n    this._sourceSize = [];\n    this._isScalar = true;\n\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      var argIsArray = isArray(arg);\n      var argIsMatrix = isMatrix(arg);\n      var sourceSize = null;\n\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n\n        this._isScalar = false;\n      } else if (argIsArray || argIsMatrix) {\n        // create matrix\n        var m = void 0;\n\n        if (getMatrixDataType(arg) === 'boolean') {\n          if (argIsArray) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg).valueOf());\n          if (argIsMatrix) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg._data).valueOf());\n          sourceSize = arg.valueOf().length;\n        } else {\n          m = _createImmutableMatrix(arg.valueOf());\n        }\n\n        this._dimensions.push(m); // size\n\n\n        var size = m.size(); // scalar\n\n        if (size.length !== 1 || size[0] !== 1 || sourceSize !== null) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n\n      this._sourceSize.push(sourceSize); // TODO: implement support for wildcard '*'\n\n    }\n  }\n  /**\n   * Attach type information\n   */\n\n\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    } // create matrix\n\n\n    return new ImmutableDenseMatrix(arg);\n  }\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n\n\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    index._sourceSize = this._sourceSize;\n    return index;\n  };\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n\n\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n\n\n  Index.prototype.size = function () {\n    var size = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n\n    return size;\n  };\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n\n\n  Index.prototype.max = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n\n    return values;\n  };\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n\n\n  Index.prototype.min = function () {\n    var values = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n\n    return values;\n  };\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n\n\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n\n\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n\n\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n\n\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n\n\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.toArray = function () {\n    var array = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n\n    return array;\n  };\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n\n\n  Index.prototype.valueOf = Index.prototype.toArray;\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n\n  Index.prototype.toString = function () {\n    var strings = [];\n\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n\n    return '[' + strings.join(', ') + ']';\n  };\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n\n\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n\n\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n\n  return Index;\n}, {\n  isClass: true\n});\n/**\n * Receives an array of booleans and returns an array of Numbers for Index\n * @param {Array} booleanArrayIndex An array of booleans\n * @return {Array} A set of numbers ready for index\n */\n\nfunction _booleansArrayToNumbersForIndex(booleanArrayIndex) {\n  // gets an array of booleans and returns an array of numbers\n  var indexOfNumbers = [];\n  booleanArrayIndex.forEach((bool, idx) => {\n    if (bool) {\n      indexOfNumbers.push(idx);\n    }\n  });\n  return indexOfNumbers;\n}","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/MatrixIndex.js"],"names":["isArray","isMatrix","isRange","clone","isInteger","factory","name","dependencies","createIndexClass","_ref","ImmutableDenseMatrix","getMatrixDataType","Index","ranges","SyntaxError","_dimensions","_sourceSize","_isScalar","i","ii","arguments","length","arg","argIsArray","argIsMatrix","sourceSize","push","m","_createImmutableMatrix","_booleansArrayToNumbersForIndex","valueOf","_data","size","TypeError","prototype","type","isIndex","l","index","create","apply","d","max","values","range","min","forEach","callback","dimension","dim","isObjectProperty","getObjectProperty","isScalar","toArray","array","toString","strings","JSON","stringify","join","toJSON","mathjs","dimensions","fromJSON","json","isClass","booleanArrayIndex","indexOfNumbers","bool","idx"],"mappings":"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","sourcesContent":["import { isArray, isMatrix, isRange } from '../../utils/is.js';\nimport { clone } from '../../utils/object.js';\nimport { isInteger } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'Index';\nvar dependencies = ['ImmutableDenseMatrix', 'getMatrixDataType'];\nexport var createIndexClass = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    ImmutableDenseMatrix,\n    getMatrixDataType\n  } = _ref;\n  /**\n   * Create an index. An Index can store ranges and sets for multiple dimensions.\n   * Matrix.get, Matrix.set, and math.subset accept an Index as input.\n   *\n   * Usage:\n   *     const index = new Index(range1, range2, matrix1, array1, ...)\n   *\n   * Where each parameter can be any of:\n   *     A number\n   *     A string (containing a name of an object property)\n   *     An instance of Range\n   *     An Array with the Set values\n   *     An Array with Booleans\n   *     A Matrix with the Set values\n   *     A Matrix with Booleans\n   *\n   * The parameters start, end, and step must be integer numbers.\n   *\n   * @class Index\n   * @Constructor Index\n   * @param {...*} ranges\n   */\n  function Index(ranges) {\n    if (!(this instanceof Index)) {\n      throw new SyntaxError('Constructor must be called with the new operator');\n    }\n    this._dimensions = [];\n    this._sourceSize = [];\n    this._isScalar = true;\n    for (var i = 0, ii = arguments.length; i < ii; i++) {\n      var arg = arguments[i];\n      var argIsArray = isArray(arg);\n      var argIsMatrix = isMatrix(arg);\n      var sourceSize = null;\n      if (isRange(arg)) {\n        this._dimensions.push(arg);\n        this._isScalar = false;\n      } else if (argIsArray || argIsMatrix) {\n        // create matrix\n        var m = void 0;\n        if (getMatrixDataType(arg) === 'boolean') {\n          if (argIsArray) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg).valueOf());\n          if (argIsMatrix) m = _createImmutableMatrix(_booleansArrayToNumbersForIndex(arg._data).valueOf());\n          sourceSize = arg.valueOf().length;\n        } else {\n          m = _createImmutableMatrix(arg.valueOf());\n        }\n        this._dimensions.push(m);\n        // size\n        var size = m.size();\n        // scalar\n        if (size.length !== 1 || size[0] !== 1 || sourceSize !== null) {\n          this._isScalar = false;\n        }\n      } else if (typeof arg === 'number') {\n        this._dimensions.push(_createImmutableMatrix([arg]));\n      } else if (typeof arg === 'string') {\n        // object property (arguments.count should be 1)\n        this._dimensions.push(arg);\n      } else {\n        throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');\n      }\n      this._sourceSize.push(sourceSize);\n      // TODO: implement support for wildcard '*'\n    }\n  }\n\n  /**\n   * Attach type information\n   */\n  Index.prototype.type = 'Index';\n  Index.prototype.isIndex = true;\n  function _createImmutableMatrix(arg) {\n    // loop array elements\n    for (var i = 0, l = arg.length; i < l; i++) {\n      if (typeof arg[i] !== 'number' || !isInteger(arg[i])) {\n        throw new TypeError('Index parameters must be positive integer numbers');\n      }\n    }\n    // create matrix\n    return new ImmutableDenseMatrix(arg);\n  }\n\n  /**\n   * Create a clone of the index\n   * @memberof Index\n   * @return {Index} clone\n   */\n  Index.prototype.clone = function () {\n    var index = new Index();\n    index._dimensions = clone(this._dimensions);\n    index._isScalar = this._isScalar;\n    index._sourceSize = this._sourceSize;\n    return index;\n  };\n\n  /**\n   * Create an index from an array with ranges/numbers\n   * @memberof Index\n   * @param {Array.<Array | number>} ranges\n   * @return {Index} index\n   * @private\n   */\n  Index.create = function (ranges) {\n    var index = new Index();\n    Index.apply(index, ranges);\n    return index;\n  };\n\n  /**\n   * Retrieve the size of the index, the number of elements for each dimension.\n   * @memberof Index\n   * @returns {number[]} size\n   */\n  Index.prototype.size = function () {\n    var size = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var d = this._dimensions[i];\n      size[i] = typeof d === 'string' ? 1 : d.size()[0];\n    }\n    return size;\n  };\n\n  /**\n   * Get the maximum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} max\n   */\n  Index.prototype.max = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.max();\n    }\n    return values;\n  };\n\n  /**\n   * Get the minimum value for each of the indexes ranges.\n   * @memberof Index\n   * @returns {number[]} min\n   */\n  Index.prototype.min = function () {\n    var values = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var range = this._dimensions[i];\n      values[i] = typeof range === 'string' ? range : range.min();\n    }\n    return values;\n  };\n\n  /**\n   * Loop over each of the ranges of the index\n   * @memberof Index\n   * @param {Function} callback   Called for each range with a Range as first\n   *                              argument, the dimension as second, and the\n   *                              index object as third.\n   */\n  Index.prototype.forEach = function (callback) {\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      callback(this._dimensions[i], i, this);\n    }\n  };\n\n  /**\n   * Retrieve the dimension for the given index\n   * @memberof Index\n   * @param {Number} dim                  Number of the dimension\n   * @returns {Range | null} range\n   */\n  Index.prototype.dimension = function (dim) {\n    return this._dimensions[dim] || null;\n  };\n\n  /**\n   * Test whether this index contains an object property\n   * @returns {boolean} Returns true if the index is an object property\n   */\n  Index.prototype.isObjectProperty = function () {\n    return this._dimensions.length === 1 && typeof this._dimensions[0] === 'string';\n  };\n\n  /**\n   * Returns the object property name when the Index holds a single object property,\n   * else returns null\n   * @returns {string | null}\n   */\n  Index.prototype.getObjectProperty = function () {\n    return this.isObjectProperty() ? this._dimensions[0] : null;\n  };\n\n  /**\n   * Test whether this index contains only a single value.\n   *\n   * This is the case when the index is created with only scalar values as ranges,\n   * not for ranges resolving into a single value.\n   * @memberof Index\n   * @return {boolean} isScalar\n   */\n  Index.prototype.isScalar = function () {\n    return this._isScalar;\n  };\n\n  /**\n   * Expand the Index into an array.\n   * For example new Index([0,3], [2,7]) returns [[0,1,2], [2,3,4,5,6]]\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.toArray = function () {\n    var array = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      array.push(typeof dimension === 'string' ? dimension : dimension.toArray());\n    }\n    return array;\n  };\n\n  /**\n   * Get the primitive value of the Index, a two dimensional array.\n   * Equivalent to Index.toArray().\n   * @memberof Index\n   * @returns {Array} array\n   */\n  Index.prototype.valueOf = Index.prototype.toArray;\n\n  /**\n   * Get the string representation of the index, for example '[2:6]' or '[0:2:10, 4:7, [1,2,3]]'\n   * @memberof Index\n   * @returns {String} str\n   */\n  Index.prototype.toString = function () {\n    var strings = [];\n    for (var i = 0, ii = this._dimensions.length; i < ii; i++) {\n      var dimension = this._dimensions[i];\n      if (typeof dimension === 'string') {\n        strings.push(JSON.stringify(dimension));\n      } else {\n        strings.push(dimension.toString());\n      }\n    }\n    return '[' + strings.join(', ') + ']';\n  };\n\n  /**\n   * Get a JSON representation of the Index\n   * @memberof Index\n   * @returns {Object} Returns a JSON object structured as:\n   *                   `{\"mathjs\": \"Index\", \"ranges\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   */\n  Index.prototype.toJSON = function () {\n    return {\n      mathjs: 'Index',\n      dimensions: this._dimensions\n    };\n  };\n\n  /**\n   * Instantiate an Index from a JSON object\n   * @memberof Index\n   * @param {Object} json A JSON object structured as:\n   *                     `{\"mathjs\": \"Index\", \"dimensions\": [{\"mathjs\": \"Range\", start: 0, end: 10, step:1}, ...]}`\n   * @return {Index}\n   */\n  Index.fromJSON = function (json) {\n    return Index.create(json.dimensions);\n  };\n  return Index;\n}, {\n  isClass: true\n});\n\n/**\n * Receives an array of booleans and returns an array of Numbers for Index\n * @param {Array} booleanArrayIndex An array of booleans\n * @return {Array} A set of numbers ready for index\n */\nfunction _booleansArrayToNumbersForIndex(booleanArrayIndex) {\n  // gets an array of booleans and returns an array of numbers\n  var indexOfNumbers = [];\n  booleanArrayIndex.forEach((bool, idx) => {\n    if (bool) {\n      indexOfNumbers.push(idx);\n    }\n  });\n  return indexOfNumbers;\n}"]},"metadata":{},"sourceType":"module"}