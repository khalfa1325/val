{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nvar name = 'zpk2tf';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'number'];\nexport var createZpk2tf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    number\n  } = _ref;\n  /**\n     * Compute the transfer function of a zero-pole-gain model.\n     *\n     * Syntax:\n     *      math.zpk2tf(z, p, k)\n     *\n     * Examples:\n     *    math.zpk2tf([1, 2], [-1, -2], 1)    // returns [[1, -3, 2], [1, 3, 2]]\n     *\n     * See also:\n     *   freqz\n     *\n     * @param {Array} z Array of zeros values\n     * @param {Array} p Array of poles values\n     * @param {number} k Gain value\n     * @return {Array} Two dimensional array containing the numerator (first row) and denominator (second row) polynomials\n     *\n     */\n\n  return typed(name, {\n    'Array,Array,number': function ArrayArrayNumber(z, p, k) {\n      return _zpk2tf(z, p, k);\n    },\n    'Array,Array': function ArrayArray(z, p) {\n      return _zpk2tf(z, p, 1);\n    },\n    'Matrix,Matrix,number': function MatrixMatrixNumber(z, p, k) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), k);\n    },\n    'Matrix,Matrix': function MatrixMatrix(z, p) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), 1);\n    }\n  });\n\n  function _zpk2tf(z, p, k) {\n    // if z is bignumber, convert it to number\n    if (z.some(el => el.type === 'BigNumber')) {\n      z = z.map(el => number(el));\n    } // if p is bignumber, convert it to number\n\n\n    if (p.some(el => el.type === 'BigNumber')) {\n      p = p.map(el => number(el));\n    }\n\n    var num = [Complex(1, 0)];\n    var den = [Complex(1, 0)];\n\n    for (var i = 0; i < z.length; i++) {\n      var zero = z[i];\n      if (typeof zero === 'number') zero = Complex(zero, 0);\n      num = _multiply(num, [Complex(1, 0), Complex(-zero.re, -zero.im)]);\n    }\n\n    for (var _i = 0; _i < p.length; _i++) {\n      var pole = p[_i];\n      if (typeof pole === 'number') pole = Complex(pole, 0);\n      den = _multiply(den, [Complex(1, 0), Complex(-pole.re, -pole.im)]);\n    }\n\n    for (var _i2 = 0; _i2 < num.length; _i2++) {\n      num[_i2] = multiply(num[_i2], k);\n    }\n\n    return [num, den];\n  }\n\n  function _multiply(a, b) {\n    var c = [];\n\n    for (var i = 0; i < a.length + b.length - 1; i++) {\n      c[i] = Complex(0, 0);\n\n      for (var j = 0; j < a.length; j++) {\n        if (i - j >= 0 && i - j < b.length) {\n          c[i] = add(c[i], multiply(a[j], b[i - j]));\n        }\n      }\n    }\n\n    return c;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/signal/zpk2tf.js"],"names":["factory","name","dependencies","createZpk2tf","_ref","typed","add","multiply","Complex","number","ArrayArrayNumber","z","p","k","_zpk2tf","ArrayArray","MatrixMatrixNumber","valueOf","MatrixMatrix","some","el","type","map","num","den","i","length","zero","_multiply","re","im","_i","pole","_i2","a","b","c","j"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nvar name = 'zpk2tf';\nvar dependencies = ['typed', 'add', 'multiply', 'Complex', 'number'];\nexport var createZpk2tf = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    Complex,\n    number\n  } = _ref;\n  /**\n     * Compute the transfer function of a zero-pole-gain model.\n     *\n     * Syntax:\n     *      math.zpk2tf(z, p, k)\n     *\n     * Examples:\n     *    math.zpk2tf([1, 2], [-1, -2], 1)    // returns [[1, -3, 2], [1, 3, 2]]\n     *\n     * See also:\n     *   freqz\n     *\n     * @param {Array} z Array of zeros values\n     * @param {Array} p Array of poles values\n     * @param {number} k Gain value\n     * @return {Array} Two dimensional array containing the numerator (first row) and denominator (second row) polynomials\n     *\n     */\n  return typed(name, {\n    'Array,Array,number': function ArrayArrayNumber(z, p, k) {\n      return _zpk2tf(z, p, k);\n    },\n    'Array,Array': function ArrayArray(z, p) {\n      return _zpk2tf(z, p, 1);\n    },\n    'Matrix,Matrix,number': function MatrixMatrixNumber(z, p, k) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), k);\n    },\n    'Matrix,Matrix': function MatrixMatrix(z, p) {\n      return _zpk2tf(z.valueOf(), p.valueOf(), 1);\n    }\n  });\n  function _zpk2tf(z, p, k) {\n    // if z is bignumber, convert it to number\n    if (z.some(el => el.type === 'BigNumber')) {\n      z = z.map(el => number(el));\n    }\n    // if p is bignumber, convert it to number\n    if (p.some(el => el.type === 'BigNumber')) {\n      p = p.map(el => number(el));\n    }\n    var num = [Complex(1, 0)];\n    var den = [Complex(1, 0)];\n    for (var i = 0; i < z.length; i++) {\n      var zero = z[i];\n      if (typeof zero === 'number') zero = Complex(zero, 0);\n      num = _multiply(num, [Complex(1, 0), Complex(-zero.re, -zero.im)]);\n    }\n    for (var _i = 0; _i < p.length; _i++) {\n      var pole = p[_i];\n      if (typeof pole === 'number') pole = Complex(pole, 0);\n      den = _multiply(den, [Complex(1, 0), Complex(-pole.re, -pole.im)]);\n    }\n    for (var _i2 = 0; _i2 < num.length; _i2++) {\n      num[_i2] = multiply(num[_i2], k);\n    }\n    return [num, den];\n  }\n  function _multiply(a, b) {\n    var c = [];\n    for (var i = 0; i < a.length + b.length - 1; i++) {\n      c[i] = Complex(0, 0);\n      for (var j = 0; j < a.length; j++) {\n        if (i - j >= 0 && i - j < b.length) {\n          c[i] = add(c[i], multiply(a[j], b[i - j]));\n        }\n      }\n    }\n    return c;\n  }\n});"]},"metadata":{},"sourceType":"module"}