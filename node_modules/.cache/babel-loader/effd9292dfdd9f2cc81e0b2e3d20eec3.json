{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * To avoid confusion with the matrix secant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Secant of x\n   */\n\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/trigonometry/sec.js"],"names":["factory","secNumber","createTrigUnit","name","dependencies","createSec","_ref","typed","BigNumber","_BigNumber","trigUnit","number","Complex","x","sec","div","cos"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,IAAIC,IAAI,GAAG,KAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,WAAV,CAAnB;AACA,OAAO,IAAIC,SAAS,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACxE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,SAAS,EAAEC;AAFT,MAGAH,IAHJ;AAIA,MAAII,QAAQ,GAAGR,cAAc,CAAC;AAC5BK,IAAAA;AAD4B,GAAD,CAA7B;AAIA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOA,KAAK,CAACJ,IAAD,EAAO;AACjBQ,IAAAA,MAAM,EAAEV,SADS;AAEjBW,IAAAA,OAAO,EAAEC,CAAC,IAAIA,CAAC,CAACC,GAAF,EAFG;AAGjBN,IAAAA,SAAS,EAAEK,CAAC,IAAI,IAAIJ,UAAJ,CAAe,CAAf,EAAkBM,GAAlB,CAAsBF,CAAC,CAACG,GAAF,EAAtB;AAHC,GAAP,EAITN,QAJS,CAAZ;AAKD,CApC4C,CAAtC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { secNumber } from '../../plain/number/index.js';\nimport { createTrigUnit } from './trigUnit.js';\nvar name = 'sec';\nvar dependencies = ['typed', 'BigNumber'];\nexport var createSec = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    BigNumber: _BigNumber\n  } = _ref;\n  var trigUnit = createTrigUnit({\n    typed\n  });\n\n  /**\n   * Calculate the secant of a value, defined as `sec(x) = 1/cos(x)`.\n   *\n   * To avoid confusion with the matrix secant, this function does not\n   * apply to matrices.\n   *\n   * Syntax:\n   *\n   *    math.sec(x)\n   *\n   * Examples:\n   *\n   *    math.sec(2)      // returns number -2.4029979617223822\n   *    1 / math.cos(2)  // returns number -2.4029979617223822\n   *\n   * See also:\n   *\n   *    cos, csc, cot\n   *\n   * @param {number | BigNumber | Complex | Unit} x  Function input\n   * @return {number | BigNumber | Complex} Secant of x\n   */\n  return typed(name, {\n    number: secNumber,\n    Complex: x => x.sec(),\n    BigNumber: x => new _BigNumber(1).div(x.cos())\n  }, trigUnit);\n});"]},"metadata":{},"sourceType":"module"}