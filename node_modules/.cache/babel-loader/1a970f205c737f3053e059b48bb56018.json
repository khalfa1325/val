{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isRelationalNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n\n\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n\n\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n\n\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n\n      return ret;\n    }\n\n  }\n\n  _defineProperty(RelationalNode, \"name\", name);\n\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/node/RelationalNode.js"],"names":["_defineProperty","getPrecedence","escape","getSafeProperty","latexOperators","factory","name","dependencies","createRelationalNode","_ref","Node","operatorMap","equal","unequal","smaller","larger","smallerEq","largerEq","RelationalNode","constructor","conditionals","params","Array","isArray","TypeError","length","type","isRelationalNode","_compile","math","argNames","self","compiled","map","p","evalRelationalNode","scope","args","context","evalLhs","evalRhs","i","condFn","forEach","callback","n","slice","_ifNode","clone","_toString","options","parenthesis","precedence","implicit","paramStrings","index","paramPrecedence","toString","ret","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","isClass","isNode"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { getPrecedence } from '../operators.js';\nimport { escape } from '../../utils/string.js';\nimport { getSafeProperty } from '../../utils/customs.js';\nimport { latexOperators } from '../../utils/latex.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'RelationalNode';\nvar dependencies = ['Node'];\nexport var createRelationalNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    Node\n  } = _ref;\n  var operatorMap = {\n    equal: '==',\n    unequal: '!=',\n    smaller: '<',\n    larger: '>',\n    smallerEq: '<=',\n    largerEq: '>='\n  };\n  class RelationalNode extends Node {\n    /**\n     * A node representing a chained conditional expression, such as 'x > y > z'\n     *\n     * @param {String[]} conditionals\n     *     An array of conditional operators used to compare the parameters\n     * @param {Node[]} params\n     *     The parameters that will be compared\n     *\n     * @constructor RelationalNode\n     * @extends {Node}\n     */\n    constructor(conditionals, params) {\n      super();\n      if (!Array.isArray(conditionals)) {\n        throw new TypeError('Parameter conditionals must be an array');\n      }\n      if (!Array.isArray(params)) {\n        throw new TypeError('Parameter params must be an array');\n      }\n      if (conditionals.length !== params.length - 1) {\n        throw new TypeError('Parameter params must contain exactly one more element ' + 'than parameter conditionals');\n      }\n      this.conditionals = conditionals;\n      this.params = params;\n    }\n    get type() {\n      return name;\n    }\n    get isRelationalNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var self = this;\n      var compiled = this.params.map(p => p._compile(math, argNames));\n      return function evalRelationalNode(scope, args, context) {\n        var evalLhs;\n        var evalRhs = compiled[0](scope, args, context);\n        for (var i = 0; i < self.conditionals.length; i++) {\n          evalLhs = evalRhs;\n          evalRhs = compiled[i + 1](scope, args, context);\n          var condFn = getSafeProperty(math, self.conditionals[i]);\n          if (!condFn(evalLhs, evalRhs)) {\n            return false;\n          }\n        }\n        return true;\n      };\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      this.params.forEach((n, i) => callback(n, 'params[' + i + ']', this), this);\n    }\n\n    /**\n     * Create a new RelationalNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {RelationalNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      return new RelationalNode(this.conditionals.slice(), this.params.map((n, i) => this._ifNode(callback(n, 'params[' + i + ']', this)), this));\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {RelationalNode}\n     */\n    clone() {\n      return new RelationalNode(this.conditionals, this.params);\n    }\n\n    /**\n     * Get string representation.\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toString(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '(' + p.toString(options) + ')' : p.toString(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += ' ' + operatorMap[this.conditionals[i]];\n        ret += ' ' + paramStrings[i + 1];\n      }\n      return ret;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        conditionals: this.conditionals,\n        params: this.params\n      };\n    }\n\n    /**\n     * Instantiate a RelationalNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"RelationalNode\", \"conditionals\": ..., \"params\": ...}`,\n     *     where mathjs is optional\n     * @returns {RelationalNode}\n     */\n    static fromJSON(json) {\n      return new RelationalNode(json.conditionals, json.params);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    toHTML(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '<span class=\"math-parenthesis math-round-parenthesis\">(</span>' + p.toHTML(options) + '<span class=\"math-parenthesis math-round-parenthesis\">)</span>' : p.toHTML(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += '<span class=\"math-operator math-binary-operator ' + 'math-explicit-binary-operator\">' + escape(operatorMap[this.conditionals[i]]) + '</span>' + paramStrings[i + 1];\n      }\n      return ret;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string} str\n     */\n    _toTex(options) {\n      var parenthesis = options && options.parenthesis ? options.parenthesis : 'keep';\n      var precedence = getPrecedence(this, parenthesis, options && options.implicit);\n      var paramStrings = this.params.map(function (p, index) {\n        var paramPrecedence = getPrecedence(p, parenthesis, options && options.implicit);\n        return parenthesis === 'all' || paramPrecedence !== null && paramPrecedence <= precedence ? '\\\\left(' + p.toTex(options) + '\\right)' : p.toTex(options);\n      });\n      var ret = paramStrings[0];\n      for (var i = 0; i < this.conditionals.length; i++) {\n        ret += latexOperators[this.conditionals[i]] + paramStrings[i + 1];\n      }\n      return ret;\n    }\n  }\n  _defineProperty(RelationalNode, \"name\", name);\n  return RelationalNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}