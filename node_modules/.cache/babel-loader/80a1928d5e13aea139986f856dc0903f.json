{"ast":null,"code":"import { matrix, multiply, add, subtract, identity, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = matrix(initialEstimate);\n    this.covariance = matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = multiply(this.covariance, multiply(this.estimate, inv(add(this.lambda, multiply(multiply(measurement, this.covariance), measurement))))); // Calculate estimation error\n\n    const error = subtract(measurement, multiply(this.estimate, measurement)); // Update estimate\n\n    this.estimate = add(this.estimate, multiply(gain, error)); // Update covariance\n\n    this.covariance = multiply(this.covariance, subtract(identity(this.covariance.size()[0]), multiply(multiply(measurement, this.covariance), measurement)));\n    return this.estimate.toArray();\n  }\n\n}\n\nexport default AdaptiveFilter;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/src/pages/AdjustPsotion/SensorFusion.js"],"names":["matrix","multiply","add","subtract","identity","inv","AdaptiveFilter","constructor","initialEstimate","initialCovariance","lambda","estimate","covariance","update","measurement","gain","error","size","toArray"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,GAA3B,EAAgCC,QAAhC,EAA0CC,QAA1C,EAAoDC,GAApD,QAA+D,QAA/D;;AAEA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,iBAAlB,EAAqCC,MAArC,EAA6C;AACtD,SAAKC,QAAL,GAAgBX,MAAM,CAACQ,eAAD,CAAtB;AACA,SAAKI,UAAL,GAAkBZ,MAAM,CAACS,iBAAD,CAAxB;AACA,SAAKC,MAAL,GAAcA,MAAd,CAHsD,CAGhC;AACvB;;AAEDG,EAAAA,MAAM,CAACC,WAAD,EAAc;AAClB;AACA,UAAMC,IAAI,GAAGd,QAAQ,CACnB,KAAKW,UADc,EAEnBX,QAAQ,CAAC,KAAKU,QAAN,EAAgBN,GAAG,CAACH,GAAG,CAAC,KAAKQ,MAAN,EAAcT,QAAQ,CAACA,QAAQ,CAACa,WAAD,EAAc,KAAKF,UAAnB,CAAT,EAAyCE,WAAzC,CAAtB,CAAJ,CAAnB,CAFW,CAArB,CAFkB,CAOlB;;AACA,UAAME,KAAK,GAAGb,QAAQ,CAACW,WAAD,EAAcb,QAAQ,CAAC,KAAKU,QAAN,EAAgBG,WAAhB,CAAtB,CAAtB,CARkB,CAUlB;;AACA,SAAKH,QAAL,GAAgBT,GAAG,CAAC,KAAKS,QAAN,EAAgBV,QAAQ,CAACc,IAAD,EAAOC,KAAP,CAAxB,CAAnB,CAXkB,CAalB;;AACA,SAAKJ,UAAL,GAAkBX,QAAQ,CAAC,KAAKW,UAAN,EAAkBT,QAAQ,CAACC,QAAQ,CAAC,KAAKQ,UAAL,CAAgBK,IAAhB,GAAuB,CAAvB,CAAD,CAAT,EAAsChB,QAAQ,CAACA,QAAQ,CAACa,WAAD,EAAc,KAAKF,UAAnB,CAAT,EAAyCE,WAAzC,CAA9C,CAA1B,CAA1B;AAEA,WAAO,KAAKH,QAAL,CAAcO,OAAd,EAAP;AACD;;AAxBkB;;AA2BrB,eAAeZ,cAAf","sourcesContent":["import { matrix, multiply, add, subtract, identity, inv } from 'mathjs';\n\nclass AdaptiveFilter {\n  constructor(initialEstimate, initialCovariance, lambda) {\n    this.estimate = matrix(initialEstimate);\n    this.covariance = matrix(initialCovariance);\n    this.lambda = lambda; // Forgetting factor\n  }\n\n  update(measurement) {\n    // Calculate Kalman gain\n    const gain = multiply(\n      this.covariance,\n      multiply(this.estimate, inv(add(this.lambda, multiply(multiply(measurement, this.covariance), measurement))))\n    );\n\n    // Calculate estimation error\n    const error = subtract(measurement, multiply(this.estimate, measurement));\n\n    // Update estimate\n    this.estimate = add(this.estimate, multiply(gain, error));\n\n    // Update covariance\n    this.covariance = multiply(this.covariance, subtract(identity(this.covariance.size()[0]), multiply(multiply(measurement, this.covariance), measurement)));\n\n    return this.estimate.toArray();\n  }\n}\n\nexport default AdaptiveFilter;\n"]},"metadata":{},"sourceType":"module"}