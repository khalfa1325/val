{"ast":null,"code":"var exec = require('child_process').exec;\n\nvar util = require('util');\n\nvar linuxProvider = '/usr/bin/nmcli';\nvar fields = {\n  'SSID': 'ssid',\n  'BSSID': 'mac',\n  'CHAN': 'channel'\n};\n\nfunction parseNmcli(terms, str) {\n  var out = str.split('\\n');\n  var cells = [];\n  var info = {};\n  var linesPerCell = Object.keys(fields).length;\n\n  for (var i = 0, l = out.length; i < l; i++) {\n    var line = out[i].trim();\n\n    if (!line.length) {\n      continue;\n    }\n\n    if (i % linesPerCell == 0) {\n      cells.push(info);\n      info = {};\n    }\n\n    var components = line.split(\":\");\n    var fieldName = components.shift();\n    var fieldValue = components.join(\":\");\n    var cellField = fields[terms[fieldName]];\n    info[cellField] = fieldValue.trim();\n  }\n\n  cells.push(info);\n  cells.shift();\n  return cells;\n}\n\nfunction scan(terms, callback) {\n  exec(linuxProvider + ' device wifi rescan', function (err, stdout, stderr) {\n    var fieldNames = Object.keys(fields).join(\",\");\n    exec(linuxProvider + ' --terse --mode multiline --fields ' + fieldNames + ' device wifi', function (err, stdout, stderr) {\n      if (err) {\n        callback(err, null);\n        return;\n      }\n\n      callback(null, parseNmcli(terms, stdout));\n    });\n  });\n}\n\nexports.scan = scan;\nexports.utility = linuxProvider;\nexports.parse = parseNmcli;","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/node-wifiscanner2/lib/nmcli.js"],"names":["exec","require","util","linuxProvider","fields","parseNmcli","terms","str","out","split","cells","info","linesPerCell","Object","keys","length","i","l","line","trim","push","components","fieldName","shift","fieldValue","join","cellField","scan","callback","err","stdout","stderr","fieldNames","exports","utility","parse"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,eAAD,CAAP,CAAyBD,IAApC;;AACA,IAAIE,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,aAAa,GAAG,gBAApB;AAEA,IAAIC,MAAM,GAAG;AACT,UAAQ,MADC;AAET,WAAS,KAFA;AAGT,UAAQ;AAHC,CAAb;;AAMA,SAASC,UAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;AAC5B,MAAIC,GAAG,GAAGD,GAAG,CAACE,KAAJ,CAAU,IAAV,CAAV;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,IAAI,GAAG,EAAX;AAEA,MAAIC,YAAY,GAAGC,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBW,MAAvC;;AACA,OAAK,IAAIC,CAAC,GAAC,CAAN,EAASC,CAAC,GAACT,GAAG,CAACO,MAApB,EAA4BC,CAAC,GAACC,CAA9B,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,QAAIE,IAAI,GAAGV,GAAG,CAACQ,CAAD,CAAH,CAAOG,IAAP,EAAX;;AACA,QAAI,CAACD,IAAI,CAACH,MAAV,EAAkB;AACd;AACH;;AAED,QAAGC,CAAC,GAAGJ,YAAJ,IAAoB,CAAvB,EAA0B;AACtBF,MAAAA,KAAK,CAACU,IAAN,CAAWT,IAAX;AACAA,MAAAA,IAAI,GAAG,EAAP;AACH;;AACD,QAAIU,UAAU,GAAGH,IAAI,CAACT,KAAL,CAAW,GAAX,CAAjB;AACA,QAAIa,SAAS,GAAGD,UAAU,CAACE,KAAX,EAAhB;AACA,QAAIC,UAAU,GAAGH,UAAU,CAACI,IAAX,CAAgB,GAAhB,CAAjB;AAEA,QAAIC,SAAS,GAAGtB,MAAM,CAACE,KAAK,CAACgB,SAAD,CAAN,CAAtB;AAEAX,IAAAA,IAAI,CAACe,SAAD,CAAJ,GAAkBF,UAAU,CAACL,IAAX,EAAlB;AACH;;AACDT,EAAAA,KAAK,CAACU,IAAN,CAAWT,IAAX;AACAD,EAAAA,KAAK,CAACa,KAAN;AACA,SAAOb,KAAP;AACH;;AAED,SAASiB,IAAT,CAAcrB,KAAd,EAAqBsB,QAArB,EAA+B;AAC3B5B,EAAAA,IAAI,CAACG,aAAa,GAAG,qBAAjB,EAAwC,UAAU0B,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACvE,QAAIC,UAAU,GAAGnB,MAAM,CAACC,IAAP,CAAYV,MAAZ,EAAoBqB,IAApB,CAAyB,GAAzB,CAAjB;AACAzB,IAAAA,IAAI,CAACG,aAAa,GAAG,qCAAhB,GAAwD6B,UAAxD,GAAqE,cAAtE,EAAsF,UAAUH,GAAV,EAAeC,MAAf,EAAuBC,MAAvB,EAA+B;AACrH,UAAIF,GAAJ,EAAS;AACLD,QAAAA,QAAQ,CAACC,GAAD,EAAM,IAAN,CAAR;AACA;AACH;;AACDD,MAAAA,QAAQ,CAAC,IAAD,EAAOvB,UAAU,CAACC,KAAD,EAAQwB,MAAR,CAAjB,CAAR;AACH,KANG,CAAJ;AAOH,GATG,CAAJ;AAUH;;AAEDG,OAAO,CAACN,IAAR,GAAeA,IAAf;AACAM,OAAO,CAACC,OAAR,GAAkB/B,aAAlB;AACA8B,OAAO,CAACE,KAAR,GAAgB9B,UAAhB","sourcesContent":["var exec = require('child_process').exec;\nvar util = require('util');\nvar linuxProvider = '/usr/bin/nmcli';\n\nvar fields = {\n    'SSID': 'ssid',\n    'BSSID': 'mac',\n    'CHAN': 'channel'\n};\n\nfunction parseNmcli(terms, str) {\n    var out = str.split('\\n');\n    var cells = [];\n    var info = {};\n\n    var linesPerCell = Object.keys(fields).length;\n    for (var i=0, l=out.length; i<l; i++) {\n        var line = out[i].trim();\n        if (!line.length) {\n            continue;\n        }\n\n        if(i % linesPerCell == 0) {\n            cells.push(info);\n            info = {};\n        }\n        var components = line.split(\":\");\n        var fieldName = components.shift();\n        var fieldValue = components.join(\":\");\n\n        var cellField = fields[terms[fieldName]];\n\n        info[cellField] = fieldValue.trim();\n    }\n    cells.push(info);\n    cells.shift();\n    return cells;\n}\n\nfunction scan(terms, callback) {\n    exec(linuxProvider + ' device wifi rescan', function (err, stdout, stderr) {\n        var fieldNames = Object.keys(fields).join(\",\");\n        exec(linuxProvider + ' --terse --mode multiline --fields ' + fieldNames + ' device wifi', function (err, stdout, stderr) {\n            if (err) {\n                callback(err, null);\n                return;\n            }\n            callback(null, parseNmcli(terms, stdout));\n        });\n    });\n}\n\nexports.scan = scan;\nexports.utility = linuxProvider;\nexports.parse = parseNmcli;\n"]},"metadata":{},"sourceType":"script"}