{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix', // FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index; // validate input\n\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    } // class name for typing purposes:\n    // readonly property name\n\n\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n\n    get type() {\n      return name;\n    }\n\n    get isAssignmentNode() {\n      return true;\n    }\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n\n\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n\n      var evalValue = this.value._compile(math, argNames);\n\n      var name = this.object.name;\n\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context); // Important:  we pass childObject instead of context:\n\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp); // Important: we pass childObject instead of context:\n\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context); // Important: we pass parent instead of context:\n\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex); // Important:  we pass childObject instead of context\n\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n\n\n    forEach(callback) {\n      callback(this.object, 'object', this);\n\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n\n      callback(this.value, 'value', this);\n    }\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n\n\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n\n      var value = this._ifNode(callback(this.value, 'value', this));\n\n      return new AssignmentNode(object, index, value);\n    }\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n\n\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n\n      return object + index + ' = ' + value;\n    }\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n\n\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n\n\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n\n\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n\n      return object + index + ':=' + value;\n    }\n\n  }\n\n  _defineProperty(AssignmentNode, \"name\", name);\n\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/node/AssignmentNode.js"],"names":["_defineProperty","isAccessorNode","isIndexNode","isNode","isSymbolNode","getSafeProperty","setSafeProperty","factory","accessFactory","assignFactory","getPrecedence","name","dependencies","createAssignmentNode","_ref","subset","matrix","Node","access","assign","needParenthesis","node","parenthesis","implicit","precedence","exprPrecedence","value","AssignmentNode","constructor","object","index","TypeError","Error","isObjectProperty","getObjectProperty","type","isAssignmentNode","_compile","math","argNames","evalObject","evalIndex","evalValue","evalAssignmentNode","scope","args","context","set","prop","childObject","evalParentObject","parentProp","parent","evalParentIndex","parentIndex","forEach","callback","map","_ifNode","clone","_toString","options","toString","toJSON","mathjs","fromJSON","json","toHTML","_toTex","toTex","concat","isClass"],"mappings":"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","sourcesContent":["import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { isAccessorNode, isIndexNode, isNode, isSymbolNode } from '../../utils/is.js';\nimport { getSafeProperty, setSafeProperty } from '../../utils/customs.js';\nimport { factory } from '../../utils/factory.js';\nimport { accessFactory } from './utils/access.js';\nimport { assignFactory } from './utils/assign.js';\nimport { getPrecedence } from '../operators.js';\nvar name = 'AssignmentNode';\nvar dependencies = ['subset', '?matrix',\n// FIXME: should not be needed at all, should be handled by subset\n'Node'];\nexport var createAssignmentNode = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    subset,\n    matrix,\n    Node\n  } = _ref;\n  var access = accessFactory({\n    subset\n  });\n  var assign = assignFactory({\n    subset,\n    matrix\n  });\n\n  /*\n   * Is parenthesis needed?\n   * @param {node} node\n   * @param {string} [parenthesis='keep']\n   * @param {string} implicit\n   * @private\n   */\n  function needParenthesis(node, parenthesis, implicit) {\n    if (!parenthesis) {\n      parenthesis = 'keep';\n    }\n    var precedence = getPrecedence(node, parenthesis, implicit);\n    var exprPrecedence = getPrecedence(node.value, parenthesis, implicit);\n    return parenthesis === 'all' || exprPrecedence !== null && exprPrecedence <= precedence;\n  }\n  class AssignmentNode extends Node {\n    /**\n     * @constructor AssignmentNode\n     * @extends {Node}\n     *\n     * Define a symbol, like `a=3.2`, update a property like `a.b=3.2`, or\n     * replace a subset of a matrix like `A[2,2]=42`.\n     *\n     * Syntax:\n     *\n     *     new AssignmentNode(symbol, value)\n     *     new AssignmentNode(object, index, value)\n     *\n     * Usage:\n     *\n     *    new AssignmentNode(new SymbolNode('a'), new ConstantNode(2))  // a=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode('b'),\n     *                       new ConstantNode(2))   // a.b=2\n     *    new AssignmentNode(new SymbolNode('a'),\n     *                       new IndexNode(1, 2),\n     *                       new ConstantNode(3))  // a[1,2]=3\n     *\n     * @param {SymbolNode | AccessorNode} object\n     *     Object on which to assign a value\n     * @param {IndexNode} [index=null]\n     *     Index, property name or matrix index. Optional. If not provided\n     *     and `object` is a SymbolNode, the property is assigned to the\n     *     global scope.\n     * @param {Node} value\n     *     The value to be assigned\n     */\n    constructor(object, index, value) {\n      super();\n      this.object = object;\n      this.index = value ? index : null;\n      this.value = value || index;\n\n      // validate input\n      if (!isSymbolNode(object) && !isAccessorNode(object)) {\n        throw new TypeError('SymbolNode or AccessorNode expected as \"object\"');\n      }\n      if (isSymbolNode(object) && object.name === 'end') {\n        throw new Error('Cannot assign to symbol \"end\"');\n      }\n      if (this.index && !isIndexNode(this.index)) {\n        // index is optional\n        throw new TypeError('IndexNode expected as \"index\"');\n      }\n      if (!isNode(this.value)) {\n        throw new TypeError('Node expected as \"value\"');\n      }\n    }\n\n    // class name for typing purposes:\n\n    // readonly property name\n    get name() {\n      if (this.index) {\n        return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';\n      } else {\n        return this.object.name || '';\n      }\n    }\n    get type() {\n      return name;\n    }\n    get isAssignmentNode() {\n      return true;\n    }\n\n    /**\n     * Compile a node into a JavaScript function.\n     * This basically pre-calculates as much as possible and only leaves open\n     * calculations which depend on a dynamic scope with variables.\n     * @param {Object} math     Math.js namespace with functions and constants.\n     * @param {Object} argNames An object with argument names as key and `true`\n     *                          as value. Used in the SymbolNode to optimize\n     *                          for arguments from user assigned functions\n     *                          (see FunctionAssignmentNode) or special symbols\n     *                          like `end` (see IndexNode).\n     * @return {function} Returns a function which can be called like:\n     *                        evalNode(scope: Object, args: Object, context: *)\n     */\n    _compile(math, argNames) {\n      var evalObject = this.object._compile(math, argNames);\n      var evalIndex = this.index ? this.index._compile(math, argNames) : null;\n      var evalValue = this.value._compile(math, argNames);\n      var name = this.object.name;\n      if (!this.index) {\n        // apply a variable to the scope, for example `a=2`\n        if (!isSymbolNode(this.object)) {\n          throw new TypeError('SymbolNode expected as object');\n        }\n        return function evalAssignmentNode(scope, args, context) {\n          var value = evalValue(scope, args, context);\n          scope.set(name, value);\n          return value;\n        };\n      } else if (this.index.isObjectProperty()) {\n        // apply an object property for example `a.b=2`\n        var prop = this.index.getObjectProperty();\n        return function evalAssignmentNode(scope, args, context) {\n          var object = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          setSafeProperty(object, prop, value);\n          return value;\n        };\n      } else if (isSymbolNode(this.object)) {\n        // update a matrix subset, for example `a[2]=3`\n        return function evalAssignmentNode(scope, args, context) {\n          var childObject = evalObject(scope, args, context);\n          var value = evalValue(scope, args, context);\n          // Important:  we pass childObject instead of context:\n          var index = evalIndex(scope, args, childObject);\n          scope.set(name, assign(childObject, index, value));\n          return value;\n        };\n      } else {\n        // isAccessorNode(node.object) === true\n        // update a matrix subset, for example `a.b[2]=3`\n\n        // we will not use the compile function of the AccessorNode, but\n        // compile it ourselves here as we need the parent object of the\n        // AccessorNode:\n        // wee need to apply the updated object to parent object\n        var evalParentObject = this.object.object._compile(math, argNames);\n        if (this.object.index.isObjectProperty()) {\n          var parentProp = this.object.index.getObjectProperty();\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            var childObject = getSafeProperty(parent, parentProp);\n            // Important: we pass childObject instead of context:\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            setSafeProperty(parent, parentProp, assign(childObject, index, value));\n            return value;\n          };\n        } else {\n          // if some parameters use the 'end' parameter, we need to calculate\n          // the size\n          var evalParentIndex = this.object.index._compile(math, argNames);\n          return function evalAssignmentNode(scope, args, context) {\n            var parent = evalParentObject(scope, args, context);\n            // Important: we pass parent instead of context:\n            var parentIndex = evalParentIndex(scope, args, parent);\n            var childObject = access(parent, parentIndex);\n            // Important:  we pass childObject instead of context\n            var index = evalIndex(scope, args, childObject);\n            var value = evalValue(scope, args, context);\n            assign(parent, parentIndex, assign(childObject, index, value));\n            return value;\n          };\n        }\n      }\n    }\n\n    /**\n     * Execute a callback for each of the child nodes of this node\n     * @param {function(child: Node, path: string, parent: Node)} callback\n     */\n    forEach(callback) {\n      callback(this.object, 'object', this);\n      if (this.index) {\n        callback(this.index, 'index', this);\n      }\n      callback(this.value, 'value', this);\n    }\n\n    /**\n     * Create a new AssignmentNode whose children are the results of calling\n     * the provided callback function for each child of the original node.\n     * @param {function(child: Node, path: string, parent: Node): Node} callback\n     * @returns {AssignmentNode} Returns a transformed copy of the node\n     */\n    map(callback) {\n      var object = this._ifNode(callback(this.object, 'object', this));\n      var index = this.index ? this._ifNode(callback(this.index, 'index', this)) : null;\n      var value = this._ifNode(callback(this.value, 'value', this));\n      return new AssignmentNode(object, index, value);\n    }\n\n    /**\n     * Create a clone of this node, a shallow copy\n     * @return {AssignmentNode}\n     */\n    clone() {\n      return new AssignmentNode(this.object, this.index, this.value);\n    }\n\n    /**\n     * Get string representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toString(options) {\n      var object = this.object.toString(options);\n      var index = this.index ? this.index.toString(options) : '';\n      var value = this.value.toString(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '(' + value + ')';\n      }\n      return object + index + ' = ' + value;\n    }\n\n    /**\n     * Get a JSON representation of the node\n     * @returns {Object}\n     */\n    toJSON() {\n      return {\n        mathjs: name,\n        object: this.object,\n        index: this.index,\n        value: this.value\n      };\n    }\n\n    /**\n     * Instantiate an AssignmentNode from its JSON representation\n     * @param {Object} json\n     *     An object structured like\n     *     `{\"mathjs\": \"AssignmentNode\", object: ..., index: ..., value: ...}`,\n     *     where mathjs is optional\n     * @returns {AssignmentNode}\n     */\n    static fromJSON(json) {\n      return new AssignmentNode(json.object, json.index, json.value);\n    }\n\n    /**\n     * Get HTML representation\n     * @param {Object} options\n     * @return {string}\n     */\n    toHTML(options) {\n      var object = this.object.toHTML(options);\n      var index = this.index ? this.index.toHTML(options) : '';\n      var value = this.value.toHTML(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = '<span class=\"math-paranthesis math-round-parenthesis\">(</span>' + value + '<span class=\"math-paranthesis math-round-parenthesis\">)</span>';\n      }\n      return object + index + '<span class=\"math-operator math-assignment-operator ' + 'math-variable-assignment-operator math-binary-operator\">=</span>' + value;\n    }\n\n    /**\n     * Get LaTeX representation\n     * @param {Object} options\n     * @return {string}\n     */\n    _toTex(options) {\n      var object = this.object.toTex(options);\n      var index = this.index ? this.index.toTex(options) : '';\n      var value = this.value.toTex(options);\n      if (needParenthesis(this, options && options.parenthesis, options && options.implicit)) {\n        value = \"\\\\left(\".concat(value, \"\\\\right)\");\n      }\n      return object + index + ':=' + value;\n    }\n  }\n  _defineProperty(AssignmentNode, \"name\", name);\n  return AssignmentNode;\n}, {\n  isClass: true,\n  isNode: true\n});"]},"metadata":{},"sourceType":"module"}