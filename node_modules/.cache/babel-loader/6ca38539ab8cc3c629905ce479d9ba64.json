{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'concat'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n\n    return res;\n  });\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': (x, y) => x.lcm(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n\n    if (a.isZero()) {\n      return a;\n    }\n\n    if (b.isZero()) {\n      return b;\n    } // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n\n\n    var prod = a.times(b);\n\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n\n    return prod.div(a).abs();\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/lcm.js"],"names":["factory","createMatAlgo02xDS0","createMatAlgo06xS0S0","createMatAlgo11xS0s","createMatrixAlgorithmSuite","lcmNumber","name","dependencies","createLcm","_ref","typed","matrix","equalScalar","concat","matAlgo02xDS0","matAlgo06xS0S0","matAlgo11xS0s","matrixAlgorithmSuite","lcmTypes","lcmManySignature","referToSelf","self","a","b","args","res","i","length","_lcmBigNumber","x","y","lcm","SS","DS","Ss","isInt","Error","isZero","prod","times","t","mod","div","abs"],"mappings":"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","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createMatAlgo02xDS0 } from '../../type/matrix/utils/matAlgo02xDS0.js';\nimport { createMatAlgo06xS0S0 } from '../../type/matrix/utils/matAlgo06xS0S0.js';\nimport { createMatAlgo11xS0s } from '../../type/matrix/utils/matAlgo11xS0s.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { lcmNumber } from '../../plain/number/index.js';\nvar name = 'lcm';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'concat'];\nexport var createLcm = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    concat\n  } = _ref;\n  var matAlgo02xDS0 = createMatAlgo02xDS0({\n    typed,\n    equalScalar\n  });\n  var matAlgo06xS0S0 = createMatAlgo06xS0S0({\n    typed,\n    equalScalar\n  });\n  var matAlgo11xS0s = createMatAlgo11xS0s({\n    typed,\n    equalScalar\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var lcmTypes = 'number | BigNumber | Fraction | Matrix | Array';\n  var lcmManySignature = {};\n  lcmManySignature[\"\".concat(lcmTypes, \", \").concat(lcmTypes, \", ...\").concat(lcmTypes)] = typed.referToSelf(self => (a, b, args) => {\n    var res = self(a, b);\n    for (var i = 0; i < args.length; i++) {\n      res = self(res, args[i]);\n    }\n    return res;\n  });\n\n  /**\n   * Calculate the least common multiple for two or more values or arrays.\n   *\n   * lcm is defined as:\n   *\n   *     lcm(a, b) = abs(a * b) / gcd(a, b)\n   *\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.lcm(a, b)\n   *    math.lcm(a, b, c, ...)\n   *\n   * Examples:\n   *\n   *    math.lcm(4, 6)               // returns 12\n   *    math.lcm(6, 21)              // returns 42\n   *    math.lcm(6, 21, 5)           // returns 210\n   *\n   *    math.lcm([4, 6], [6, 21])    // returns [12, 42]\n   *\n   * See also:\n   *\n   *    gcd, xgcd\n   *\n   * @param {... number | BigNumber | Array | Matrix} args  Two or more integer numbers\n   * @return {number | BigNumber | Array | Matrix}                           The least common multiple\n   */\n  return typed(name, {\n    'number, number': lcmNumber,\n    'BigNumber, BigNumber': _lcmBigNumber,\n    'Fraction, Fraction': (x, y) => x.lcm(y)\n  }, matrixAlgorithmSuite({\n    SS: matAlgo06xS0S0,\n    DS: matAlgo02xDS0,\n    Ss: matAlgo11xS0s\n  }), lcmManySignature);\n\n  /**\n   * Calculate lcm for two BigNumbers\n   * @param {BigNumber} a\n   * @param {BigNumber} b\n   * @returns {BigNumber} Returns the least common multiple of a and b\n   * @private\n   */\n  function _lcmBigNumber(a, b) {\n    if (!a.isInt() || !b.isInt()) {\n      throw new Error('Parameters in function lcm must be integer numbers');\n    }\n    if (a.isZero()) {\n      return a;\n    }\n    if (b.isZero()) {\n      return b;\n    }\n\n    // https://en.wikipedia.org/wiki/Euclidean_algorithm\n    // evaluate lcm here inline to reduce overhead\n    var prod = a.times(b);\n    while (!b.isZero()) {\n      var t = b;\n      b = a.mod(t);\n      a = t;\n    }\n    return prod.div(a).abs();\n  }\n});"]},"metadata":{},"sourceType":"module"}