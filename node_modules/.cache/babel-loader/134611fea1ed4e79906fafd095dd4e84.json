{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n    var arg3 = x.arg() / 3;\n    var abs = x.abs(); // principal root:\n\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n\n\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n\n      result.value = _cbrtComplex(x.value); // Compute the value\n\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      } // TODO: create a helper function for this\n\n\n      var third;\n\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n\n      var _result = x.pow(third);\n\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n\n      return _result;\n    }\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/arithmetic/cbrt.js"],"names":["factory","isBigNumber","isComplex","isFraction","cbrtNumber","name","dependencies","createCbrt","_ref","config","typed","isNegative","unaryMinus","matrix","Complex","BigNumber","Fraction","number","_cbrtComplex","x","cbrt","Unit","_cbrtUnit","allRoots","arg3","arg","abs","principal","mul","exp","all","Math","PI","value","result","clone","pow","negate","third","div","_result"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,UAAjC,QAAmD,mBAAnD;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,IAAIC,IAAI,GAAG,MAAX;AACA,IAAIC,YAAY,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,YAApB,EAAkC,YAAlC,EAAgD,QAAhD,EAA0D,SAA1D,EAAqE,WAArE,EAAkF,UAAlF,CAAnB;AACA,OAAO,IAAIC,UAAU,GAAG,eAAeP,OAAO,CAACK,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzE,MAAI;AACFC,IAAAA,MADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,UAHE;AAIFC,IAAAA,UAJE;AAKFC,IAAAA,MALE;AAMFC,IAAAA,OANE;AAOFC,IAAAA,SAPE;AAQFC,IAAAA;AARE,MASAR,IATJ;AAUA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOE,KAAK,CAACL,IAAD,EAAO;AACjBY,IAAAA,MAAM,EAAEb,UADS;AAEjB;AACA;AAEAU,IAAAA,OAAO,EAAEI,YALQ;AAMjB,wBAAoBA,YANH;AAOjBH,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBI,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,IAAF,EAAP;AACD,KATgB;AAUjBC,IAAAA,IAAI,EAAEC;AAVW,GAAP,CAAZ;AAaA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,WAASJ,YAAT,CAAsBC,CAAtB,EAAyBI,QAAzB,EAAmC;AACjC;AAEA,QAAIC,IAAI,GAAGL,CAAC,CAACM,GAAF,KAAU,CAArB;AACA,QAAIC,GAAG,GAAGP,CAAC,CAACO,GAAF,EAAV,CAJiC,CAMjC;;AACA,QAAIC,SAAS,GAAG,IAAIb,OAAJ,CAAYV,UAAU,CAACsB,GAAD,CAAtB,EAA6B,CAA7B,EAAgCE,GAAhC,CAAoC,IAAId,OAAJ,CAAY,CAAZ,EAAeU,IAAf,EAAqBK,GAArB,EAApC,CAAhB;;AACA,QAAIN,QAAJ,EAAc;AACZ,UAAIO,GAAG,GAAG,CAACH,SAAD,EAAY,IAAIb,OAAJ,CAAYV,UAAU,CAACsB,GAAD,CAAtB,EAA6B,CAA7B,EAAgCE,GAAhC,CAAoC,IAAId,OAAJ,CAAY,CAAZ,EAAeU,IAAI,GAAGO,IAAI,CAACC,EAAL,GAAU,CAAV,GAAc,CAApC,EAAuCH,GAAvC,EAApC,CAAZ,EAA+F,IAAIf,OAAJ,CAAYV,UAAU,CAACsB,GAAD,CAAtB,EAA6B,CAA7B,EAAgCE,GAAhC,CAAoC,IAAId,OAAJ,CAAY,CAAZ,EAAeU,IAAI,GAAGO,IAAI,CAACC,EAAL,GAAU,CAAV,GAAc,CAApC,EAAuCH,GAAvC,EAApC,CAA/F,CAAV;AACA,aAAOpB,MAAM,CAACI,MAAP,KAAkB,OAAlB,GAA4BiB,GAA5B,GAAkCjB,MAAM,CAACiB,GAAD,CAA/C;AACD,KAHD,MAGO;AACL,aAAOH,SAAP;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASL,SAAT,CAAmBH,CAAnB,EAAsB;AACpB,QAAIA,CAAC,CAACc,KAAF,IAAW/B,SAAS,CAACiB,CAAC,CAACc,KAAH,CAAxB,EAAmC;AACjC,UAAIC,MAAM,GAAGf,CAAC,CAACgB,KAAF,EAAb;AACAD,MAAAA,MAAM,CAACD,KAAP,GAAe,GAAf;AACAC,MAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAW,MAAM,CAAjB,CAAT,CAHiC,CAGH;;AAC9BF,MAAAA,MAAM,CAACD,KAAP,GAAef,YAAY,CAACC,CAAC,CAACc,KAAH,CAA3B,CAJiC,CAIK;;AACtC,aAAOC,MAAP;AACD,KAND,MAMO;AACL,UAAIG,MAAM,GAAG1B,UAAU,CAACQ,CAAC,CAACc,KAAH,CAAvB;;AACA,UAAII,MAAJ,EAAY;AACVlB,QAAAA,CAAC,CAACc,KAAF,GAAUrB,UAAU,CAACO,CAAC,CAACc,KAAH,CAApB;AACD,OAJI,CAML;;;AACA,UAAIK,KAAJ;;AACA,UAAIrC,WAAW,CAACkB,CAAC,CAACc,KAAH,CAAf,EAA0B;AACxBK,QAAAA,KAAK,GAAG,IAAIvB,SAAJ,CAAc,CAAd,EAAiBwB,GAAjB,CAAqB,CAArB,CAAR;AACD,OAFD,MAEO,IAAIpC,UAAU,CAACgB,CAAC,CAACc,KAAH,CAAd,EAAyB;AAC9BK,QAAAA,KAAK,GAAG,IAAItB,QAAJ,CAAa,CAAb,EAAgB,CAAhB,CAAR;AACD,OAFM,MAEA;AACLsB,QAAAA,KAAK,GAAG,IAAI,CAAZ;AACD;;AACD,UAAIE,OAAO,GAAGrB,CAAC,CAACiB,GAAF,CAAME,KAAN,CAAd;;AACA,UAAID,MAAJ,EAAY;AACVG,QAAAA,OAAO,CAACP,KAAR,GAAgBrB,UAAU,CAAC4B,OAAO,CAACP,KAAT,CAA1B;AACD;;AACD,aAAOO,OAAP;AACD;AACF;AACF,CA7H6C,CAAvC","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { isBigNumber, isComplex, isFraction } from '../../utils/is.js';\nimport { cbrtNumber } from '../../plain/number/index.js';\nvar name = 'cbrt';\nvar dependencies = ['config', 'typed', 'isNegative', 'unaryMinus', 'matrix', 'Complex', 'BigNumber', 'Fraction'];\nexport var createCbrt = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    config,\n    typed,\n    isNegative,\n    unaryMinus,\n    matrix,\n    Complex,\n    BigNumber,\n    Fraction\n  } = _ref;\n  /**\n   * Calculate the cubic root of a value.\n   *\n   * To avoid confusion with the matrix cube root, this function does not\n   * apply to matrices. For a matrix, to take the cube root elementwise,\n   * see the examples.\n   *\n   * Syntax:\n   *\n   *    math.cbrt(x)\n   *    math.cbrt(x, allRoots)\n   *\n   * Examples:\n   *\n   *    math.cbrt(27)                  // returns 3\n   *    math.cube(3)                   // returns 27\n   *    math.cbrt(-64)                 // returns -4\n   *    math.cbrt(math.unit('27 m^3')) // returns Unit 3 m\n   *    math.map([27, 64, 125], x => math.cbrt(x))       // returns [3, 4, 5]\n   *\n   *    const x = math.complex('8i')\n   *    math.cbrt(x)                   // returns Complex 1.7320508075689 + i\n   *    math.cbrt(x, true)             // returns Matrix [\n   *                                    //    1.7320508075689 + i\n   *                                    //   -1.7320508075689 + i\n   *                                    //   -2i\n   *                                    // ]\n   *\n   * See also:\n   *\n   *    square, sqrt, cube\n   *\n   * @param {number | BigNumber | Complex | Unit} x\n   *            Value for which to calculate the cubic root.\n   * @param {boolean} [allRoots]  Optional, false by default. Only applicable\n   *            when `x` is a number or complex number. If true, all complex\n   *            roots are returned, if false (default) the principal root is\n   *            returned.\n   * @return {number | BigNumber | Complex | Unit}\n   *            Returns the cubic root of `x`\n   */\n  return typed(name, {\n    number: cbrtNumber,\n    // note: signature 'number, boolean' is also supported,\n    //       created by typed as it knows how to convert number to Complex\n\n    Complex: _cbrtComplex,\n    'Complex, boolean': _cbrtComplex,\n    BigNumber: function BigNumber(x) {\n      return x.cbrt();\n    },\n    Unit: _cbrtUnit\n  });\n\n  /**\n   * Calculate the cubic root for a complex number\n   * @param {Complex} x\n   * @param {boolean} [allRoots]   If true, the function will return an array\n   *                               with all three roots. If false or undefined,\n   *                               the principal root is returned.\n   * @returns {Complex | Array.<Complex> | Matrix.<Complex>} Returns the cubic root(s) of x\n   * @private\n   */\n  function _cbrtComplex(x, allRoots) {\n    // https://www.wikiwand.com/en/Cube_root#/Complex_numbers\n\n    var arg3 = x.arg() / 3;\n    var abs = x.abs();\n\n    // principal root:\n    var principal = new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3).exp());\n    if (allRoots) {\n      var all = [principal, new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 + Math.PI * 2 / 3).exp()), new Complex(cbrtNumber(abs), 0).mul(new Complex(0, arg3 - Math.PI * 2 / 3).exp())];\n      return config.matrix === 'Array' ? all : matrix(all);\n    } else {\n      return principal;\n    }\n  }\n\n  /**\n   * Calculate the cubic root for a Unit\n   * @param {Unit} x\n   * @return {Unit} Returns the cubic root of x\n   * @private\n   */\n  function _cbrtUnit(x) {\n    if (x.value && isComplex(x.value)) {\n      var result = x.clone();\n      result.value = 1.0;\n      result = result.pow(1.0 / 3); // Compute the units\n      result.value = _cbrtComplex(x.value); // Compute the value\n      return result;\n    } else {\n      var negate = isNegative(x.value);\n      if (negate) {\n        x.value = unaryMinus(x.value);\n      }\n\n      // TODO: create a helper function for this\n      var third;\n      if (isBigNumber(x.value)) {\n        third = new BigNumber(1).div(3);\n      } else if (isFraction(x.value)) {\n        third = new Fraction(1, 3);\n      } else {\n        third = 1 / 3;\n      }\n      var _result = x.pow(third);\n      if (negate) {\n        _result.value = unaryMinus(_result.value);\n      }\n      return _result;\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}