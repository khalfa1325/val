{"ast":null,"code":"import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'larger';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLarger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n\n  return typed(name, createLargerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x > y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/relational/larger.js"],"names":["nearlyEqual","bigNearlyEqual","factory","createMatAlgo03xDSf","createMatAlgo07xSSf","createMatAlgo12xSfs","createMatrixAlgorithmSuite","createCompareUnits","name","dependencies","createLarger","_ref","typed","config","matrix","DenseMatrix","concat","matAlgo03xDSf","matAlgo07xSSf","matAlgo12xSfs","matrixAlgorithmSuite","compareUnits","createLargerNumber","x","y","BigNumberBigNumber","gt","epsilon","compare","ComplexComplex","TypeError","SS","DS","Ss","_ref2","numberNumber"],"mappings":"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","sourcesContent":["import { nearlyEqual as bigNearlyEqual } from '../../utils/bignumber/nearlyEqual.js';\nimport { nearlyEqual } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo07xSSf } from '../../type/matrix/utils/matAlgo07xSSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { createCompareUnits } from './compareUnits.js';\nvar name = 'larger';\nvar dependencies = ['typed', 'config', 'matrix', 'DenseMatrix', 'concat'];\nexport var createLarger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    config,\n    matrix,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo07xSSf = createMatAlgo07xSSf({\n    typed,\n    DenseMatrix\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  var compareUnits = createCompareUnits({\n    typed\n  });\n\n  /**\n   * Test whether value x is larger than y.\n   *\n   * The function returns true when x is larger than y and the relative\n   * difference between x and y is larger than the configured epsilon. The\n   * function cannot be used to compare values smaller than approximately 2.22e-16.\n   *\n   * For matrices, the function is evaluated element wise.\n   * Strings are compared by their numerical value.\n   *\n   * Syntax:\n   *\n   *    math.larger(x, y)\n   *\n   * Examples:\n   *\n   *    math.larger(2, 3)             // returns false\n   *    math.larger(5, 2 + 2)         // returns true\n   *\n   *    const a = math.unit('5 cm')\n   *    const b = math.unit('2 inch')\n   *    math.larger(a, b)             // returns false\n   *\n   * See also:\n   *\n   *    equal, unequal, smaller, smallerEq, largerEq, compare\n   *\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} x First value to compare\n   * @param  {number | BigNumber | Fraction | boolean | Unit | string | Array | Matrix} y Second value to compare\n   * @return {boolean | Array | Matrix} Returns true when the x is larger than y, else returns false\n   */\n  return typed(name, createLargerNumber({\n    typed,\n    config\n  }), {\n    'boolean, boolean': (x, y) => x > y,\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return x.gt(y) && !bigNearlyEqual(x, y, config.epsilon);\n    },\n    'Fraction, Fraction': (x, y) => x.compare(y) === 1,\n    'Complex, Complex': function ComplexComplex() {\n      throw new TypeError('No ordering relation is defined for complex numbers');\n    }\n  }, compareUnits, matrixAlgorithmSuite({\n    SS: matAlgo07xSSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});\nexport var createLargerNumber = /* #__PURE__ */factory(name, ['typed', 'config'], _ref2 => {\n  var {\n    typed,\n    config\n  } = _ref2;\n  return typed(name, {\n    'number, number': function numberNumber(x, y) {\n      return x > y && !nearlyEqual(x, y, config.epsilon);\n    }\n  });\n});"]},"metadata":{},"sourceType":"module"}