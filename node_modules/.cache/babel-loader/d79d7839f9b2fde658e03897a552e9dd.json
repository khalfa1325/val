{"ast":null,"code":"import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/utils/isInteger.js"],"names":["deepMap","isInteger","isIntegerNumber","factory","name","dependencies","createIsInteger","_ref","typed","number","BigNumber","x","isInt","Fraction","d","isFinite","n","referToSelf","self"],"mappings":"AAAA,SAASA,OAAT,QAAwB,2BAAxB;AACA,SAASC,SAAS,IAAIC,eAAtB,QAA6C,uBAA7C;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,IAAIC,IAAI,GAAG,WAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,CAAnB;AACA,OAAO,IAAIC,eAAe,GAAG,eAAeH,OAAO,CAACC,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AAC9E,MAAI;AACFC,IAAAA;AADE,MAEAD,IAFJ;AAGA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOC,KAAK,CAACJ,IAAD,EAAO;AACjBK,IAAAA,MAAM,EAAEP,eADS;AAEjB;AAEAQ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,CAAnB,EAAsB;AAC/B,aAAOA,CAAC,CAACC,KAAF,EAAP;AACD,KANgB;AAOjBC,IAAAA,QAAQ,EAAE,SAASA,QAAT,CAAkBF,CAAlB,EAAqB;AAC7B,aAAOA,CAAC,CAACG,CAAF,KAAQ,CAAR,IAAaC,QAAQ,CAACJ,CAAC,CAACK,CAAH,CAA5B;AACD,KATgB;AAUjB,sBAAkBR,KAAK,CAACS,WAAN,CAAkBC,IAAI,IAAIP,CAAC,IAAIX,OAAO,CAACW,CAAD,EAAIO,IAAJ,CAAtC;AAVD,GAAP,CAAZ;AAYD,CA7CkD,CAA5C","sourcesContent":["import { deepMap } from '../../utils/collection.js';\nimport { isInteger as isIntegerNumber } from '../../utils/number.js';\nimport { factory } from '../../utils/factory.js';\nvar name = 'isInteger';\nvar dependencies = ['typed'];\nexport var createIsInteger = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Test whether a value is an integer number.\n   * The function supports `number`, `BigNumber`, and `Fraction`.\n   *\n   * The function is evaluated element-wise in case of Array or Matrix input.\n   *\n   * Syntax:\n   *\n   *     math.isInteger(x)\n   *\n   * Examples:\n   *\n   *    math.isInteger(2)                     // returns true\n   *    math.isInteger(0)                     // returns true\n   *    math.isInteger(0.5)                   // returns false\n   *    math.isInteger(math.bignumber(500))   // returns true\n   *    math.isInteger(math.fraction(4))      // returns true\n   *    math.isInteger('3')                   // returns true\n   *    math.isInteger([3, 0.5, -2])          // returns [true, false, true]\n   *    math.isInteger(math.complex('2-4i'))  // throws an error\n   *\n   * See also:\n   *\n   *    isNumeric, isPositive, isNegative, isZero\n   *\n   * @param {number | BigNumber | Fraction | Array | Matrix} x   Value to be tested\n   * @return {boolean}  Returns true when `x` contains a numeric, integer value.\n   *                    Throws an error in case of an unknown data type.\n   */\n  return typed(name, {\n    number: isIntegerNumber,\n    // TODO: what to do with isInteger(add(0.1, 0.2))  ?\n\n    BigNumber: function BigNumber(x) {\n      return x.isInt();\n    },\n    Fraction: function Fraction(x) {\n      return x.d === 1 && isFinite(x.n);\n    },\n    'Array | Matrix': typed.referToSelf(self => x => deepMap(x, self))\n  });\n});"]},"metadata":{},"sourceType":"module"}