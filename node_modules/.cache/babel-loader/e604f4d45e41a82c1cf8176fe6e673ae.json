{"ast":null,"code":"import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare', 'isInteger'];\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\n\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  });\n  return typed('quantileSeq', {\n    'Array|Matrix, number|BigNumber|Array, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array|Matrix, number|BigNumber|Array, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim))\n  });\n\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/expression/transform/quantileSeq.transform.js"],"names":["factory","createQuantileSeq","lastDimToZeroBase","name","dependencies","createQuantileSeqTransform","_ref","typed","add","multiply","partitionSelect","compare","isInteger","quantileSeq","arr","prob","dim","dimToZeroBase","sorted","isTransformFunction"],"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,iBAAT,QAAkC,0CAAlC;AACA,SAASC,iBAAT,QAAkC,8BAAlC;AACA,IAAIC,IAAI,GAAG,aAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,KAAV,EAAiB,UAAjB,EAA6B,iBAA7B,EAAgD,SAAhD,EAA2D,WAA3D,CAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,0BAA0B,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACzF,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,GAFE;AAGFC,IAAAA,QAHE;AAIFC,IAAAA,eAJE;AAKFC,IAAAA,OALE;AAMFC,IAAAA;AANE,MAOAN,IAPJ;AAQA,MAAIO,WAAW,GAAGZ,iBAAiB,CAAC;AAClCM,IAAAA,KADkC;AAElCC,IAAAA,GAFkC;AAGlCC,IAAAA,QAHkC;AAIlCC,IAAAA,eAJkC;AAKlCC,IAAAA,OALkC;AAMlCC,IAAAA;AANkC,GAAD,CAAnC;AAQA,SAAOL,KAAK,CAAC,aAAD,EAAgB;AAC1B,oDAAgD,CAACO,GAAD,EAAMC,IAAN,EAAYC,GAAZ,KAAoBH,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAYE,aAAa,CAACD,GAAD,CAAzB,CADrD;AAE1B,6DAAyD,CAACF,GAAD,EAAMC,IAAN,EAAYG,MAAZ,EAAoBF,GAApB,KAA4BH,WAAW,CAACC,GAAD,EAAMC,IAAN,EAAYG,MAAZ,EAAoBD,aAAa,CAACD,GAAD,CAAjC;AAFtE,GAAhB,CAAZ;;AAIA,WAASC,aAAT,CAAuBD,GAAvB,EAA4B;AAC1B;AACA,WAAOd,iBAAiB,CAAC,CAAC,EAAD,EAAKc,GAAL,CAAD,CAAjB,CAA6B,CAA7B,CAAP;AACD;AACF,CAzB6D,EAyB3D;AACDG,EAAAA,mBAAmB,EAAE;AADpB,CAzB2D,CAAvD","sourcesContent":["import { factory } from '../../utils/factory.js';\nimport { createQuantileSeq } from '../../function/statistics/quantileSeq.js';\nimport { lastDimToZeroBase } from './utils/lastDimToZeroBase.js';\nvar name = 'quantileSeq';\nvar dependencies = ['typed', 'add', 'multiply', 'partitionSelect', 'compare', 'isInteger'];\n\n/**\n * Attach a transform function to math.quantileSeq\n * Adds a property transform containing the transform function.\n *\n * This transform changed the `dim` parameter of function std\n * from one-based to zero based\n */\nexport var createQuantileSeqTransform = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  } = _ref;\n  var quantileSeq = createQuantileSeq({\n    typed,\n    add,\n    multiply,\n    partitionSelect,\n    compare,\n    isInteger\n  });\n  return typed('quantileSeq', {\n    'Array|Matrix, number|BigNumber|Array, number': (arr, prob, dim) => quantileSeq(arr, prob, dimToZeroBase(dim)),\n    'Array|Matrix, number|BigNumber|Array, boolean, number': (arr, prob, sorted, dim) => quantileSeq(arr, prob, sorted, dimToZeroBase(dim))\n  });\n  function dimToZeroBase(dim) {\n    // TODO: find a better way, maybe lastDimToZeroBase could apply to more cases.\n    return lastDimToZeroBase([[], dim])[1];\n  }\n}, {\n  isTransformFunction: true\n});"]},"metadata":{},"sourceType":"module"}