{"ast":null,"code":"import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/function/logical/or.js"],"names":["createMatAlgo03xDSf","createMatAlgo12xSfs","createMatAlgo05xSfSf","factory","createMatrixAlgorithmSuite","orNumber","name","dependencies","createOr","_ref","typed","matrix","equalScalar","DenseMatrix","concat","matAlgo03xDSf","matAlgo05xSfSf","matAlgo12xSfs","matrixAlgorithmSuite","ComplexComplex","x","y","re","im","BigNumberBigNumber","isZero","isNaN","referToSelf","self","value","SS","DS","Ss"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,0CAApC;AACA,SAASC,mBAAT,QAAoC,0CAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,0BAAT,QAA2C,iDAA3C;AACA,SAASC,QAAT,QAAyB,6BAAzB;AACA,IAAIC,IAAI,GAAG,IAAX;AACA,IAAIC,YAAY,GAAG,CAAC,OAAD,EAAU,QAAV,EAAoB,aAApB,EAAmC,aAAnC,EAAkD,QAAlD,CAAnB;AACA,OAAO,IAAIC,QAAQ,GAAG,eAAeL,OAAO,CAACG,IAAD,EAAOC,YAAP,EAAqBE,IAAI,IAAI;AACvE,MAAI;AACFC,IAAAA,KADE;AAEFC,IAAAA,MAFE;AAGFC,IAAAA,WAHE;AAIFC,IAAAA,WAJE;AAKFC,IAAAA;AALE,MAMAL,IANJ;AAOA,MAAIM,aAAa,GAAGf,mBAAmB,CAAC;AACtCU,IAAAA;AADsC,GAAD,CAAvC;AAGA,MAAIM,cAAc,GAAGd,oBAAoB,CAAC;AACxCQ,IAAAA,KADwC;AAExCE,IAAAA;AAFwC,GAAD,CAAzC;AAIA,MAAIK,aAAa,GAAGhB,mBAAmB,CAAC;AACtCS,IAAAA,KADsC;AAEtCG,IAAAA;AAFsC,GAAD,CAAvC;AAIA,MAAIK,oBAAoB,GAAGd,0BAA0B,CAAC;AACpDM,IAAAA,KADoD;AAEpDC,IAAAA,MAFoD;AAGpDG,IAAAA;AAHoD,GAAD,CAArD;AAMA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACE,SAAOJ,KAAK,CAACJ,IAAD,EAAO;AACjB,sBAAkBD,QADD;AAEjB,wBAAoB,SAASc,cAAT,CAAwBC,CAAxB,EAA2BC,CAA3B,EAA8B;AAChD,aAAOD,CAAC,CAACE,EAAF,KAAS,CAAT,IAAcF,CAAC,CAACG,EAAF,KAAS,CAAvB,IAA4BF,CAAC,CAACC,EAAF,KAAS,CAArC,IAA0CD,CAAC,CAACE,EAAF,KAAS,CAA1D;AACD,KAJgB;AAKjB,4BAAwB,SAASC,kBAAT,CAA4BJ,CAA5B,EAA+BC,CAA/B,EAAkC;AACxD,aAAO,CAACD,CAAC,CAACK,MAAF,EAAD,IAAe,CAACL,CAAC,CAACM,KAAF,EAAhB,IAA6B,CAACL,CAAC,CAACI,MAAF,EAAD,IAAe,CAACJ,CAAC,CAACK,KAAF,EAApD;AACD,KAPgB;AAQjB,kBAAchB,KAAK,CAACiB,WAAN,CAAkBC,IAAI,IAAI,CAACR,CAAD,EAAIC,CAAJ,KAAUO,IAAI,CAACR,CAAC,CAACS,KAAF,IAAW,CAAZ,EAAeR,CAAC,CAACQ,KAAF,IAAW,CAA1B,CAAxC;AARG,GAAP,EASTX,oBAAoB,CAAC;AACtBY,IAAAA,EAAE,EAAEd,cADkB;AAEtBe,IAAAA,EAAE,EAAEhB,aAFkB;AAGtBiB,IAAAA,EAAE,EAAEf;AAHkB,GAAD,CATX,CAAZ;AAcD,CAnE2C,CAArC","sourcesContent":["import { createMatAlgo03xDSf } from '../../type/matrix/utils/matAlgo03xDSf.js';\nimport { createMatAlgo12xSfs } from '../../type/matrix/utils/matAlgo12xSfs.js';\nimport { createMatAlgo05xSfSf } from '../../type/matrix/utils/matAlgo05xSfSf.js';\nimport { factory } from '../../utils/factory.js';\nimport { createMatrixAlgorithmSuite } from '../../type/matrix/utils/matrixAlgorithmSuite.js';\nimport { orNumber } from '../../plain/number/index.js';\nvar name = 'or';\nvar dependencies = ['typed', 'matrix', 'equalScalar', 'DenseMatrix', 'concat'];\nexport var createOr = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed,\n    matrix,\n    equalScalar,\n    DenseMatrix,\n    concat\n  } = _ref;\n  var matAlgo03xDSf = createMatAlgo03xDSf({\n    typed\n  });\n  var matAlgo05xSfSf = createMatAlgo05xSfSf({\n    typed,\n    equalScalar\n  });\n  var matAlgo12xSfs = createMatAlgo12xSfs({\n    typed,\n    DenseMatrix\n  });\n  var matrixAlgorithmSuite = createMatrixAlgorithmSuite({\n    typed,\n    matrix,\n    concat\n  });\n\n  /**\n   * Logical `or`. Test if at least one value is defined with a nonzero/nonempty value.\n   * For matrices, the function is evaluated element wise.\n   *\n   * Syntax:\n   *\n   *    math.or(x, y)\n   *\n   * Examples:\n   *\n   *    math.or(2, 4)   // returns true\n   *\n   *    a = [2, 5, 0]\n   *    b = [0, 22, 0]\n   *    c = 0\n   *\n   *    math.or(a, b)   // returns [true, true, false]\n   *    math.or(b, c)   // returns [false, true, false]\n   *\n   * See also:\n   *\n   *    and, not, xor\n   *\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} x First value to check\n   * @param  {number | BigNumber | Complex | Unit | Array | Matrix} y Second value to check\n   * @return {boolean | Array | Matrix}\n   *            Returns true when one of the inputs is defined with a nonzero/nonempty value.\n   */\n  return typed(name, {\n    'number, number': orNumber,\n    'Complex, Complex': function ComplexComplex(x, y) {\n      return x.re !== 0 || x.im !== 0 || y.re !== 0 || y.im !== 0;\n    },\n    'BigNumber, BigNumber': function BigNumberBigNumber(x, y) {\n      return !x.isZero() && !x.isNaN() || !y.isZero() && !y.isNaN();\n    },\n    'Unit, Unit': typed.referToSelf(self => (x, y) => self(x.value || 0, y.value || 0))\n  }, matrixAlgorithmSuite({\n    SS: matAlgo05xSfSf,\n    DS: matAlgo03xDSf,\n    Ss: matAlgo12xSfs\n  }));\n});"]},"metadata":{},"sourceType":"module"}