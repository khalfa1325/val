{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.typed = factory());\n})(this, function () {\n  'use strict';\n\n  function _createForOfIteratorHelper(o, allowArrayLike) {\n    var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n    if (!it) {\n      if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n        if (it) o = it;\n        var i = 0;\n\n        var F = function F() {};\n\n        return {\n          s: F,\n          n: function n() {\n            if (i >= o.length) return {\n              done: true\n            };\n            return {\n              done: false,\n              value: o[i++]\n            };\n          },\n          e: function e(_e) {\n            throw _e;\n          },\n          f: F\n        };\n      }\n\n      throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n\n    var normalCompletion = true,\n        didErr = false,\n        err;\n    return {\n      s: function s() {\n        it = it.call(o);\n      },\n      n: function n() {\n        var step = it.next();\n        normalCompletion = step.done;\n        return step;\n      },\n      e: function e(_e2) {\n        didErr = true;\n        err = _e2;\n      },\n      f: function f() {\n        try {\n          if (!normalCompletion && it.return != null) it.return();\n        } finally {\n          if (didErr) throw err;\n        }\n      }\n    };\n  }\n\n  function _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n  }\n\n  function _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n\n  function _typeof(obj) {\n    \"@babel/helpers - typeof\";\n\n    return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n      return typeof obj;\n    } : function (obj) {\n      return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    }, _typeof(obj);\n  }\n\n  function ok() {\n    return true;\n  }\n\n  function notOk() {\n    return false;\n  }\n\n  function undef() {\n    return undefined;\n  }\n\n  var NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n  /**\n   * @typedef {{\n   *   params: Param[],\n   *   fn: function,\n   *   test: function,\n   *   implementation: function\n   * }} Signature\n   *\n   * @typedef {{\n   *   types: Type[],\n   *   hasAny: boolean,\n   *   hasConversion: boolean,\n   *   restParam: boolean\n   * }} Param\n   *\n   * @typedef {{\n   *   name: string,\n   *   typeIndex: number,\n   *   test: function,\n   *   isAny: boolean,\n   *   conversion?: ConversionDef,\n   *   conversionIndex: number,\n   * }} Type\n   *\n   * @typedef {{\n   *   from: string,\n   *   to: string,\n   *   convert: function (*) : *\n   * }} ConversionDef\n   *\n   * @typedef {{\n   *   name: string,\n   *   test: function(*) : boolean,\n   *   isAny?: boolean\n   * }} TypeDef\n   */\n\n  /**\n   * @returns {() => function}\n   */\n\n  function create() {\n    // data type tests\n\n    /**\n     * Returns true if the argument is a non-null \"plain\" object\n     */\n    function isPlainObject(x) {\n      return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n    }\n\n    var _types = [{\n      name: 'number',\n      test: function test(x) {\n        return typeof x === 'number';\n      }\n    }, {\n      name: 'string',\n      test: function test(x) {\n        return typeof x === 'string';\n      }\n    }, {\n      name: 'boolean',\n      test: function test(x) {\n        return typeof x === 'boolean';\n      }\n    }, {\n      name: 'Function',\n      test: function test(x) {\n        return typeof x === 'function';\n      }\n    }, {\n      name: 'Array',\n      test: Array.isArray\n    }, {\n      name: 'Date',\n      test: function test(x) {\n        return x instanceof Date;\n      }\n    }, {\n      name: 'RegExp',\n      test: function test(x) {\n        return x instanceof RegExp;\n      }\n    }, {\n      name: 'Object',\n      test: isPlainObject\n    }, {\n      name: 'null',\n      test: function test(x) {\n        return x === null;\n      }\n    }, {\n      name: 'undefined',\n      test: function test(x) {\n        return x === undefined;\n      }\n    }];\n    var anyType = {\n      name: 'any',\n      test: ok,\n      isAny: true\n    }; // Data structures to track the types. As these are local variables in\n    // create(), each typed universe will get its own copy, but the variables\n    // will only be accessible through the (closures of the) functions supplied\n    // as properties of the typed object, not directly.\n    // These will be initialized in clear() below\n\n    var typeMap; // primary store of all types\n\n    var typeList; // Array of just type names, for the sake of ordering\n    // And similar data structures for the type conversions:\n\n    var nConversions = 0; // the actual conversions are stored on a property of the destination types\n    // This is a temporary object, will be replaced with a function at the end\n\n    var typed = {\n      createCount: 0\n    };\n    /**\n     * Takes a type name and returns the corresponding official type object\n     * for that type.\n     *\n     * @param {string} typeName\n     * @returns {TypeDef} type\n     */\n\n    function findType(typeName) {\n      var type = typeMap.get(typeName);\n\n      if (type) {\n        return type;\n      } // Remainder is error handling\n\n\n      var message = 'Unknown type \"' + typeName + '\"';\n      var name = typeName.toLowerCase();\n      var otherName;\n\n      var _iterator = _createForOfIteratorHelper(typeList),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          otherName = _step.value;\n\n          if (otherName.toLowerCase() === name) {\n            message += '. Did you mean \"' + otherName + '\" ?';\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      throw new TypeError(message);\n    }\n    /**\n     * Adds an array `types` of type definitions to this typed instance.\n     * Each type definition should be an object with properties:\n     * 'name' - a string giving the name of the type; 'test' - function\n     * returning a boolean that tests membership in the type; and optionally\n     * 'isAny' - true only for the 'any' type.\n     *\n     * The second optional argument, `before`, gives the name of a type that\n     * these types should be added before. The new types are added in the\n     * order specified.\n     * @param {TypeDef[]} types\n     * @param {string | boolean} [beforeSpec='any'] before\n     */\n\n\n    function addTypes(types) {\n      var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n      var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n      var newTypes = [];\n\n      for (var i = 0; i < types.length; ++i) {\n        if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n          throw new TypeError('Object with properties {name: string, test: function} expected');\n        }\n\n        var typeName = types[i].name;\n\n        if (typeMap.has(typeName)) {\n          throw new TypeError('Duplicate type name \"' + typeName + '\"');\n        }\n\n        newTypes.push(typeName);\n        typeMap.set(typeName, {\n          name: typeName,\n          test: types[i].test,\n          isAny: types[i].isAny,\n          index: beforeIndex + i,\n          conversionsTo: [] // Newly added type can't have any conversions to it\n\n        });\n      } // update the typeList\n\n\n      var affectedTypes = typeList.slice(beforeIndex);\n      typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n      for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n        typeMap.get(typeList[_i]).index = _i;\n      }\n    }\n    /**\n     * Removes all types and conversions from this typed instance.\n     * May cause previously constructed typed-functions to throw\n     * strange errors when they are called with types that do not\n     * match any of their signatures.\n     */\n\n\n    function clear() {\n      typeMap = new Map();\n      typeList = [];\n      nConversions = 0;\n      addTypes([anyType], false);\n    } // initialize the types to the default list\n\n\n    clear();\n    addTypes(_types);\n    /**\n     * Removes all conversions, leaving the types alone.\n     */\n\n    function clearConversions() {\n      var typeName;\n\n      var _iterator2 = _createForOfIteratorHelper(typeList),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          typeName = _step2.value;\n          typeMap.get(typeName).conversionsTo = [];\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      nConversions = 0;\n    }\n    /**\n     * Find the type names that match a value.\n     * @param {*} value\n     * @return {string[]} Array of names of types for which\n     *                  the type test matches the value.\n     */\n\n\n    function findTypeNames(value) {\n      var matches = typeList.filter(function (name) {\n        var type = typeMap.get(name);\n        return !type.isAny && type.test(value);\n      });\n\n      if (matches.length) {\n        return matches;\n      }\n\n      return ['any'];\n    }\n    /**\n     * Check if an entity is a typed function created by any instance\n     * @param {any} entity\n     * @returns {boolean}\n     */\n\n\n    function isTypedFunction(entity) {\n      return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n    }\n    /**\n     * Find a specific signature from a (composed) typed function, for example:\n     *\n     *   typed.findSignature(fn, ['number', 'string'])\n     *   typed.findSignature(fn, 'number, string')\n     *   typed.findSignature(fn, 'number,string', {exact: true})\n     *\n     * This function findSignature will by default return the best match to\n     * the given signature, possibly employing type conversions.\n     *\n     * The (optional) third argument is a plain object giving options\n     * controlling the signature search. Currently the only implemented\n     * option is `exact`: if specified as true (default is false), only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Note that a (possibly different) type matching\n     * `any`, or one or more instances of TYPE matching `...TYPE` are\n     * considered exact matches in this regard, as no conversions are used.\n     *\n     * This function returns a \"signature\" object, as does `typed.resolve()`,\n     * which is a plain object with four keys: `params` (the array of parameters\n     * for this signature), `fn` (the originally supplied function for this\n     * signature), `test` (a generated function that determines if an argument\n     * list matches this signature, and `implementation` (the function to call\n     * on a matching argument list, that performs conversions if necessary and\n     * then calls the originally supplied function).\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature search as documented\n     * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n     *     Returns the matching signature, or throws an error when no signature\n     *     is found.\n     */\n\n\n    function findSignature(fn, signature, options) {\n      if (!isTypedFunction(fn)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      } // Canonicalize input\n\n\n      var exact = options && options.exact;\n      var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n      var params = parseSignature(stringSignature);\n      var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n      if (!exact || canonicalSignature in fn.signatures) {\n        // OK, we can check the internal signatures\n        var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n        if (match) {\n          return match;\n        }\n      } // Oh well, we did not; so we have to go back and check the parameters\n      // one by one, in order to catch things like `any` and rest params.\n      // Note here we can assume there is at least one parameter, because\n      // the empty signature would have matched successfully above.\n\n\n      var nParams = params.length;\n      var remainingSignatures;\n\n      if (exact) {\n        remainingSignatures = [];\n        var name;\n\n        for (name in fn.signatures) {\n          remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n        }\n      } else {\n        remainingSignatures = fn._typedFunctionData.signatures;\n      }\n\n      for (var i = 0; i < nParams; ++i) {\n        var want = params[i];\n        var filteredSignatures = [];\n        var possibility = void 0;\n\n        var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n            _step3;\n\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            possibility = _step3.value;\n            var have = getParamAtIndex(possibility.params, i);\n\n            if (!have || want.restParam && !have.restParam) {\n              continue;\n            }\n\n            if (!have.hasAny) {\n              var _ret = function () {\n                // have to check all of the wanted types are available\n                var haveTypes = paramTypeSet(have);\n\n                if (want.types.some(function (wtype) {\n                  return !haveTypes.has(wtype.name);\n                })) {\n                  return \"continue\";\n                }\n              }();\n\n              if (_ret === \"continue\") continue;\n            } // OK, this looks good\n\n\n            filteredSignatures.push(possibility);\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n\n        remainingSignatures = filteredSignatures;\n        if (remainingSignatures.length === 0) break;\n      } // Return the first remaining signature that was totally matched:\n\n\n      var candidate;\n\n      var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          candidate = _step4.value;\n\n          if (candidate.params.length <= nParams) {\n            return candidate;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n    }\n    /**\n     * Find the proper function to call for a specific signature from\n     * a (composed) typed function, for example:\n     *\n     *   typed.find(fn, ['number', 'string'])\n     *   typed.find(fn, 'number, string')\n     *   typed.find(fn, 'number,string', {exact: true})\n     *\n     * This function find will by default return the best match to\n     * the given signature, possibly employing type conversions (and returning\n     * a function that will perform those conversions as needed). The\n     * (optional) third argument is a plain object giving options contolling\n     * the signature search. Currently only the option `exact` is implemented,\n     * which defaults to \"false\". If `exact` is specified as true, then only\n     * exact matches will be returned (i.e. signatures for which `fn` was\n     * directly defined). Uses of `any` and `...TYPE` are considered exact if\n     * no conversions are necessary to apply the corresponding function.\n     *\n     * @param {Function} fn                   A typed-function\n     * @param {string | string[]} signature\n     *     Signature to be found, can be an array or a comma separated string.\n     * @param {object} options  Controls the signature match as documented\n     * @return {function}\n     *     Returns the function to call for the given signature, or throws an\n     *     error if no match is found.\n     */\n\n\n    function find(fn, signature, options) {\n      return findSignature(fn, signature, options).implementation;\n    }\n    /**\n     * Convert a given value to another data type, specified by type name.\n     *\n     * @param {*} value\n     * @param {string} typeName\n     */\n\n\n    function convert(value, typeName) {\n      // check conversion is needed\n      var type = findType(typeName);\n\n      if (type.test(value)) {\n        return value;\n      }\n\n      var conversions = type.conversionsTo;\n\n      if (conversions.length === 0) {\n        throw new Error('There are no conversions to ' + typeName + ' defined.');\n      }\n\n      for (var i = 0; i < conversions.length; i++) {\n        var fromType = findType(conversions[i].from);\n\n        if (fromType.test(value)) {\n          return conversions[i].convert(value);\n        }\n      }\n\n      throw new Error('Cannot convert ' + value + ' to ' + typeName);\n    }\n    /**\n     * Stringify parameters in a normalized way\n     * @param {Param[]} params\n     * @param {string} [','] separator\n     * @return {string}\n     */\n\n\n    function stringifyParams(params) {\n      var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n      return params.map(function (p) {\n        return p.name;\n      }).join(separator);\n    }\n    /**\n     * Parse a parameter, like \"...number | boolean\"\n     * @param {string} param\n     * @return {Param} param\n     */\n\n\n    function parseParam(param) {\n      var restParam = param.indexOf('...') === 0;\n      var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n      var typeDefs = types.split('|').map(function (s) {\n        return findType(s.trim());\n      });\n      var hasAny = false;\n      var paramName = restParam ? '...' : '';\n      var exactTypes = typeDefs.map(function (type) {\n        hasAny = type.isAny || hasAny;\n        paramName += type.name + '|';\n        return {\n          name: type.name,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: null,\n          conversionIndex: -1\n        };\n      });\n      return {\n        types: exactTypes,\n        name: paramName.slice(0, -1),\n        // remove trailing '|' from above\n        hasAny: hasAny,\n        hasConversion: false,\n        restParam: restParam\n      };\n    }\n    /**\n     * Expands a parsed parameter with the types available from currently\n     * defined conversions.\n     * @param {Param} param\n     * @return {Param} param\n     */\n\n\n    function expandParam(param) {\n      var typeNames = param.types.map(function (t) {\n        return t.name;\n      });\n      var matchingConversions = availableConversions(typeNames);\n      var hasAny = param.hasAny;\n      var newName = param.name;\n      var convertibleTypes = matchingConversions.map(function (conversion) {\n        var type = findType(conversion.from);\n        hasAny = type.isAny || hasAny;\n        newName += '|' + conversion.from;\n        return {\n          name: conversion.from,\n          typeIndex: type.index,\n          test: type.test,\n          isAny: type.isAny,\n          conversion: conversion,\n          conversionIndex: conversion.index\n        };\n      });\n      return {\n        types: param.types.concat(convertibleTypes),\n        name: newName,\n        hasAny: hasAny,\n        hasConversion: convertibleTypes.length > 0,\n        restParam: param.restParam\n      };\n    }\n    /**\n     * Return the set of type names in a parameter.\n     * Caches the result for efficiency\n     *\n     * @param {Param} param\n     * @return {Set<string>} typenames\n     */\n\n\n    function paramTypeSet(param) {\n      if (!param.typeSet) {\n        param.typeSet = new Set();\n        param.types.forEach(function (type) {\n          return param.typeSet.add(type.name);\n        });\n      }\n\n      return param.typeSet;\n    }\n    /**\n     * Parse a signature with comma separated parameters,\n     * like \"number | boolean, ...string\"\n     *\n     * @param {string} signature\n     * @return {Param[]} params\n     */\n\n\n    function parseSignature(rawSignature) {\n      var params = [];\n\n      if (typeof rawSignature !== 'string') {\n        throw new TypeError('Signatures must be strings');\n      }\n\n      var signature = rawSignature.trim();\n\n      if (signature === '') {\n        return params;\n      }\n\n      var rawParams = signature.split(',');\n\n      for (var i = 0; i < rawParams.length; ++i) {\n        var parsedParam = parseParam(rawParams[i].trim());\n\n        if (parsedParam.restParam && i !== rawParams.length - 1) {\n          throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n        } // if invalid, short-circuit (all the types may have been filtered)\n\n\n        if (parsedParam.types.length === 0) {\n          return null;\n        }\n\n        params.push(parsedParam);\n      }\n\n      return params;\n    }\n    /**\n     * Test whether a set of params contains a restParam\n     * @param {Param[]} params\n     * @return {boolean} Returns true when the last parameter is a restParam\n     */\n\n\n    function hasRestParam(params) {\n      var param = last(params);\n      return param ? param.restParam : false;\n    }\n    /**\n     * Create a type test for a single parameter, which can have one or multiple\n     * types.\n     * @param {Param} param\n     * @return {function(x: *) : boolean} Returns a test function\n     */\n\n\n    function compileTest(param) {\n      if (!param || param.types.length === 0) {\n        // nothing to do\n        return ok;\n      } else if (param.types.length === 1) {\n        return findType(param.types[0].name).test;\n      } else if (param.types.length === 2) {\n        var test0 = findType(param.types[0].name).test;\n        var test1 = findType(param.types[1].name).test;\n        return function or(x) {\n          return test0(x) || test1(x);\n        };\n      } else {\n        // param.types.length > 2\n        var tests = param.types.map(function (type) {\n          return findType(type.name).test;\n        });\n        return function or(x) {\n          for (var i = 0; i < tests.length; i++) {\n            if (tests[i](x)) {\n              return true;\n            }\n          }\n\n          return false;\n        };\n      }\n    }\n    /**\n     * Create a test for all parameters of a signature\n     * @param {Param[]} params\n     * @return {function(args: Array<*>) : boolean}\n     */\n\n\n    function compileTests(params) {\n      var tests, test0, test1;\n\n      if (hasRestParam(params)) {\n        // variable arguments like '...number'\n        tests = initial(params).map(compileTest);\n        var varIndex = tests.length;\n        var lastTest = compileTest(last(params));\n\n        var testRestParam = function testRestParam(args) {\n          for (var i = varIndex; i < args.length; i++) {\n            if (!lastTest(args[i])) {\n              return false;\n            }\n          }\n\n          return true;\n        };\n\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return testRestParam(args) && args.length >= varIndex + 1;\n        };\n      } else {\n        // no variable arguments\n        if (params.length === 0) {\n          return function testArgs(args) {\n            return args.length === 0;\n          };\n        } else if (params.length === 1) {\n          test0 = compileTest(params[0]);\n          return function testArgs(args) {\n            return test0(args[0]) && args.length === 1;\n          };\n        } else if (params.length === 2) {\n          test0 = compileTest(params[0]);\n          test1 = compileTest(params[1]);\n          return function testArgs(args) {\n            return test0(args[0]) && test1(args[1]) && args.length === 2;\n          };\n        } else {\n          // arguments.length > 2\n          tests = params.map(compileTest);\n          return function testArgs(args) {\n            for (var i = 0; i < tests.length; i++) {\n              if (!tests[i](args[i])) {\n                return false;\n              }\n            }\n\n            return args.length === tests.length;\n          };\n        }\n      }\n    }\n    /**\n     * Find the parameter at a specific index of a Params list.\n     * Handles rest parameters.\n     * @param {Param[]} params\n     * @param {number} index\n     * @return {Param | null} Returns the matching parameter when found,\n     *                        null otherwise.\n     */\n\n\n    function getParamAtIndex(params, index) {\n      return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n    }\n    /**\n     * Get all type names of a parameter\n     * @param {Params[]} params\n     * @param {number} index\n     * @return {string[]} Returns an array with type names\n     */\n\n\n    function getTypeSetAtIndex(params, index) {\n      var param = getParamAtIndex(params, index);\n\n      if (!param) {\n        return new Set();\n      }\n\n      return paramTypeSet(param);\n    }\n    /**\n     * Test whether a type is an exact type or conversion\n     * @param {Type} type\n     * @return {boolean} Returns true when\n     */\n\n\n    function isExactType(type) {\n      return type.conversion === null || type.conversion === undefined;\n    }\n    /**\n     * Helper function for creating error messages: create an array with\n     * all available types on a specific argument index.\n     * @param {Signature[]} signatures\n     * @param {number} index\n     * @return {string[]} Returns an array with available types\n     */\n\n\n    function mergeExpectedParams(signatures, index) {\n      var typeSet = new Set();\n      signatures.forEach(function (signature) {\n        var paramSet = getTypeSetAtIndex(signature.params, index);\n        var name;\n\n        var _iterator5 = _createForOfIteratorHelper(paramSet),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            name = _step5.value;\n            typeSet.add(name);\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n      });\n      return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n    }\n    /**\n     * Create\n     * @param {string} name             The name of the function\n     * @param {array.<*>} args          The actual arguments passed to the function\n     * @param {Signature[]} signatures  A list with available signatures\n     * @return {TypeError} Returns a type error with additional data\n     *                     attached to it in the property `data`\n     */\n\n\n    function createError(name, args, signatures) {\n      var err, expected;\n\n      var _name = name || 'unnamed'; // test for wrong type at some index\n\n\n      var matchingSignatures = signatures;\n      var index;\n\n      var _loop = function _loop() {\n        var nextMatchingDefs = [];\n        matchingSignatures.forEach(function (signature) {\n          var param = getParamAtIndex(signature.params, index);\n          var test = compileTest(param);\n\n          if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n            nextMatchingDefs.push(signature);\n          }\n        });\n\n        if (nextMatchingDefs.length === 0) {\n          // no matching signatures anymore, throw error \"wrong type\"\n          expected = mergeExpectedParams(matchingSignatures, index);\n\n          if (expected.length > 0) {\n            var actualTypes = findTypeNames(args[index]);\n            err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n            err.data = {\n              category: 'wrongType',\n              fn: _name,\n              index: index,\n              actual: actualTypes,\n              expected: expected\n            };\n            return {\n              v: err\n            };\n          }\n        } else {\n          matchingSignatures = nextMatchingDefs;\n        }\n      };\n\n      for (index = 0; index < args.length; index++) {\n        var _ret2 = _loop();\n\n        if (_typeof(_ret2) === \"object\") return _ret2.v;\n      } // test for too few arguments\n\n\n      var lengths = matchingSignatures.map(function (signature) {\n        return hasRestParam(signature.params) ? Infinity : signature.params.length;\n      });\n\n      if (args.length < Math.min.apply(null, lengths)) {\n        expected = mergeExpectedParams(matchingSignatures, index);\n        err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n        err.data = {\n          category: 'tooFewArgs',\n          fn: _name,\n          index: args.length,\n          expected: expected\n        };\n        return err;\n      } // test for too many arguments\n\n\n      var maxLength = Math.max.apply(null, lengths);\n\n      if (args.length > maxLength) {\n        err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n        err.data = {\n          category: 'tooManyArgs',\n          fn: _name,\n          index: args.length,\n          expectedLength: maxLength\n        };\n        return err;\n      } // Generic error\n\n\n      var argTypes = [];\n\n      for (var i = 0; i < args.length; ++i) {\n        argTypes.push(findTypeNames(args[i]).join('|'));\n      }\n\n      err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n      err.data = {\n        category: 'mismatch',\n        actual: argTypes\n      };\n      return err;\n    }\n    /**\n     * Find the lowest index of all exact types of a parameter (no conversions)\n     * @param {Param} param\n     * @return {number} Returns the index of the lowest type in typed.types\n     */\n\n\n    function getLowestTypeIndex(param) {\n      var min = typeList.length + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].typeIndex);\n        }\n      }\n\n      return min;\n    }\n    /**\n     * Find the lowest index of the conversion of all types of the parameter\n     * having a conversion\n     * @param {Param} param\n     * @return {number} Returns the lowest index of the conversions of this type\n     */\n\n\n    function getLowestConversionIndex(param) {\n      var min = nConversions + 1;\n\n      for (var i = 0; i < param.types.length; i++) {\n        if (!isExactType(param.types[i])) {\n          min = Math.min(min, param.types[i].conversionIndex);\n        }\n      }\n\n      return min;\n    }\n    /**\n     * Compare two params\n     * @param {Param} param1\n     * @param {Param} param2\n     * @return {number} returns -1 when param1 must get a lower\n     *                  index than param2, 1 when the opposite,\n     *                  or zero when both are equal\n     */\n\n\n    function compareParams(param1, param2) {\n      // We compare a number of metrics on a param in turn:\n      // 1) 'any' parameters are the least preferred\n      if (param1.hasAny) {\n        if (!param2.hasAny) {\n          return 1;\n        }\n      } else if (param2.hasAny) {\n        return -1;\n      } // 2) Prefer non-rest to rest parameters\n\n\n      if (param1.restParam) {\n        if (!param2.restParam) {\n          return 1;\n        }\n      } else if (param2.restParam) {\n        return -1;\n      } // 3) Prefer exact type match to conversions\n\n\n      if (param1.hasConversion) {\n        if (!param2.hasConversion) {\n          return 1;\n        }\n      } else if (param2.hasConversion) {\n        return -1;\n      } // 4) Prefer lower type index:\n\n\n      var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n      if (typeDiff < 0) {\n        return -1;\n      }\n\n      if (typeDiff > 0) {\n        return 1;\n      } // 5) Prefer lower conversion index\n\n\n      var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n      if (convDiff < 0) {\n        return -1;\n      }\n\n      if (convDiff > 0) {\n        return 1;\n      } // Don't have a basis for preference\n\n\n      return 0;\n    }\n    /**\n     * Compare two signatures\n     * @param {Signature} signature1\n     * @param {Signature} signature2\n     * @return {number} returns a negative number when param1 must get a lower\n     *                  index than param2, a positive number when the opposite,\n     *                  or zero when both are equal\n     */\n\n\n    function compareSignatures(signature1, signature2) {\n      var pars1 = signature1.params;\n      var pars2 = signature2.params;\n      var last1 = last(pars1);\n      var last2 = last(pars2);\n      var hasRest1 = hasRestParam(pars1);\n      var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n      // 1) An \"any rest param\" is least preferred\n\n      if (hasRest1 && last1.hasAny) {\n        if (!hasRest2 || !last2.hasAny) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasAny) {\n        return -1;\n      } // 2) Minimize the number of 'any' parameters\n\n\n      var any1 = 0;\n      var conv1 = 0;\n      var par;\n\n      var _iterator6 = _createForOfIteratorHelper(pars1),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          par = _step6.value;\n          if (par.hasAny) ++any1;\n          if (par.hasConversion) ++conv1;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      var any2 = 0;\n      var conv2 = 0;\n\n      var _iterator7 = _createForOfIteratorHelper(pars2),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          par = _step7.value;\n          if (par.hasAny) ++any2;\n          if (par.hasConversion) ++conv2;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      if (any1 !== any2) {\n        return any1 - any2;\n      } // 3) A conversion rest param is less preferred\n\n\n      if (hasRest1 && last1.hasConversion) {\n        if (!hasRest2 || !last2.hasConversion) {\n          return 1;\n        }\n      } else if (hasRest2 && last2.hasConversion) {\n        return -1;\n      } // 4) Minimize the number of conversions\n\n\n      if (conv1 !== conv2) {\n        return conv1 - conv2;\n      } // 5) Prefer no rest param\n\n\n      if (hasRest1) {\n        if (!hasRest2) {\n          return 1;\n        }\n      } else if (hasRest2) {\n        return -1;\n      } // 6) Prefer shorter with rest param, longer without\n\n\n      var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n      if (lengthCriterion !== 0) {\n        return lengthCriterion;\n      } // Signatures are identical in each of the above metrics.\n      // In particular, they are the same length.\n      // We can therefore compare the parameters one by one.\n      // First we count which signature has more preferred parameters.\n\n\n      var comparisons = [];\n      var tc = 0;\n\n      for (var i = 0; i < pars1.length; ++i) {\n        var thisComparison = compareParams(pars1[i], pars2[i]);\n        comparisons.push(thisComparison);\n        tc += thisComparison;\n      }\n\n      if (tc !== 0) {\n        return tc;\n      } // They have the same number of preferred parameters, so go by the\n      // earliest parameter in which we have a preference.\n      // In other words, dispatch is driven somewhat more by earlier\n      // parameters than later ones.\n\n\n      var c;\n\n      for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n        c = _comparisons[_i2];\n\n        if (c !== 0) {\n          return c;\n        }\n      } // It's a tossup:\n\n\n      return 0;\n    }\n    /**\n     * Produce a list of all conversions from distinct types to one of\n     * the given types.\n     *\n     * @param {string[]} typeNames\n     * @return {ConversionDef[]} Returns the conversions that are available\n     *                        resulting in any given type (if any)\n     */\n\n\n    function availableConversions(typeNames) {\n      if (typeNames.length === 0) {\n        return [];\n      }\n\n      var types = typeNames.map(findType);\n\n      if (typeNames.length > 1) {\n        types.sort(function (t1, t2) {\n          return t1.index - t2.index;\n        });\n      }\n\n      var matches = types[0].conversionsTo;\n\n      if (typeNames.length === 1) {\n        return matches;\n      }\n\n      matches = matches.concat([]); // shallow copy the matches\n      // Since the types are now in index order, we just want the first\n      // occurrence of any from type:\n\n      var knownTypes = new Set(typeNames);\n\n      for (var i = 1; i < types.length; ++i) {\n        var newMatch = void 0;\n\n        var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n            _step8;\n\n        try {\n          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n            newMatch = _step8.value;\n\n            if (!knownTypes.has(newMatch.from)) {\n              matches.push(newMatch);\n              knownTypes.add(newMatch.from);\n            }\n          }\n        } catch (err) {\n          _iterator8.e(err);\n        } finally {\n          _iterator8.f();\n        }\n      }\n\n      return matches;\n    }\n    /**\n     * Preprocess arguments before calling the original function:\n     * - if needed convert the parameters\n     * - in case of rest parameters, move the rest parameters into an Array\n     * @param {Param[]} params\n     * @param {function} fn\n     * @return {function} Returns a wrapped function\n     */\n\n\n    function compileArgsPreprocessing(params, fn) {\n      var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n      if (params.some(function (p) {\n        return p.hasConversion;\n      })) {\n        var restParam = hasRestParam(params);\n        var compiledConversions = params.map(compileArgConversion);\n\n        fnConvert = function convertArgs() {\n          var args = [];\n          var last = restParam ? arguments.length - 1 : arguments.length;\n\n          for (var i = 0; i < last; i++) {\n            args[i] = compiledConversions[i](arguments[i]);\n          }\n\n          if (restParam) {\n            args[last] = arguments[last].map(compiledConversions[last]);\n          }\n\n          return fn.apply(this, args);\n        };\n      }\n\n      var fnPreprocess = fnConvert;\n\n      if (hasRestParam(params)) {\n        var offset = params.length - 1;\n\n        fnPreprocess = function preprocessRestParams() {\n          return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n        };\n      }\n\n      return fnPreprocess;\n    }\n    /**\n     * Compile conversion for a parameter to the right type\n     * @param {Param} param\n     * @return {function} Returns the wrapped function that will convert arguments\n     *\n     */\n\n\n    function compileArgConversion(param) {\n      var test0, test1, conversion0, conversion1;\n      var tests = [];\n      var conversions = [];\n      param.types.forEach(function (type) {\n        if (type.conversion) {\n          tests.push(findType(type.conversion.from).test);\n          conversions.push(type.conversion.convert);\n        }\n      }); // create optimized conversion functions depending on the number of conversions\n\n      switch (conversions.length) {\n        case 0:\n          return function convertArg(arg) {\n            return arg;\n          };\n\n        case 1:\n          test0 = tests[0];\n          conversion0 = conversions[0];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n\n            return arg;\n          };\n\n        case 2:\n          test0 = tests[0];\n          test1 = tests[1];\n          conversion0 = conversions[0];\n          conversion1 = conversions[1];\n          return function convertArg(arg) {\n            if (test0(arg)) {\n              return conversion0(arg);\n            }\n\n            if (test1(arg)) {\n              return conversion1(arg);\n            }\n\n            return arg;\n          };\n\n        default:\n          return function convertArg(arg) {\n            for (var i = 0; i < conversions.length; i++) {\n              if (tests[i](arg)) {\n                return conversions[i](arg);\n              }\n            }\n\n            return arg;\n          };\n      }\n    }\n    /**\n     * Split params with union types in to separate params.\n     *\n     * For example:\n     *\n     *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n     *     // returns:\n     *     // [\n     *     //   ['Array', 'string'],\n     *     //   ['Array', 'RegExp'],\n     *     //   ['Object', 'string'],\n     *     //   ['Object', 'RegExp']\n     *     // ]\n     *\n     * @param {Param[]} params\n     * @return {Param[]}\n     */\n\n\n    function splitParams(params) {\n      function _splitParams(params, index, paramsSoFar) {\n        if (index < params.length) {\n          var param = params[index];\n          var resultingParams = [];\n\n          if (param.restParam) {\n            // split the types of a rest parameter in two:\n            // one with only exact types, and one with exact types and conversions\n            var exactTypes = param.types.filter(isExactType);\n\n            if (exactTypes.length < param.types.length) {\n              resultingParams.push({\n                types: exactTypes,\n                name: '...' + exactTypes.map(function (t) {\n                  return t.name;\n                }).join('|'),\n                hasAny: exactTypes.some(function (t) {\n                  return t.isAny;\n                }),\n                hasConversion: false,\n                restParam: true\n              });\n            }\n\n            resultingParams.push(param);\n          } else {\n            // split all the types of a regular parameter into one type per param\n            resultingParams = param.types.map(function (type) {\n              return {\n                types: [type],\n                name: type.name,\n                hasAny: type.isAny,\n                hasConversion: type.conversion,\n                restParam: false\n              };\n            });\n          } // recurse over the groups with types\n\n\n          return flatMap(resultingParams, function (nextParam) {\n            return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n          });\n        } else {\n          // we've reached the end of the parameters.\n          return [paramsSoFar];\n        }\n      }\n\n      return _splitParams(params, 0, []);\n    }\n    /**\n     * Test whether two param lists represent conflicting signatures\n     * @param {Param[]} params1\n     * @param {Param[]} params2\n     * @return {boolean} Returns true when the signatures conflict, false otherwise.\n     */\n\n\n    function conflicting(params1, params2) {\n      var ii = Math.max(params1.length, params2.length);\n\n      for (var i = 0; i < ii; i++) {\n        var typeSet1 = getTypeSetAtIndex(params1, i);\n        var typeSet2 = getTypeSetAtIndex(params2, i);\n        var overlap = false;\n        var name = void 0;\n\n        var _iterator9 = _createForOfIteratorHelper(typeSet2),\n            _step9;\n\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            name = _step9.value;\n\n            if (typeSet1.has(name)) {\n              overlap = true;\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n\n        if (!overlap) {\n          return false;\n        }\n      }\n\n      var len1 = params1.length;\n      var len2 = params2.length;\n      var restParam1 = hasRestParam(params1);\n      var restParam2 = hasRestParam(params2);\n      return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n    }\n    /**\n     * Helper function for `resolveReferences` that returns a copy of\n     * functionList wihe any prior resolutions cleared out, in case we are\n     * recycling signatures from a prior typed function construction.\n     *\n     * @param {Array.<function|typed-reference>} functionList\n     * @return {Array.<function|typed-reference>}\n     */\n\n\n    function clearResolutions(functionList) {\n      return functionList.map(function (fn) {\n        if (isReferToSelf(fn)) {\n          return referToSelf(fn.referToSelf.callback);\n        }\n\n        if (isReferTo(fn)) {\n          return makeReferTo(fn.referTo.references, fn.referTo.callback);\n        }\n\n        return fn;\n      });\n    }\n    /**\n     * Take a list of references, a list of functions functionList, and a\n     * signatureMap indexing signatures into functionList, and return\n     * the list of resolutions, or a false-y value if they don't all\n     * resolve in a valid way (yet).\n     *\n     * @param {string[]} references\n     * @param {Array<function|typed-reference} functionList\n     * @param {Object.<string, integer>} signatureMap\n     * @return {function[] | false} resolutions\n     */\n\n\n    function collectResolutions(references, functionList, signatureMap) {\n      var resolvedReferences = [];\n      var reference;\n\n      var _iterator10 = _createForOfIteratorHelper(references),\n          _step10;\n\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          reference = _step10.value;\n          var resolution = signatureMap[reference];\n\n          if (typeof resolution !== 'number') {\n            throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n          }\n\n          resolution = functionList[resolution];\n\n          if (typeof resolution !== 'function') {\n            return false;\n          }\n\n          resolvedReferences.push(resolution);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n\n      return resolvedReferences;\n    }\n    /**\n     * Resolve any references in the functionList for the typed function\n     * itself. The signatureMap tells which index in the functionList a\n     * given signature should be mapped to (for use in resolving typed.referTo)\n     * and self provides the destions of a typed.referToSelf.\n     *\n     * @param {Array<function | typed-reference-object>} functionList\n     * @param {Object.<string, function>} signatureMap\n     * @param {function} self  The typed-function itself\n     * @return {Array<function>} The list of resolved functions\n     */\n\n\n    function resolveReferences(functionList, signatureMap, self) {\n      var resolvedFunctions = clearResolutions(functionList);\n      var isResolved = new Array(resolvedFunctions.length).fill(false);\n      var leftUnresolved = true;\n\n      while (leftUnresolved) {\n        leftUnresolved = false;\n        var nothingResolved = true;\n\n        for (var i = 0; i < resolvedFunctions.length; ++i) {\n          if (isResolved[i]) continue;\n          var fn = resolvedFunctions[i];\n\n          if (isReferToSelf(fn)) {\n            resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referToSelf = fn.referToSelf;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else if (isReferTo(fn)) {\n            var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n            if (resolvedReferences) {\n              resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n              resolvedFunctions[i].referTo = fn.referTo;\n              isResolved[i] = true;\n              nothingResolved = false;\n            } else {\n              leftUnresolved = true;\n            }\n          }\n        }\n\n        if (nothingResolved && leftUnresolved) {\n          throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n        }\n      }\n\n      return resolvedFunctions;\n    }\n    /**\n     * Validate whether any of the function bodies contains a self-reference\n     * usage like `this(...)` or `this.signatures`. This self-referencing is\n     * deprecated since typed-function v3. It has been replaced with\n     * the functions typed.referTo and typed.referToSelf.\n     * @param {Object.<string, function>} signaturesMap\n     */\n\n\n    function validateDeprecatedThis(signaturesMap) {\n      // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n      // match occurrences like 'this(' and 'this.signatures'\n      var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n      Object.keys(signaturesMap).forEach(function (signature) {\n        var fn = signaturesMap[signature];\n\n        if (deprecatedThisRegex.test(fn.toString())) {\n          throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n        }\n      });\n    }\n    /**\n     * Create a typed function\n     * @param {String} name               The name for the typed function\n     * @param {Object.<string, function>} rawSignaturesMap\n     *                                    An object with one or\n     *                                    multiple signatures as key, and the\n     *                                    function corresponding to the\n     *                                    signature as value.\n     * @return {function}  Returns the created typed function.\n     */\n\n\n    function createTypedFunction(name, rawSignaturesMap) {\n      typed.createCount++;\n\n      if (Object.keys(rawSignaturesMap).length === 0) {\n        throw new SyntaxError('No signatures provided');\n      }\n\n      if (typed.warnAgainstDeprecatedThis) {\n        validateDeprecatedThis(rawSignaturesMap);\n      } // Main processing loop for signatures\n\n\n      var parsedParams = [];\n      var originalFunctions = [];\n      var signaturesMap = {};\n      var preliminarySignatures = []; // may have duplicates from conversions\n\n      var signature;\n\n      var _loop2 = function _loop2() {\n        // A) Protect against polluted Object prototype:\n        if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n          return \"continue\";\n        } // B) Parse the signature\n\n\n        var params = parseSignature(signature);\n        if (!params) return \"continue\"; // C) Check for conflicts\n\n        parsedParams.forEach(function (pp) {\n          if (conflicting(pp, params)) {\n            throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n          }\n        });\n        parsedParams.push(params); // D) Store the provided function and add conversions\n\n        var functionIndex = originalFunctions.length;\n        originalFunctions.push(rawSignaturesMap[signature]);\n        var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n        var sp = void 0;\n\n        var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n            _step11;\n\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            sp = _step11.value;\n            var spName = stringifyParams(sp);\n            preliminarySignatures.push({\n              params: sp,\n              name: spName,\n              fn: functionIndex\n            });\n\n            if (sp.every(function (p) {\n              return !p.hasConversion;\n            })) {\n              signaturesMap[spName] = functionIndex;\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n      };\n\n      for (signature in rawSignaturesMap) {\n        var _ret3 = _loop2();\n\n        if (_ret3 === \"continue\") continue;\n      }\n\n      preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n      var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n      var s;\n\n      for (s in signaturesMap) {\n        if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n          signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n        }\n      }\n\n      var signatures = [];\n      var internalSignatureMap = new Map(); // benchmarks faster than object\n\n      for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n        s = _preliminarySignature[_i3]; // Note it's only safe to eliminate duplicates like this\n        // _after_ the signature sorting step above; otherwise we might\n        // remove the wrong one.\n\n        if (!internalSignatureMap.has(s.name)) {\n          s.fn = resolvedFunctions[s.fn];\n          signatures.push(s);\n          internalSignatureMap.set(s.name, s);\n        }\n      } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n      var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n      var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n      var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n      var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n      var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n      var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n      var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n      for (var i = 0; i < signatures.length; ++i) {\n        signatures[i].test = compileTests(signatures[i].params);\n      }\n\n      var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n      var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n      var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n      var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n      var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n      var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n      var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n      var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n      var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n      var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n      var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n      var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n      for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n        signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n      }\n\n      var fn0 = ok0 ? signatures[0].implementation : undef;\n      var fn1 = ok1 ? signatures[1].implementation : undef;\n      var fn2 = ok2 ? signatures[2].implementation : undef;\n      var fn3 = ok3 ? signatures[3].implementation : undef;\n      var fn4 = ok4 ? signatures[4].implementation : undef;\n      var fn5 = ok5 ? signatures[5].implementation : undef;\n      var len0 = ok0 ? signatures[0].params.length : -1;\n      var len1 = ok1 ? signatures[1].params.length : -1;\n      var len2 = ok2 ? signatures[2].params.length : -1;\n      var len3 = ok3 ? signatures[3].params.length : -1;\n      var len4 = ok4 ? signatures[4].params.length : -1;\n      var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n      var iStart = allOk ? 6 : 0;\n      var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n      var tests = signatures.map(function (s) {\n        return s.test;\n      });\n      var fns = signatures.map(function (s) {\n        return s.implementation;\n      });\n\n      var generic = function generic() {\n        for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n          if (tests[_i5](arguments)) {\n            return fns[_i5].apply(this, arguments);\n          }\n        }\n\n        return typed.onMismatch(name, arguments, signatures);\n      }; // create the typed function\n      // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n      function theTypedFn(arg0, arg1) {\n        if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n          return fn0.apply(this, arguments);\n        }\n\n        if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n          return fn1.apply(this, arguments);\n        }\n\n        if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n          return fn2.apply(this, arguments);\n        }\n\n        if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n          return fn3.apply(this, arguments);\n        }\n\n        if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n          return fn4.apply(this, arguments);\n        }\n\n        if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n          return fn5.apply(this, arguments);\n        }\n\n        return generic.apply(this, arguments);\n      } // attach name the typed function\n\n\n      try {\n        Object.defineProperty(theTypedFn, 'name', {\n          value: name\n        });\n      } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n        // the function name is not essential for the functioning, it's mostly useful for debugging,\n        // so it's fine to have unnamed functions.\n      } // attach signatures to the function.\n      // This property is close to the original collection of signatures\n      // used to create the typed-function, just with unions split:\n\n\n      theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n      // Also serves as the flag that this is a typed-function\n\n      theTypedFn._typedFunctionData = {\n        signatures: signatures,\n        signatureMap: internalSignatureMap\n      };\n      return theTypedFn;\n    }\n    /**\n     * Action to take on mismatch\n     * @param {string} name      Name of function that was attempted to be called\n     * @param {Array} args       Actual arguments to the call\n     * @param {Array} signatures Known signatures of the named typed-function\n     */\n\n\n    function _onMismatch(name, args, signatures) {\n      throw createError(name, args, signatures);\n    }\n    /**\n     * Return all but the last items of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {Array}\n     */\n\n\n    function initial(arr) {\n      return slice(arr, 0, arr.length - 1);\n    }\n    /**\n     * return the last item of an array or function Arguments\n     * @param {Array | Arguments} arr\n     * @return {*}\n     */\n\n\n    function last(arr) {\n      return arr[arr.length - 1];\n    }\n    /**\n     * Slice an array or function Arguments\n     * @param {Array | Arguments | IArguments} arr\n     * @param {number} start\n     * @param {number} [end]\n     * @return {Array}\n     */\n\n\n    function slice(arr, start, end) {\n      return Array.prototype.slice.call(arr, start, end);\n    }\n    /**\n     * Return the first item from an array for which test(arr[i]) returns true\n     * @param {Array} arr\n     * @param {function} test\n     * @return {* | undefined} Returns the first matching item\n     *                         or undefined when there is no match\n     */\n\n\n    function findInArray(arr, test) {\n      for (var i = 0; i < arr.length; i++) {\n        if (test(arr[i])) {\n          return arr[i];\n        }\n      }\n\n      return undefined;\n    }\n    /**\n     * Flat map the result invoking a callback for every item in an array.\n     * https://gist.github.com/samgiles/762ee337dff48623e729\n     * @param {Array} arr\n     * @param {function} callback\n     * @return {Array}\n     */\n\n\n    function flatMap(arr, callback) {\n      return Array.prototype.concat.apply([], arr.map(callback));\n    }\n    /**\n     * Create a reference callback to one or multiple signatures\n     *\n     * Syntax:\n     *\n     *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n     *       // ...\n     *     })\n     *\n     * @returns {{referTo: {references: string[], callback}}}\n     */\n\n\n    function referTo() {\n      var references = initial(arguments).map(function (s) {\n        return stringifyParams(parseSignature(s));\n      });\n      var callback = last(arguments);\n\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as last argument');\n      }\n\n      return makeReferTo(references, callback);\n    }\n\n    function makeReferTo(references, callback) {\n      return {\n        referTo: {\n          references: references,\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Create a reference callback to the typed-function itself\n     *\n     * @param {(self: function) => function} callback\n     * @returns {{referToSelf: { callback: function }}}\n     */\n\n\n    function referToSelf(callback) {\n      if (typeof callback !== 'function') {\n        throw new TypeError('Callback function expected as first argument');\n      }\n\n      return {\n        referToSelf: {\n          callback: callback\n        }\n      };\n    }\n    /**\n     * Test whether something is a referTo object, holding a list with reference\n     * signatures and a callback.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n\n    function isReferTo(objectOrFn) {\n      return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n    }\n    /**\n     * Test whether something is a referToSelf object, holding a callback where\n     * to pass `self`.\n     *\n     * @param {Object | function} objectOrFn\n     * @returns {boolean}\n     */\n\n\n    function isReferToSelf(objectOrFn) {\n      return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n    }\n    /**\n     * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n     * an error in case (C).\n     *\n     * @param { string | undefined } nameSoFar\n     * @param { string | undefined } newName\n     * @returns { string } updated name\n     */\n\n\n    function checkName(nameSoFar, newName) {\n      if (!nameSoFar) {\n        return newName;\n      }\n\n      if (newName && newName !== nameSoFar) {\n        var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n        err.data = {\n          actual: newName,\n          expected: nameSoFar\n        };\n        throw err;\n      }\n\n      return nameSoFar;\n    }\n    /**\n     * Retrieve the implied name from an object with signature keys\n     * and function values, checking whether all value names match\n     *\n     * @param { {string: function} } obj\n     */\n\n\n    function getObjectName(obj) {\n      var name;\n\n      for (var key in obj) {\n        // Only pay attention to own properties, and only if their values\n        // are typed functions or functions with a signature property\n        if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n          name = checkName(name, obj[key].name);\n        }\n      }\n\n      return name;\n    }\n    /**\n     * Copy all of the signatures from the second argument into the first,\n     * which is modified by side effect, checking for conflicts\n     *\n     * @param {Object.<string, function|typed-reference>} dest\n     * @param {Object.<string, function|typed-reference>} source\n     */\n\n\n    function mergeSignatures(dest, source) {\n      var key;\n\n      for (key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          if (key in dest) {\n            if (source[key] !== dest[key]) {\n              var err = new Error('Signature \"' + key + '\" is defined twice');\n              err.data = {\n                signature: key,\n                sourceFunction: source[key],\n                destFunction: dest[key]\n              };\n              throw err;\n            } // else: both signatures point to the same function, that's fine\n\n          }\n\n          dest[key] = source[key];\n        }\n      }\n    }\n\n    var saveTyped = typed;\n    /**\n     * Originally the main function was a typed function itself, but then\n     * it might not be able to generate error messages if the client\n     * replaced the type system with different names.\n     *\n     * Main entry: typed([name], functions/objects with signatures...)\n     *\n     * Assembles and returns a new typed-function from the given items\n     * that provide signatures and implementations, each of which may be\n     * * a plain object mapping (string) signatures to implementing functions,\n     * * a previously constructed typed function, or\n     * * any other single function with a string-valued property `signature`.\n      * The name of the resulting typed-function will be given by the\n     * string-valued name argument if present, or if not, by the name\n     * of any of the arguments that have one, as long as any that do are\n     * consistent with each other. If no name is specified, the name will be\n     * an empty string.\n     *\n     * @param {string} maybeName [optional]\n     * @param {(function|object)[]} signature providers\n     * @returns {typed-function}\n     */\n\n    typed = function typed(maybeName) {\n      var named = typeof maybeName === 'string';\n      var start = named ? 1 : 0;\n      var name = named ? maybeName : '';\n      var allSignatures = {};\n\n      for (var i = start; i < arguments.length; ++i) {\n        var item = arguments[i];\n        var theseSignatures = {};\n        var thisName = void 0;\n\n        if (typeof item === 'function') {\n          thisName = item.name;\n\n          if (typeof item.signature === 'string') {\n            // Case 1: Ordinary function with a string 'signature' property\n            theseSignatures[item.signature] = item;\n          } else if (isTypedFunction(item)) {\n            // Case 2: Existing typed function\n            theseSignatures = item.signatures;\n          }\n        } else if (isPlainObject(item)) {\n          // Case 3: Plain object, assume keys = signatures, values = functions\n          theseSignatures = item;\n\n          if (!named) {\n            thisName = getObjectName(item);\n          }\n        }\n\n        if (Object.keys(theseSignatures).length === 0) {\n          var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n          err.data = {\n            index: i,\n            argument: item\n          };\n          throw err;\n        }\n\n        if (!named) {\n          name = checkName(name, thisName);\n        }\n\n        mergeSignatures(allSignatures, theseSignatures);\n      }\n\n      return createTypedFunction(name || '', allSignatures);\n    };\n\n    typed.create = create;\n    typed.createCount = saveTyped.createCount;\n    typed.onMismatch = _onMismatch;\n    typed.throwMismatchError = _onMismatch;\n    typed.createError = createError;\n    typed.clear = clear;\n    typed.clearConversions = clearConversions;\n    typed.addTypes = addTypes;\n    typed._findType = findType; // For unit testing only\n\n    typed.referTo = referTo;\n    typed.referToSelf = referToSelf;\n    typed.convert = convert;\n    typed.findSignature = findSignature;\n    typed.find = find;\n    typed.isTypedFunction = isTypedFunction;\n    typed.warnAgainstDeprecatedThis = true;\n    /**\n     * add a type (convenience wrapper for typed.addTypes)\n     * @param {{name: string, test: function}} type\n     * @param {boolean} [beforeObjectTest=true]\n     *                          If true, the new test will be inserted before\n     *                          the test with name 'Object' (if any), since\n     *                          tests for Object match Array and classes too.\n     */\n\n    typed.addType = function (type, beforeObjectTest) {\n      var before = 'any';\n\n      if (beforeObjectTest !== false && typeMap.has('Object')) {\n        before = 'Object';\n      }\n\n      typed.addTypes([type], before);\n    };\n    /**\n     * Verify that the ConversionDef conversion has a valid format.\n     *\n     * @param {conversionDef} conversion\n     * @return {void}\n     * @throws {TypeError|SyntaxError}\n     */\n\n\n    function _validateConversion(conversion) {\n      if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n        throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n      }\n\n      if (conversion.to === conversion.from) {\n        throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n      }\n    }\n    /**\n     * Add a conversion\n     *\n     * @param {ConversionDef} conversion\n     * @returns {void}\n     * @throws {TypeError}\n     */\n\n\n    typed.addConversion = function (conversion) {\n      _validateConversion(conversion);\n\n      var to = findType(conversion.to);\n\n      if (to.conversionsTo.every(function (other) {\n        return other.from !== conversion.from;\n      })) {\n        to.conversionsTo.push({\n          from: conversion.from,\n          convert: conversion.convert,\n          index: nConversions++\n        });\n      } else {\n        throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n      }\n    };\n    /**\n     * Convenience wrapper to call addConversion on each conversion in a list.\n     *\n     @param {ConversionDef[]} conversions\n     @returns {void}\n     @throws {TypeError}\n     */\n\n\n    typed.addConversions = function (conversions) {\n      conversions.forEach(typed.addConversion);\n    };\n    /**\n     * Remove the specified conversion. The format is the same as for\n     * addConversion, and the convert function must match or an error\n     * is thrown.\n     *\n     * @param {{from: string, to: string, convert: function}} conversion\n     * @returns {void}\n     * @throws {TypeError|SyntaxError|Error}\n     */\n\n\n    typed.removeConversion = function (conversion) {\n      _validateConversion(conversion);\n\n      var to = findType(conversion.to);\n      var existingConversion = findInArray(to.conversionsTo, function (c) {\n        return c.from === conversion.from;\n      });\n\n      if (!existingConversion) {\n        throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n      }\n\n      if (existingConversion.convert !== conversion.convert) {\n        throw new Error('Conversion to remove does not match existing conversion');\n      }\n\n      var index = to.conversionsTo.indexOf(existingConversion);\n      to.conversionsTo.splice(index, 1);\n    };\n    /**\n     * Produce the specific signature that a typed function\n     * will execute on the given arguments. Here, a \"signature\" is an\n     * object with properties 'params', 'test', 'fn', and 'implementation'.\n     * This last property is a function that converts params as necessary\n     * and then calls 'fn'. Returns null if there is no matching signature.\n     * @param {typed-function} tf\n     * @param {any[]} argList\n     * @returns {{params: string, test: function, fn: function, implementation: function}}\n     */\n\n\n    typed.resolve = function (tf, argList) {\n      if (!isTypedFunction(tf)) {\n        throw new TypeError(NOT_TYPED_FUNCTION);\n      }\n\n      var sigs = tf._typedFunctionData.signatures;\n\n      for (var i = 0; i < sigs.length; ++i) {\n        if (sigs[i].test(argList)) {\n          return sigs[i];\n        }\n      }\n\n      return null;\n    };\n\n    return typed;\n  }\n\n  var typedFunction = create();\n  return typedFunction;\n});","map":{"version":3,"sources":["../esm/typed-function.mjs"],"names":[],"mappings":";;;;;AAAA,WAAS,0BAAT,CAAoC,CAApC,EAAuC,cAAvC,EAAuD;AAAE,QAAI,EAAE,GAAG,OAAO,MAAP,KAAkB,WAAlB,IAAiC,CAAC,CAAC,MAAM,CAAC,QAAR,CAAlC,IAAuD,CAAC,CAAC,YAAD,CAAjE;;AAAiF,QAAI,CAAC,EAAL,EAAS;AAAE,UAAI,KAAK,CAAC,OAAN,CAAc,CAAd,MAAqB,EAAE,GAAG,2BAA2B,CAAC,CAAD,CAArD,KAA6D,cAAc,IAAI,CAAlB,IAAuB,OAAO,CAAC,CAAC,MAAT,KAAoB,QAA5G,EAAsH;AAAE,YAAI,EAAJ,EAAQ,CAAC,GAAG,EAAJ;AAAQ,YAAI,CAAC,GAAG,CAAR;;AAAW,YAAI,CAAC,GAAG,SAAS,CAAT,GAAa,CAAE,CAAvB;;AAAyB,eAAO;AAAE,UAAA,CAAC,EAAE,CAAL;AAAQ,UAAA,CAAC,EAAE,SAAS,CAAT,GAAa;AAAE,gBAAI,CAAC,IAAI,CAAC,CAAC,MAAX,EAAmB,OAAO;AAAE,cAAA,IAAI,EAAE;AAAR,aAAP;AAAuB,mBAAO;AAAE,cAAA,IAAI,EAAE,KAAR;AAAe,cAAA,KAAK,EAAE,CAAC,CAAC,CAAC,EAAF;AAAvB,aAAP;AAAwC,WAA5G;AAA8G,UAAA,CAAC,EAAE,SAAS,CAAT,CAAW,EAAX,EAAe;AAAE,kBAAM,EAAN;AAAW,WAA7I;AAA+I,UAAA,CAAC,EAAE;AAAlJ,SAAP;AAA+J;;AAAC,YAAM,IAAI,SAAJ,CAAc,uIAAd,CAAN;AAA+J;;AAAC,QAAI,gBAAgB,GAAG,IAAvB;AAAA,QAA6B,MAAM,GAAG,KAAtC;AAAA,QAA6C,GAA7C;AAAkD,WAAO;AAAE,MAAA,CAAC,EAAE,SAAS,CAAT,GAAa;AAAE,QAAA,EAAE,GAAG,EAAE,CAAC,IAAH,CAAQ,CAAR,CAAL;AAAkB,OAAtC;AAAwC,MAAA,CAAC,EAAE,SAAS,CAAT,GAAa;AAAE,YAAI,IAAI,GAAG,EAAE,CAAC,IAAH,EAAX;AAAsB,QAAA,gBAAgB,GAAG,IAAI,CAAC,IAAxB;AAA8B,eAAO,IAAP;AAAc,OAA5H;AAA8H,MAAA,CAAC,EAAE,SAAS,CAAT,CAAW,GAAX,EAAgB;AAAE,QAAA,MAAM,GAAG,IAAT;AAAe,QAAA,GAAG,GAAG,GAAN;AAAY,OAA9K;AAAgL,MAAA,CAAC,EAAE,SAAS,CAAT,GAAa;AAAE,YAAI;AAAE,cAAI,CAAC,gBAAD,IAAqB,EAAE,CAAC,MAAH,IAAa,IAAtC,EAA4C,EAAE,CAAC,MAAH;AAAc,SAAhE,SAAyE;AAAE,cAAI,MAAJ,EAAY,MAAM,GAAN;AAAY;AAAE;AAAvS,KAAP;AAAmT;;AAEt+B,WAAS,2BAAT,CAAqC,CAArC,EAAwC,MAAxC,EAAgD;AAAE,QAAI,CAAC,CAAL,EAAQ;AAAQ,QAAI,OAAO,CAAP,KAAa,QAAjB,EAA2B,OAAO,iBAAiB,CAAC,CAAD,EAAI,MAAJ,CAAxB;AAAqC,QAAI,CAAC,GAAG,MAAM,CAAC,SAAP,CAAiB,QAAjB,CAA0B,IAA1B,CAA+B,CAA/B,EAAkC,KAAlC,CAAwC,CAAxC,EAA2C,CAAC,CAA5C,CAAR;AAAwD,QAAI,CAAC,KAAK,QAAN,IAAkB,CAAC,CAAC,WAAxB,EAAqC,CAAC,GAAG,CAAC,CAAC,WAAF,CAAc,IAAlB;AAAwB,QAAI,CAAC,KAAK,KAAN,IAAe,CAAC,KAAK,KAAzB,EAAgC,OAAO,KAAK,CAAC,IAAN,CAAW,CAAX,CAAP;AAAsB,QAAI,CAAC,KAAK,WAAN,IAAqB,2CAA2C,IAA3C,CAAgD,CAAhD,CAAzB,EAA6E,OAAO,iBAAiB,CAAC,CAAD,EAAI,MAAJ,CAAxB;AAAsC;;AAEha,WAAS,iBAAT,CAA2B,GAA3B,EAAgC,GAAhC,EAAqC;AAAE,QAAI,GAAG,IAAI,IAAP,IAAe,GAAG,GAAG,GAAG,CAAC,MAA7B,EAAqC,GAAG,GAAG,GAAG,CAAC,MAAV;;AAAkB,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,IAAI,GAAG,IAAI,KAAJ,CAAU,GAAV,CAAvB,EAAuC,CAAC,GAAG,GAA3C,EAAgD,CAAC,EAAjD,EAAqD;AAAE,MAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,GAAG,CAAC,CAAD,CAAb;AAAmB;;AAAC,WAAO,IAAP;AAAc;;AAEvL,WAAS,OAAT,CAAiB,GAAjB,EAAsB;AAAE;;AAA2B,WAAO,OAAO,GAAG,cAAc,OAAO,MAArB,IAA+B,YAAY,OAAO,MAAM,CAAC,QAAzD,GAAoE,UAAU,GAAV,EAAe;AAAE,aAAO,OAAO,GAAd;AAAoB,KAAzG,GAA4G,UAAU,GAAV,EAAe;AAAE,aAAO,GAAG,IAAI,cAAc,OAAO,MAA5B,IAAsC,GAAG,CAAC,WAAJ,KAAoB,MAA1D,IAAoE,GAAG,KAAK,MAAM,CAAC,SAAnF,GAA+F,QAA/F,GAA0G,OAAO,GAAxH;AAA8H,KAArQ,EAAuQ,OAAO,CAAC,GAAD,CAArR;AAA6R;;AAEhV,WAAS,EAAT,GAAc;AACZ,WAAO,IAAP;AACD;;AAED,WAAS,KAAT,GAAiB;AACf,WAAO,KAAP;AACD;;AAED,WAAS,KAAT,GAAiB;AACf,WAAO,SAAP;AACD;;AAED,MAAI,kBAAkB,GAAG,mCAAzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,WAAS,MAAT,GAAkB;AAClB;;AAEA;AACA;AACA;AACE,aAAS,aAAT,CAAuB,CAAvB,EAA0B;AACxB,aAAO,OAAO,CAAC,CAAD,CAAP,KAAe,QAAf,IAA2B,CAAC,KAAK,IAAjC,IAAyC,CAAC,CAAC,WAAF,KAAkB,MAAlE;AACD;;AAED,QAAI,MAAM,GAAG,CAAC;AACZ,MAAA,IAAI,EAAE,QADM;AAEZ,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,OAAO,CAAP,KAAa,QAApB;AACD;AAJW,KAAD,EAKV;AACD,MAAA,IAAI,EAAE,QADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,OAAO,CAAP,KAAa,QAApB;AACD;AAJA,KALU,EAUV;AACD,MAAA,IAAI,EAAE,SADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,OAAO,CAAP,KAAa,SAApB;AACD;AAJA,KAVU,EAeV;AACD,MAAA,IAAI,EAAE,UADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,OAAO,CAAP,KAAa,UAApB;AACD;AAJA,KAfU,EAoBV;AACD,MAAA,IAAI,EAAE,OADL;AAED,MAAA,IAAI,EAAE,KAAK,CAAC;AAFX,KApBU,EAuBV;AACD,MAAA,IAAI,EAAE,MADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,CAAC,YAAY,IAApB;AACD;AAJA,KAvBU,EA4BV;AACD,MAAA,IAAI,EAAE,QADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,CAAC,YAAY,MAApB;AACD;AAJA,KA5BU,EAiCV;AACD,MAAA,IAAI,EAAE,QADL;AAED,MAAA,IAAI,EAAE;AAFL,KAjCU,EAoCV;AACD,MAAA,IAAI,EAAE,MADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,CAAC,KAAK,IAAb;AACD;AAJA,KApCU,EAyCV;AACD,MAAA,IAAI,EAAE,WADL;AAED,MAAA,IAAI,EAAE,SAAS,IAAT,CAAc,CAAd,EAAiB;AACrB,eAAO,CAAC,KAAK,SAAb;AACD;AAJA,KAzCU,CAAb;AA+CA,QAAI,OAAO,GAAG;AACZ,MAAA,IAAI,EAAE,KADM;AAEZ,MAAA,IAAI,EAAE,EAFM;AAGZ,MAAA,KAAK,EAAE;AAHK,KAAd,CAzDgB,CA6Dd;AACJ;AACA;AACA;AACA;;AAEE,QAAI,OAAJ,CAnEgB,CAmEJ;;AAEZ,QAAI,QAAJ,CArEgB,CAqEH;AACf;;AAEE,QAAI,YAAY,GAAG,CAAnB,CAxEgB,CAwEK;AACvB;;AAEE,QAAI,KAAK,GAAG;AACV,MAAA,WAAW,EAAE;AADH,KAAZ;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,aAAS,QAAT,CAAkB,QAAlB,EAA4B;AAC1B,UAAI,IAAI,GAAG,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAX;;AAEA,UAAI,IAAJ,EAAU;AACR,eAAO,IAAP;AACD,OALyB,CAKzB;;;AAGD,UAAI,OAAO,GAAG,mBAAmB,QAAnB,GAA8B,GAA5C;AACA,UAAI,IAAI,GAAG,QAAQ,CAAC,WAAT,EAAX;AACA,UAAI,SAAJ;;AAEA,UAAI,SAAS,GAAG,0BAA0B,CAAC,QAAD,CAA1C;AAAA,UACI,KADJ;;AAGA,UAAI;AACF,aAAK,SAAS,CAAC,CAAV,EAAL,EAAoB,CAAC,CAAC,KAAK,GAAG,SAAS,CAAC,CAAV,EAAT,EAAwB,IAA7C,GAAoD;AAClD,UAAA,SAAS,GAAG,KAAK,CAAC,KAAlB;;AAEA,cAAI,SAAS,CAAC,WAAV,OAA4B,IAAhC,EAAsC;AACpC,YAAA,OAAO,IAAI,qBAAqB,SAArB,GAAiC,KAA5C;AACA;AACD;AACF;AACF,OATD,CASE,OAAO,GAAP,EAAY;AACZ,QAAA,SAAS,CAAC,CAAV,CAAY,GAAZ;AACD,OAXD,SAWU;AACR,QAAA,SAAS,CAAC,CAAV;AACD;;AAED,YAAM,IAAI,SAAJ,CAAc,OAAd,CAAN;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,QAAT,CAAkB,KAAlB,EAAyB;AACvB,UAAI,UAAU,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,IAAwB,SAAS,CAAC,CAAD,CAAT,KAAiB,SAAzC,GAAqD,SAAS,CAAC,CAAD,CAA9D,GAAoE,KAArF;AACA,UAAI,WAAW,GAAG,UAAU,GAAG,QAAQ,CAAC,UAAD,CAAR,CAAqB,KAAxB,GAAgC,QAAQ,CAAC,MAArE;AACA,UAAI,QAAQ,GAAG,EAAf;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,YAAI,CAAC,KAAK,CAAC,CAAD,CAAN,IAAa,OAAO,KAAK,CAAC,CAAD,CAAL,CAAS,IAAhB,KAAyB,QAAtC,IAAkD,OAAO,KAAK,CAAC,CAAD,CAAL,CAAS,IAAhB,KAAyB,UAA/E,EAA2F;AACzF,gBAAM,IAAI,SAAJ,CAAc,gEAAd,CAAN;AACD;;AAED,YAAI,QAAQ,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,IAAxB;;AAEA,YAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAJ,EAA2B;AACzB,gBAAM,IAAI,SAAJ,CAAc,0BAA0B,QAA1B,GAAqC,GAAnD,CAAN;AACD;;AAED,QAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB;AACpB,UAAA,IAAI,EAAE,QADc;AAEpB,UAAA,IAAI,EAAE,KAAK,CAAC,CAAD,CAAL,CAAS,IAFK;AAGpB,UAAA,KAAK,EAAE,KAAK,CAAC,CAAD,CAAL,CAAS,KAHI;AAIpB,UAAA,KAAK,EAAE,WAAW,GAAG,CAJD;AAKpB,UAAA,aAAa,EAAE,EALK,CAKH;;AALG,SAAtB;AAQD,OAzBsB,CAyBtB;;;AAGD,UAAI,aAAa,GAAG,QAAQ,CAAC,KAAT,CAAe,WAAf,CAApB;AACA,MAAA,QAAQ,GAAG,QAAQ,CAAC,KAAT,CAAe,CAAf,EAAkB,WAAlB,EAA+B,MAA/B,CAAsC,QAAtC,EAAgD,MAAhD,CAAuD,aAAvD,CAAX,CA7BuB,CA6B0D;;AAEjF,WAAK,IAAI,EAAE,GAAG,WAAW,GAAG,QAAQ,CAAC,MAArC,EAA6C,EAAE,GAAG,QAAQ,CAAC,MAA3D,EAAmE,EAAE,EAArE,EAAyE;AACvE,QAAA,OAAO,CAAC,GAAR,CAAY,QAAQ,CAAC,EAAD,CAApB,EAA0B,KAA1B,GAAkC,EAAlC;AACD;AACF;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,KAAT,GAAiB;AACf,MAAA,OAAO,GAAG,IAAI,GAAJ,EAAV;AACA,MAAA,QAAQ,GAAG,EAAX;AACA,MAAA,YAAY,GAAG,CAAf;AACA,MAAA,QAAQ,CAAC,CAAC,OAAD,CAAD,EAAY,KAAZ,CAAR;AACD,KArLe,CAqLf;;;AAGD,IAAA,KAAK;AACL,IAAA,QAAQ,CAAC,MAAD,CAAR;AACF;AACA;AACA;;AAEE,aAAS,gBAAT,GAA4B;AAC1B,UAAI,QAAJ;;AAEA,UAAI,UAAU,GAAG,0BAA0B,CAAC,QAAD,CAA3C;AAAA,UACI,MADJ;;AAGA,UAAI;AACF,aAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,UAAA,QAAQ,GAAG,MAAM,CAAC,KAAlB;AACA,UAAA,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,aAAtB,GAAsC,EAAtC;AACD;AACF,OALD,CAKE,OAAO,GAAP,EAAY;AACZ,QAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,OAPD,SAOU;AACR,QAAA,UAAU,CAAC,CAAX;AACD;;AAED,MAAA,YAAY,GAAG,CAAf;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,aAAT,CAAuB,KAAvB,EAA8B;AAC5B,UAAI,OAAO,GAAG,QAAQ,CAAC,MAAT,CAAgB,UAAU,IAAV,EAAgB;AAC5C,YAAI,IAAI,GAAG,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAX;AACA,eAAO,CAAC,IAAI,CAAC,KAAN,IAAe,IAAI,CAAC,IAAL,CAAU,KAAV,CAAtB;AACD,OAHa,CAAd;;AAKA,UAAI,OAAO,CAAC,MAAZ,EAAoB;AAClB,eAAO,OAAP;AACD;;AAED,aAAO,CAAC,KAAD,CAAP;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,eAAT,CAAyB,MAAzB,EAAiC;AAC/B,aAAO,MAAM,IAAI,OAAO,MAAP,KAAkB,UAA5B,IAA0C,wBAAwB,MAAzE;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,aAAT,CAAuB,EAAvB,EAA2B,SAA3B,EAAsC,OAAtC,EAA+C;AAC7C,UAAI,CAAC,eAAe,CAAC,EAAD,CAApB,EAA0B;AACxB,cAAM,IAAI,SAAJ,CAAc,kBAAd,CAAN;AACD,OAH4C,CAG5C;;;AAGD,UAAI,KAAK,GAAG,OAAO,IAAI,OAAO,CAAC,KAA/B;AACA,UAAI,eAAe,GAAG,KAAK,CAAC,OAAN,CAAc,SAAd,IAA2B,SAAS,CAAC,IAAV,CAAe,GAAf,CAA3B,GAAiD,SAAvE;AACA,UAAI,MAAM,GAAG,cAAc,CAAC,eAAD,CAA3B;AACA,UAAI,kBAAkB,GAAG,eAAe,CAAC,MAAD,CAAxC,CAT6C,CASI;;AAEjD,UAAI,CAAC,KAAD,IAAU,kBAAkB,IAAI,EAAE,CAAC,UAAvC,EAAmD;AACvD;AACM,YAAI,KAAK,GAAG,EAAE,CAAC,kBAAH,CAAsB,YAAtB,CAAmC,GAAnC,CAAuC,kBAAvC,CAAZ;;AAEA,YAAI,KAAJ,EAAW;AACT,iBAAO,KAAP;AACD;AACF,OAlB4C,CAkB5C;AACL;AACA;AACA;;;AAGI,UAAI,OAAO,GAAG,MAAM,CAAC,MAArB;AACA,UAAI,mBAAJ;;AAEA,UAAI,KAAJ,EAAW;AACT,QAAA,mBAAmB,GAAG,EAAtB;AACA,YAAI,IAAJ;;AAEA,aAAK,IAAL,IAAa,EAAE,CAAC,UAAhB,EAA4B;AAC1B,UAAA,mBAAmB,CAAC,IAApB,CAAyB,EAAE,CAAC,kBAAH,CAAsB,YAAtB,CAAmC,GAAnC,CAAuC,IAAvC,CAAzB;AACD;AACF,OAPD,MAOO;AACL,QAAA,mBAAmB,GAAG,EAAE,CAAC,kBAAH,CAAsB,UAA5C;AACD;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,OAApB,EAA6B,EAAE,CAA/B,EAAkC;AAChC,YAAI,IAAI,GAAG,MAAM,CAAC,CAAD,CAAjB;AACA,YAAI,kBAAkB,GAAG,EAAzB;AACA,YAAI,WAAW,GAAG,KAAK,CAAvB;;AAEA,YAAI,UAAU,GAAG,0BAA0B,CAAC,mBAAD,CAA3C;AAAA,YACI,MADJ;;AAGA,YAAI;AACF,eAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,YAAA,WAAW,GAAG,MAAM,CAAC,KAArB;AACA,gBAAI,IAAI,GAAG,eAAe,CAAC,WAAW,CAAC,MAAb,EAAqB,CAArB,CAA1B;;AAEA,gBAAI,CAAC,IAAD,IAAS,IAAI,CAAC,SAAL,IAAkB,CAAC,IAAI,CAAC,SAArC,EAAgD;AAC9C;AACD;;AAED,gBAAI,CAAC,IAAI,CAAC,MAAV,EAAkB;AAChB,kBAAI,IAAI,GAAG,YAAY;AACnC;AACc,oBAAI,SAAS,GAAG,YAAY,CAAC,IAAD,CAA5B;;AAEA,oBAAI,IAAI,CAAC,KAAL,CAAW,IAAX,CAAgB,UAAU,KAAV,EAAiB;AACnC,yBAAO,CAAC,SAAS,CAAC,GAAV,CAAc,KAAK,CAAC,IAApB,CAAR;AACD,iBAFG,CAAJ,EAEI;AACF,yBAAO,UAAP;AACD;AACF,eATU,EAAX;;AAWA,kBAAI,IAAI,KAAK,UAAb,EAAyB;AAC1B,aArBoD,CAqBpD;;;AAGD,YAAA,kBAAkB,CAAC,IAAnB,CAAwB,WAAxB;AACD;AACF,SA3BD,CA2BE,OAAO,GAAP,EAAY;AACZ,UAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,SA7BD,SA6BU;AACR,UAAA,UAAU,CAAC,CAAX;AACD;;AAED,QAAA,mBAAmB,GAAG,kBAAtB;AACA,YAAI,mBAAmB,CAAC,MAApB,KAA+B,CAAnC,EAAsC;AACvC,OAjF4C,CAiF5C;;;AAGD,UAAI,SAAJ;;AAEA,UAAI,UAAU,GAAG,0BAA0B,CAAC,mBAAD,CAA3C;AAAA,UACI,MADJ;;AAGA,UAAI;AACF,aAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,UAAA,SAAS,GAAG,MAAM,CAAC,KAAnB;;AAEA,cAAI,SAAS,CAAC,MAAV,CAAiB,MAAjB,IAA2B,OAA/B,EAAwC;AACtC,mBAAO,SAAP;AACD;AACF;AACF,OARD,CAQE,OAAO,GAAP,EAAY;AACZ,QAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,OAVD,SAUU;AACR,QAAA,UAAU,CAAC,CAAX;AACD;;AAED,YAAM,IAAI,SAAJ,CAAc,sCAAsC,EAAE,CAAC,IAAH,IAAW,SAAjD,IAA8D,GAA9D,GAAoE,eAAe,CAAC,MAAD,EAAS,IAAT,CAAnF,GAAoG,IAAlH,CAAN;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,IAAT,CAAc,EAAd,EAAkB,SAAlB,EAA6B,OAA7B,EAAsC;AACpC,aAAO,aAAa,CAAC,EAAD,EAAK,SAAL,EAAgB,OAAhB,CAAb,CAAsC,cAA7C;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,OAAT,CAAiB,KAAjB,EAAwB,QAAxB,EAAkC;AACpC;AACI,UAAI,IAAI,GAAG,QAAQ,CAAC,QAAD,CAAnB;;AAEA,UAAI,IAAI,CAAC,IAAL,CAAU,KAAV,CAAJ,EAAsB;AACpB,eAAO,KAAP;AACD;;AAED,UAAI,WAAW,GAAG,IAAI,CAAC,aAAvB;;AAEA,UAAI,WAAW,CAAC,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,cAAM,IAAI,KAAJ,CAAU,iCAAiC,QAAjC,GAA4C,WAAtD,CAAN;AACD;;AAED,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,YAAI,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAX,CAAe,IAAhB,CAAvB;;AAEA,YAAI,QAAQ,CAAC,IAAT,CAAc,KAAd,CAAJ,EAA0B;AACxB,iBAAO,WAAW,CAAC,CAAD,CAAX,CAAe,OAAf,CAAuB,KAAvB,CAAP;AACD;AACF;;AAED,YAAM,IAAI,KAAJ,CAAU,oBAAoB,KAApB,GAA4B,MAA5B,GAAqC,QAA/C,CAAN;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,eAAT,CAAyB,MAAzB,EAAiC;AAC/B,UAAI,SAAS,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAnB,IAAwB,SAAS,CAAC,CAAD,CAAT,KAAiB,SAAzC,GAAqD,SAAS,CAAC,CAAD,CAA9D,GAAoE,GAApF;AACA,aAAO,MAAM,CAAC,GAAP,CAAW,UAAU,CAAV,EAAa;AAC7B,eAAO,CAAC,CAAC,IAAT;AACD,OAFM,EAEJ,IAFI,CAEC,SAFD,CAAP;AAGD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,UAAT,CAAoB,KAApB,EAA2B;AACzB,UAAI,SAAS,GAAG,KAAK,CAAC,OAAN,CAAc,KAAd,MAAyB,CAAzC;AACA,UAAI,KAAK,GAAG,CAAC,SAAD,GAAa,KAAb,GAAqB,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAnB,GAAoC,KAArE;AACA,UAAI,QAAQ,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,EAAiB,GAAjB,CAAqB,UAAU,CAAV,EAAa;AAC/C,eAAO,QAAQ,CAAC,CAAC,CAAC,IAAF,EAAD,CAAf;AACD,OAFc,CAAf;AAGA,UAAI,MAAM,GAAG,KAAb;AACA,UAAI,SAAS,GAAG,SAAS,GAAG,KAAH,GAAW,EAApC;AACA,UAAI,UAAU,GAAG,QAAQ,CAAC,GAAT,CAAa,UAAU,IAAV,EAAgB;AAC5C,QAAA,MAAM,GAAG,IAAI,CAAC,KAAL,IAAc,MAAvB;AACA,QAAA,SAAS,IAAI,IAAI,CAAC,IAAL,GAAY,GAAzB;AACA,eAAO;AACL,UAAA,IAAI,EAAE,IAAI,CAAC,IADN;AAEL,UAAA,SAAS,EAAE,IAAI,CAAC,KAFX;AAGL,UAAA,IAAI,EAAE,IAAI,CAAC,IAHN;AAIL,UAAA,KAAK,EAAE,IAAI,CAAC,KAJP;AAKL,UAAA,UAAU,EAAE,IALP;AAML,UAAA,eAAe,EAAE,CAAC;AANb,SAAP;AAQD,OAXgB,CAAjB;AAYA,aAAO;AACL,QAAA,KAAK,EAAE,UADF;AAEL,QAAA,IAAI,EAAE,SAAS,CAAC,KAAV,CAAgB,CAAhB,EAAmB,CAAC,CAApB,CAFD;AAGX;AACM,QAAA,MAAM,EAAE,MAJH;AAKL,QAAA,aAAa,EAAE,KALV;AAML,QAAA,SAAS,EAAE;AANN,OAAP;AAQD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B,UAAI,SAAS,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,UAAU,CAAV,EAAa;AAC3C,eAAO,CAAC,CAAC,IAAT;AACD,OAFe,CAAhB;AAGA,UAAI,mBAAmB,GAAG,oBAAoB,CAAC,SAAD,CAA9C;AACA,UAAI,MAAM,GAAG,KAAK,CAAC,MAAnB;AACA,UAAI,OAAO,GAAG,KAAK,CAAC,IAApB;AACA,UAAI,gBAAgB,GAAG,mBAAmB,CAAC,GAApB,CAAwB,UAAU,UAAV,EAAsB;AACnE,YAAI,IAAI,GAAG,QAAQ,CAAC,UAAU,CAAC,IAAZ,CAAnB;AACA,QAAA,MAAM,GAAG,IAAI,CAAC,KAAL,IAAc,MAAvB;AACA,QAAA,OAAO,IAAI,MAAM,UAAU,CAAC,IAA5B;AACA,eAAO;AACL,UAAA,IAAI,EAAE,UAAU,CAAC,IADZ;AAEL,UAAA,SAAS,EAAE,IAAI,CAAC,KAFX;AAGL,UAAA,IAAI,EAAE,IAAI,CAAC,IAHN;AAIL,UAAA,KAAK,EAAE,IAAI,CAAC,KAJP;AAKL,UAAA,UAAU,EAAE,UALP;AAML,UAAA,eAAe,EAAE,UAAU,CAAC;AANvB,SAAP;AAQD,OAZsB,CAAvB;AAaA,aAAO;AACL,QAAA,KAAK,EAAE,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAmB,gBAAnB,CADF;AAEL,QAAA,IAAI,EAAE,OAFD;AAGL,QAAA,MAAM,EAAE,MAHH;AAIL,QAAA,aAAa,EAAE,gBAAgB,CAAC,MAAjB,GAA0B,CAJpC;AAKL,QAAA,SAAS,EAAE,KAAK,CAAC;AALZ,OAAP;AAOD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,YAAT,CAAsB,KAAtB,EAA6B;AAC3B,UAAI,CAAC,KAAK,CAAC,OAAX,EAAoB;AAClB,QAAA,KAAK,CAAC,OAAN,GAAgB,IAAI,GAAJ,EAAhB;AACA,QAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,CAAoB,UAAU,IAAV,EAAgB;AAClC,iBAAO,KAAK,CAAC,OAAN,CAAc,GAAd,CAAkB,IAAI,CAAC,IAAvB,CAAP;AACD,SAFD;AAGD;;AAED,aAAO,KAAK,CAAC,OAAb;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,cAAT,CAAwB,YAAxB,EAAsC;AACpC,UAAI,MAAM,GAAG,EAAb;;AAEA,UAAI,OAAO,YAAP,KAAwB,QAA5B,EAAsC;AACpC,cAAM,IAAI,SAAJ,CAAc,4BAAd,CAAN;AACD;;AAED,UAAI,SAAS,GAAG,YAAY,CAAC,IAAb,EAAhB;;AAEA,UAAI,SAAS,KAAK,EAAlB,EAAsB;AACpB,eAAO,MAAP;AACD;;AAED,UAAI,SAAS,GAAG,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAhB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,SAAS,CAAC,MAA9B,EAAsC,EAAE,CAAxC,EAA2C;AACzC,YAAI,WAAW,GAAG,UAAU,CAAC,SAAS,CAAC,CAAD,CAAT,CAAa,IAAb,EAAD,CAA5B;;AAEA,YAAI,WAAW,CAAC,SAAZ,IAAyB,CAAC,KAAK,SAAS,CAAC,MAAV,GAAmB,CAAtD,EAAyD;AACvD,gBAAM,IAAI,WAAJ,CAAgB,gCAAgC,SAAS,CAAC,CAAD,CAAzC,GAA+C,KAA/C,GAAuD,qCAAvE,CAAN;AACD,SALwC,CAKxC;;;AAGD,YAAI,WAAW,CAAC,KAAZ,CAAkB,MAAlB,KAA6B,CAAjC,EAAoC;AAClC,iBAAO,IAAP;AACD;;AAED,QAAA,MAAM,CAAC,IAAP,CAAY,WAAZ;AACD;;AAED,aAAO,MAAP;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,UAAI,KAAK,GAAG,IAAI,CAAC,MAAD,CAAhB;AACA,aAAO,KAAK,GAAG,KAAK,CAAC,SAAT,GAAqB,KAAjC;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,KAArB,EAA4B;AAC1B,UAAI,CAAC,KAAD,IAAU,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAArC,EAAwC;AAC5C;AACM,eAAO,EAAP;AACD,OAHD,MAGO,IAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AACnC,eAAO,QAAQ,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAhB,CAAR,CAA8B,IAArC;AACD,OAFM,MAEA,IAAI,KAAK,CAAC,KAAN,CAAY,MAAZ,KAAuB,CAA3B,EAA8B;AACnC,YAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAhB,CAAR,CAA8B,IAA1C;AACA,YAAI,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,IAAhB,CAAR,CAA8B,IAA1C;AACA,eAAO,SAAS,EAAT,CAAY,CAAZ,EAAe;AACpB,iBAAO,KAAK,CAAC,CAAD,CAAL,IAAY,KAAK,CAAC,CAAD,CAAxB;AACD,SAFD;AAGD,OANM,MAMA;AACX;AACM,YAAI,KAAK,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,UAAU,IAAV,EAAgB;AAC1C,iBAAO,QAAQ,CAAC,IAAI,CAAC,IAAN,CAAR,CAAoB,IAA3B;AACD,SAFW,CAAZ;AAGA,eAAO,SAAS,EAAT,CAAY,CAAZ,EAAe;AACpB,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,gBAAI,KAAK,CAAC,CAAD,CAAL,CAAS,CAAT,CAAJ,EAAiB;AACf,qBAAO,IAAP;AACD;AACF;;AAED,iBAAO,KAAP;AACD,SARD;AASD;AACF;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC5B,UAAI,KAAJ,EAAW,KAAX,EAAkB,KAAlB;;AAEA,UAAI,YAAY,CAAC,MAAD,CAAhB,EAA0B;AAC9B;AACM,QAAA,KAAK,GAAG,OAAO,CAAC,MAAD,CAAP,CAAgB,GAAhB,CAAoB,WAApB,CAAR;AACA,YAAI,QAAQ,GAAG,KAAK,CAAC,MAArB;AACA,YAAI,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,MAAD,CAAL,CAA1B;;AAEA,YAAI,aAAa,GAAG,SAAS,aAAT,CAAuB,IAAvB,EAA6B;AAC/C,eAAK,IAAI,CAAC,GAAG,QAAb,EAAuB,CAAC,GAAG,IAAI,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,gBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAD,CAAL,CAAb,EAAwB;AACtB,qBAAO,KAAP;AACD;AACF;;AAED,iBAAO,IAAP;AACD,SARD;;AAUA,eAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,gBAAI,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,IAAI,CAAC,CAAD,CAAb,CAAL,EAAwB;AACtB,qBAAO,KAAP;AACD;AACF;;AAED,iBAAO,aAAa,CAAC,IAAD,CAAb,IAAuB,IAAI,CAAC,MAAL,IAAe,QAAQ,GAAG,CAAxD;AACD,SARD;AASD,OAzBD,MAyBO;AACX;AACM,YAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AACvB,iBAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,mBAAO,IAAI,CAAC,MAAL,KAAgB,CAAvB;AACD,WAFD;AAGD,SAJD,MAIO,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AAC9B,UAAA,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAD,CAAP,CAAnB;AACA,iBAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,mBAAO,KAAK,CAAC,IAAI,CAAC,CAAD,CAAL,CAAL,IAAkB,IAAI,CAAC,MAAL,KAAgB,CAAzC;AACD,WAFD;AAGD,SALM,MAKA,IAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AAC9B,UAAA,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAD,CAAP,CAAnB;AACA,UAAA,KAAK,GAAG,WAAW,CAAC,MAAM,CAAC,CAAD,CAAP,CAAnB;AACA,iBAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,mBAAO,KAAK,CAAC,IAAI,CAAC,CAAD,CAAL,CAAL,IAAkB,KAAK,CAAC,IAAI,CAAC,CAAD,CAAL,CAAvB,IAAoC,IAAI,CAAC,MAAL,KAAgB,CAA3D;AACD,WAFD;AAGD,SANM,MAMA;AACb;AACQ,UAAA,KAAK,GAAG,MAAM,CAAC,GAAP,CAAW,WAAX,CAAR;AACA,iBAAO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC7B,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,kBAAI,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,IAAI,CAAC,CAAD,CAAb,CAAL,EAAwB;AACtB,uBAAO,KAAP;AACD;AACF;;AAED,mBAAO,IAAI,CAAC,MAAL,KAAgB,KAAK,CAAC,MAA7B;AACD,WARD;AASD;AACF;AACF;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,eAAT,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC;AACtC,aAAO,KAAK,GAAG,MAAM,CAAC,MAAf,GAAwB,MAAM,CAAC,KAAD,CAA9B,GAAwC,YAAY,CAAC,MAAD,CAAZ,GAAuB,IAAI,CAAC,MAAD,CAA3B,GAAsC,IAArF;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,iBAAT,CAA2B,MAA3B,EAAmC,KAAnC,EAA0C;AACxC,UAAI,KAAK,GAAG,eAAe,CAAC,MAAD,EAAS,KAAT,CAA3B;;AAEA,UAAI,CAAC,KAAL,EAAY;AACV,eAAO,IAAI,GAAJ,EAAP;AACD;;AAED,aAAO,YAAY,CAAC,KAAD,CAAnB;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,IAArB,EAA2B;AACzB,aAAO,IAAI,CAAC,UAAL,KAAoB,IAApB,IAA4B,IAAI,CAAC,UAAL,KAAoB,SAAvD;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,mBAAT,CAA6B,UAA7B,EAAyC,KAAzC,EAAgD;AAC9C,UAAI,OAAO,GAAG,IAAI,GAAJ,EAAd;AACA,MAAA,UAAU,CAAC,OAAX,CAAmB,UAAU,SAAV,EAAqB;AACtC,YAAI,QAAQ,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAX,EAAmB,KAAnB,CAAhC;AACA,YAAI,IAAJ;;AAEA,YAAI,UAAU,GAAG,0BAA0B,CAAC,QAAD,CAA3C;AAAA,YACI,MADJ;;AAGA,YAAI;AACF,eAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,YAAA,IAAI,GAAG,MAAM,CAAC,KAAd;AACA,YAAA,OAAO,CAAC,GAAR,CAAY,IAAZ;AACD;AACF,SALD,CAKE,OAAO,GAAP,EAAY;AACZ,UAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,SAPD,SAOU;AACR,UAAA,UAAU,CAAC,CAAX;AACD;AACF,OAjBD;AAkBA,aAAO,OAAO,CAAC,GAAR,CAAY,KAAZ,IAAqB,CAAC,KAAD,CAArB,GAA+B,KAAK,CAAC,IAAN,CAAW,OAAX,CAAtC;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,UAAjC,EAA6C;AAC3C,UAAI,GAAJ,EAAS,QAAT;;AAEA,UAAI,KAAK,GAAG,IAAI,IAAI,SAApB,CAH2C,CAGb;;;AAG9B,UAAI,kBAAkB,GAAG,UAAzB;AACA,UAAI,KAAJ;;AAEA,UAAI,KAAK,GAAG,SAAS,KAAT,GAAiB;AAC3B,YAAI,gBAAgB,GAAG,EAAvB;AACA,QAAA,kBAAkB,CAAC,OAAnB,CAA2B,UAAU,SAAV,EAAqB;AAC9C,cAAI,KAAK,GAAG,eAAe,CAAC,SAAS,CAAC,MAAX,EAAmB,KAAnB,CAA3B;AACA,cAAI,IAAI,GAAG,WAAW,CAAC,KAAD,CAAtB;;AAEA,cAAI,CAAC,KAAK,GAAG,SAAS,CAAC,MAAV,CAAiB,MAAzB,IAAmC,YAAY,CAAC,SAAS,CAAC,MAAX,CAAhD,KAAuE,IAAI,CAAC,IAAI,CAAC,KAAD,CAAL,CAA/E,EAA8F;AAC5F,YAAA,gBAAgB,CAAC,IAAjB,CAAsB,SAAtB;AACD;AACF,SAPD;;AASA,YAAI,gBAAgB,CAAC,MAAjB,KAA4B,CAAhC,EAAmC;AACzC;AACQ,UAAA,QAAQ,GAAG,mBAAmB,CAAC,kBAAD,EAAqB,KAArB,CAA9B;;AAEA,cAAI,QAAQ,CAAC,MAAT,GAAkB,CAAtB,EAAyB;AACvB,gBAAI,WAAW,GAAG,aAAa,CAAC,IAAI,CAAC,KAAD,CAAL,CAA/B;AACA,YAAA,GAAG,GAAG,IAAI,SAAJ,CAAc,6CAA6C,KAA7C,GAAqD,cAArD,GAAsE,QAAQ,CAAC,IAAT,CAAc,MAAd,CAAtE,GAA8F,YAA9F,GAA6G,WAAW,CAAC,IAAZ,CAAiB,KAAjB,CAA7G,GAAuI,WAAvI,GAAqJ,KAArJ,GAA6J,GAA3K,CAAN;AACA,YAAA,GAAG,CAAC,IAAJ,GAAW;AACT,cAAA,QAAQ,EAAE,WADD;AAET,cAAA,EAAE,EAAE,KAFK;AAGT,cAAA,KAAK,EAAE,KAHE;AAIT,cAAA,MAAM,EAAE,WAJC;AAKT,cAAA,QAAQ,EAAE;AALD,aAAX;AAOA,mBAAO;AACL,cAAA,CAAC,EAAE;AADE,aAAP;AAGD;AACF,SAlBD,MAkBO;AACL,UAAA,kBAAkB,GAAG,gBAArB;AACD;AACF,OAhCD;;AAkCA,WAAK,KAAK,GAAG,CAAb,EAAgB,KAAK,GAAG,IAAI,CAAC,MAA7B,EAAqC,KAAK,EAA1C,EAA8C;AAC5C,YAAI,KAAK,GAAG,KAAK,EAAjB;;AAEA,YAAI,OAAO,CAAC,KAAD,CAAP,KAAmB,QAAvB,EAAiC,OAAO,KAAK,CAAC,CAAb;AAClC,OA/C0C,CA+C1C;;;AAGD,UAAI,OAAO,GAAG,kBAAkB,CAAC,GAAnB,CAAuB,UAAU,SAAV,EAAqB;AACxD,eAAO,YAAY,CAAC,SAAS,CAAC,MAAX,CAAZ,GAAiC,QAAjC,GAA4C,SAAS,CAAC,MAAV,CAAiB,MAApE;AACD,OAFa,CAAd;;AAIA,UAAI,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,OAArB,CAAlB,EAAiD;AAC/C,QAAA,QAAQ,GAAG,mBAAmB,CAAC,kBAAD,EAAqB,KAArB,CAA9B;AACA,QAAA,GAAG,GAAG,IAAI,SAAJ,CAAc,mCAAmC,KAAnC,GAA2C,cAA3C,GAA4D,QAAQ,CAAC,IAAT,CAAc,MAAd,CAA5D,GAAoF,WAApF,GAAkG,IAAI,CAAC,MAAvG,GAAgH,GAA9H,CAAN;AACA,QAAA,GAAG,CAAC,IAAJ,GAAW;AACT,UAAA,QAAQ,EAAE,YADD;AAET,UAAA,EAAE,EAAE,KAFK;AAGT,UAAA,KAAK,EAAE,IAAI,CAAC,MAHH;AAIT,UAAA,QAAQ,EAAE;AAJD,SAAX;AAMA,eAAO,GAAP;AACD,OAhE0C,CAgE1C;;;AAGD,UAAI,SAAS,GAAG,IAAI,CAAC,GAAL,CAAS,KAAT,CAAe,IAAf,EAAqB,OAArB,CAAhB;;AAEA,UAAI,IAAI,CAAC,MAAL,GAAc,SAAlB,EAA6B;AAC3B,QAAA,GAAG,GAAG,IAAI,SAAJ,CAAc,oCAAoC,KAApC,GAA4C,cAA5C,GAA6D,SAA7D,GAAyE,YAAzE,GAAwF,IAAI,CAAC,MAA7F,GAAsG,GAApH,CAAN;AACA,QAAA,GAAG,CAAC,IAAJ,GAAW;AACT,UAAA,QAAQ,EAAE,aADD;AAET,UAAA,EAAE,EAAE,KAFK;AAGT,UAAA,KAAK,EAAE,IAAI,CAAC,MAHH;AAIT,UAAA,cAAc,EAAE;AAJP,SAAX;AAMA,eAAO,GAAP;AACD,OA9E0C,CA8E1C;;;AAGD,UAAI,QAAQ,GAAG,EAAf;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;AACpC,QAAA,QAAQ,CAAC,IAAT,CAAc,aAAa,CAAC,IAAI,CAAC,CAAD,CAAL,CAAb,CAAuB,IAAvB,CAA4B,GAA5B,CAAd;AACD;;AAED,MAAA,GAAG,GAAG,IAAI,SAAJ,CAAc,wBAAwB,QAAQ,CAAC,IAAT,CAAc,IAAd,CAAxB,GAA8C,2DAA9C,GAA4G,KAA5G,GAAoH,GAAlI,CAAN;AACA,MAAA,GAAG,CAAC,IAAJ,GAAW;AACT,QAAA,QAAQ,EAAE,UADD;AAET,QAAA,MAAM,EAAE;AAFC,OAAX;AAIA,aAAO,GAAP;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,kBAAT,CAA4B,KAA5B,EAAmC;AACjC,UAAI,GAAG,GAAG,QAAQ,CAAC,MAAT,GAAkB,CAA5B;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,KAAN,CAAY,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,YAAI,WAAW,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAD,CAAf,EAAiC;AAC/B,UAAA,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,SAA7B,CAAN;AACD;AACF;;AAED,aAAO,GAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,wBAAT,CAAkC,KAAlC,EAAyC;AACvC,UAAI,GAAG,GAAG,YAAY,GAAG,CAAzB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,KAAN,CAAY,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,KAAN,CAAY,CAAZ,CAAD,CAAhB,EAAkC;AAChC,UAAA,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,GAAT,EAAc,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,eAA7B,CAAN;AACD;AACF;;AAED,aAAO,GAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,aAAT,CAAuB,MAAvB,EAA+B,MAA/B,EAAuC;AACzC;AACA;AACI,UAAI,MAAM,CAAC,MAAX,EAAmB;AACjB,YAAI,CAAC,MAAM,CAAC,MAAZ,EAAoB;AAClB,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,MAAM,CAAC,MAAX,EAAmB;AACxB,eAAO,CAAC,CAAR;AACD,OAToC,CASpC;;;AAGD,UAAI,MAAM,CAAC,SAAX,EAAsB;AACpB,YAAI,CAAC,MAAM,CAAC,SAAZ,EAAuB;AACrB,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,MAAM,CAAC,SAAX,EAAsB;AAC3B,eAAO,CAAC,CAAR;AACD,OAlBoC,CAkBpC;;;AAGD,UAAI,MAAM,CAAC,aAAX,EAA0B;AACxB,YAAI,CAAC,MAAM,CAAC,aAAZ,EAA2B;AACzB,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,MAAM,CAAC,aAAX,EAA0B;AAC/B,eAAO,CAAC,CAAR;AACD,OA3BoC,CA2BpC;;;AAGD,UAAI,QAAQ,GAAG,kBAAkB,CAAC,MAAD,CAAlB,GAA6B,kBAAkB,CAAC,MAAD,CAA9D;;AAEA,UAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAO,CAAC,CAAR;AACD;;AAED,UAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAO,CAAP;AACD,OAtCoC,CAsCpC;;;AAGD,UAAI,QAAQ,GAAG,wBAAwB,CAAC,MAAD,CAAxB,GAAmC,wBAAwB,CAAC,MAAD,CAA1E;;AAEA,UAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAO,CAAC,CAAR;AACD;;AAED,UAAI,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAO,CAAP;AACD,OAjDoC,CAiDpC;;;AAGD,aAAO,CAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,iBAAT,CAA2B,UAA3B,EAAuC,UAAvC,EAAmD;AACjD,UAAI,KAAK,GAAG,UAAU,CAAC,MAAvB;AACA,UAAI,KAAK,GAAG,UAAU,CAAC,MAAvB;AACA,UAAI,KAAK,GAAG,IAAI,CAAC,KAAD,CAAhB;AACA,UAAI,KAAK,GAAG,IAAI,CAAC,KAAD,CAAhB;AACA,UAAI,QAAQ,GAAG,YAAY,CAAC,KAAD,CAA3B;AACA,UAAI,QAAQ,GAAG,YAAY,CAAC,KAAD,CAA3B,CANiD,CAMd;AACvC;;AAEI,UAAI,QAAQ,IAAI,KAAK,CAAC,MAAtB,EAA8B;AAC5B,YAAI,CAAC,QAAD,IAAa,CAAC,KAAK,CAAC,MAAxB,EAAgC;AAC9B,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,QAAQ,IAAI,KAAK,CAAC,MAAtB,EAA8B;AACnC,eAAO,CAAC,CAAR;AACD,OAfgD,CAehD;;;AAGD,UAAI,IAAI,GAAG,CAAX;AACA,UAAI,KAAK,GAAG,CAAZ;AACA,UAAI,GAAJ;;AAEA,UAAI,UAAU,GAAG,0BAA0B,CAAC,KAAD,CAA3C;AAAA,UACI,MADJ;;AAGA,UAAI;AACF,aAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,UAAA,GAAG,GAAG,MAAM,CAAC,KAAb;AACA,cAAI,GAAG,CAAC,MAAR,EAAgB,EAAE,IAAF;AAChB,cAAI,GAAG,CAAC,aAAR,EAAuB,EAAE,KAAF;AACxB;AACF,OAND,CAME,OAAO,GAAP,EAAY;AACZ,QAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,OARD,SAQU;AACR,QAAA,UAAU,CAAC,CAAX;AACD;;AAED,UAAI,IAAI,GAAG,CAAX;AACA,UAAI,KAAK,GAAG,CAAZ;;AAEA,UAAI,UAAU,GAAG,0BAA0B,CAAC,KAAD,CAA3C;AAAA,UACI,MADJ;;AAGA,UAAI;AACF,aAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,UAAA,GAAG,GAAG,MAAM,CAAC,KAAb;AACA,cAAI,GAAG,CAAC,MAAR,EAAgB,EAAE,IAAF;AAChB,cAAI,GAAG,CAAC,aAAR,EAAuB,EAAE,KAAF;AACxB;AACF,OAND,CAME,OAAO,GAAP,EAAY;AACZ,QAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,OARD,SAQU;AACR,QAAA,UAAU,CAAC,CAAX;AACD;;AAED,UAAI,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAI,GAAG,IAAd;AACD,OAzDgD,CAyDhD;;;AAGD,UAAI,QAAQ,IAAI,KAAK,CAAC,aAAtB,EAAqC;AACnC,YAAI,CAAC,QAAD,IAAa,CAAC,KAAK,CAAC,aAAxB,EAAuC;AACrC,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,QAAQ,IAAI,KAAK,CAAC,aAAtB,EAAqC;AAC1C,eAAO,CAAC,CAAR;AACD,OAlEgD,CAkEhD;;;AAGD,UAAI,KAAK,KAAK,KAAd,EAAqB;AACnB,eAAO,KAAK,GAAG,KAAf;AACD,OAvEgD,CAuEhD;;;AAGD,UAAI,QAAJ,EAAc;AACZ,YAAI,CAAC,QAAL,EAAe;AACb,iBAAO,CAAP;AACD;AACF,OAJD,MAIO,IAAI,QAAJ,EAAc;AACnB,eAAO,CAAC,CAAR;AACD,OAhFgD,CAgFhD;;;AAGD,UAAI,eAAe,GAAG,CAAC,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAAtB,KAAiC,QAAQ,GAAG,CAAC,CAAJ,GAAQ,CAAjD,CAAtB;;AAEA,UAAI,eAAe,KAAK,CAAxB,EAA2B;AACzB,eAAO,eAAP;AACD,OAvFgD,CAuFhD;AACL;AACA;AACA;;;AAGI,UAAI,WAAW,GAAG,EAAlB;AACA,UAAI,EAAE,GAAG,CAAT;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,YAAI,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,CAAD,CAAN,EAAW,KAAK,CAAC,CAAD,CAAhB,CAAlC;AACA,QAAA,WAAW,CAAC,IAAZ,CAAiB,cAAjB;AACA,QAAA,EAAE,IAAI,cAAN;AACD;;AAED,UAAI,EAAE,KAAK,CAAX,EAAc;AACZ,eAAO,EAAP;AACD,OAxGgD,CAwGhD;AACL;AACA;AACA;;;AAGI,UAAI,CAAJ;;AAEA,WAAK,IAAI,GAAG,GAAG,CAAV,EAAa,YAAY,GAAG,WAAjC,EAA8C,GAAG,GAAG,YAAY,CAAC,MAAjE,EAAyE,GAAG,EAA5E,EAAgF;AAC9E,QAAA,CAAC,GAAG,YAAY,CAAC,GAAD,CAAhB;;AAEA,YAAI,CAAC,KAAK,CAAV,EAAa;AACX,iBAAO,CAAP;AACD;AACF,OAtHgD,CAsHhD;;;AAGD,aAAO,CAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,oBAAT,CAA8B,SAA9B,EAAyC;AACvC,UAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,eAAO,EAAP;AACD;;AAED,UAAI,KAAK,GAAG,SAAS,CAAC,GAAV,CAAc,QAAd,CAAZ;;AAEA,UAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,QAAA,KAAK,CAAC,IAAN,CAAW,UAAU,EAAV,EAAc,EAAd,EAAkB;AAC3B,iBAAO,EAAE,CAAC,KAAH,GAAW,EAAE,CAAC,KAArB;AACD,SAFD;AAGD;;AAED,UAAI,OAAO,GAAG,KAAK,CAAC,CAAD,CAAL,CAAS,aAAvB;;AAEA,UAAI,SAAS,CAAC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,eAAO,OAAP;AACD;;AAED,MAAA,OAAO,GAAG,OAAO,CAAC,MAAR,CAAe,EAAf,CAAV,CAnBuC,CAmBV;AACjC;AACA;;AAEI,UAAI,UAAU,GAAG,IAAI,GAAJ,CAAQ,SAAR,CAAjB;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,YAAI,QAAQ,GAAG,KAAK,CAApB;;AAEA,YAAI,UAAU,GAAG,0BAA0B,CAAC,KAAK,CAAC,CAAD,CAAL,CAAS,aAAV,CAA3C;AAAA,YACI,MADJ;;AAGA,YAAI;AACF,eAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,YAAA,QAAQ,GAAG,MAAM,CAAC,KAAlB;;AAEA,gBAAI,CAAC,UAAU,CAAC,GAAX,CAAe,QAAQ,CAAC,IAAxB,CAAL,EAAoC;AAClC,cAAA,OAAO,CAAC,IAAR,CAAa,QAAb;AACA,cAAA,UAAU,CAAC,GAAX,CAAe,QAAQ,CAAC,IAAxB;AACD;AACF;AACF,SATD,CASE,OAAO,GAAP,EAAY;AACZ,UAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,SAXD,SAWU;AACR,UAAA,UAAU,CAAC,CAAX;AACD;AACF;;AAED,aAAO,OAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,wBAAT,CAAkC,MAAlC,EAA0C,EAA1C,EAA8C;AAC5C,UAAI,SAAS,GAAG,EAAhB,CAD4C,CACzB;;AAEnB,UAAI,MAAM,CAAC,IAAP,CAAY,UAAU,CAAV,EAAa;AAC3B,eAAO,CAAC,CAAC,aAAT;AACD,OAFG,CAAJ,EAEI;AACF,YAAI,SAAS,GAAG,YAAY,CAAC,MAAD,CAA5B;AACA,YAAI,mBAAmB,GAAG,MAAM,CAAC,GAAP,CAAW,oBAAX,CAA1B;;AAEA,QAAA,SAAS,GAAG,SAAS,WAAT,GAAuB;AACjC,cAAI,IAAI,GAAG,EAAX;AACA,cAAI,IAAI,GAAG,SAAS,GAAG,SAAS,CAAC,MAAV,GAAmB,CAAtB,GAA0B,SAAS,CAAC,MAAxD;;AAEA,eAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAApB,EAA0B,CAAC,EAA3B,EAA+B;AAC7B,YAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,mBAAmB,CAAC,CAAD,CAAnB,CAAuB,SAAS,CAAC,CAAD,CAAhC,CAAV;AACD;;AAED,cAAI,SAAJ,EAAe;AACb,YAAA,IAAI,CAAC,IAAD,CAAJ,GAAa,SAAS,CAAC,IAAD,CAAT,CAAgB,GAAhB,CAAoB,mBAAmB,CAAC,IAAD,CAAvC,CAAb;AACD;;AAED,iBAAO,EAAE,CAAC,KAAH,CAAS,IAAT,EAAe,IAAf,CAAP;AACD,SAbD;AAcD;;AAED,UAAI,YAAY,GAAG,SAAnB;;AAEA,UAAI,YAAY,CAAC,MAAD,CAAhB,EAA0B;AACxB,YAAI,MAAM,GAAG,MAAM,CAAC,MAAP,GAAgB,CAA7B;;AAEA,QAAA,YAAY,GAAG,SAAS,oBAAT,GAAgC;AAC7C,iBAAO,SAAS,CAAC,KAAV,CAAgB,IAAhB,EAAsB,KAAK,CAAC,SAAD,EAAY,CAAZ,EAAe,MAAf,CAAL,CAA4B,MAA5B,CAAmC,CAAC,KAAK,CAAC,SAAD,EAAY,MAAZ,CAAN,CAAnC,CAAtB,CAAP;AACD,SAFD;AAGD;;AAED,aAAO,YAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,oBAAT,CAA8B,KAA9B,EAAqC;AACnC,UAAI,KAAJ,EAAW,KAAX,EAAkB,WAAlB,EAA+B,WAA/B;AACA,UAAI,KAAK,GAAG,EAAZ;AACA,UAAI,WAAW,GAAG,EAAlB;AACA,MAAA,KAAK,CAAC,KAAN,CAAY,OAAZ,CAAoB,UAAU,IAAV,EAAgB;AAClC,YAAI,IAAI,CAAC,UAAT,EAAqB;AACnB,UAAA,KAAK,CAAC,IAAN,CAAW,QAAQ,CAAC,IAAI,CAAC,UAAL,CAAgB,IAAjB,CAAR,CAA+B,IAA1C;AACA,UAAA,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,UAAL,CAAgB,OAAjC;AACD;AACF,OALD,EAJmC,CAShC;;AAEH,cAAQ,WAAW,CAAC,MAApB;AACE,aAAK,CAAL;AACE,iBAAO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,mBAAO,GAAP;AACD,WAFD;;AAIF,aAAK,CAAL;AACE,UAAA,KAAK,GAAG,KAAK,CAAC,CAAD,CAAb;AACA,UAAA,WAAW,GAAG,WAAW,CAAC,CAAD,CAAzB;AACA,iBAAO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,gBAAI,KAAK,CAAC,GAAD,CAAT,EAAgB;AACd,qBAAO,WAAW,CAAC,GAAD,CAAlB;AACD;;AAED,mBAAO,GAAP;AACD,WAND;;AAQF,aAAK,CAAL;AACE,UAAA,KAAK,GAAG,KAAK,CAAC,CAAD,CAAb;AACA,UAAA,KAAK,GAAG,KAAK,CAAC,CAAD,CAAb;AACA,UAAA,WAAW,GAAG,WAAW,CAAC,CAAD,CAAzB;AACA,UAAA,WAAW,GAAG,WAAW,CAAC,CAAD,CAAzB;AACA,iBAAO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,gBAAI,KAAK,CAAC,GAAD,CAAT,EAAgB;AACd,qBAAO,WAAW,CAAC,GAAD,CAAlB;AACD;;AAED,gBAAI,KAAK,CAAC,GAAD,CAAT,EAAgB;AACd,qBAAO,WAAW,CAAC,GAAD,CAAlB;AACD;;AAED,mBAAO,GAAP;AACD,WAVD;;AAYF;AACE,iBAAO,SAAS,UAAT,CAAoB,GAApB,EAAyB;AAC9B,iBAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAAW,CAAC,MAAhC,EAAwC,CAAC,EAAzC,EAA6C;AAC3C,kBAAI,KAAK,CAAC,CAAD,CAAL,CAAS,GAAT,CAAJ,EAAmB;AACjB,uBAAO,WAAW,CAAC,CAAD,CAAX,CAAe,GAAf,CAAP;AACD;AACF;;AAED,mBAAO,GAAP;AACD,WARD;AAnCJ;AA6CD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,MAArB,EAA6B;AAC3B,eAAS,YAAT,CAAsB,MAAtB,EAA8B,KAA9B,EAAqC,WAArC,EAAkD;AAChD,YAAI,KAAK,GAAG,MAAM,CAAC,MAAnB,EAA2B;AACzB,cAAI,KAAK,GAAG,MAAM,CAAC,KAAD,CAAlB;AACA,cAAI,eAAe,GAAG,EAAtB;;AAEA,cAAI,KAAK,CAAC,SAAV,EAAqB;AAC7B;AACA;AACU,gBAAI,UAAU,GAAG,KAAK,CAAC,KAAN,CAAY,MAAZ,CAAmB,WAAnB,CAAjB;;AAEA,gBAAI,UAAU,CAAC,MAAX,GAAoB,KAAK,CAAC,KAAN,CAAY,MAApC,EAA4C;AAC1C,cAAA,eAAe,CAAC,IAAhB,CAAqB;AACnB,gBAAA,KAAK,EAAE,UADY;AAEnB,gBAAA,IAAI,EAAE,QAAQ,UAAU,CAAC,GAAX,CAAe,UAAU,CAAV,EAAa;AACxC,yBAAO,CAAC,CAAC,IAAT;AACD,iBAFa,EAEX,IAFW,CAEN,GAFM,CAFK;AAKnB,gBAAA,MAAM,EAAE,UAAU,CAAC,IAAX,CAAgB,UAAU,CAAV,EAAa;AACnC,yBAAO,CAAC,CAAC,KAAT;AACD,iBAFO,CALW;AAQnB,gBAAA,aAAa,EAAE,KARI;AASnB,gBAAA,SAAS,EAAE;AATQ,eAArB;AAWD;;AAED,YAAA,eAAe,CAAC,IAAhB,CAAqB,KAArB;AACD,WApBD,MAoBO;AACf;AACU,YAAA,eAAe,GAAG,KAAK,CAAC,KAAN,CAAY,GAAZ,CAAgB,UAAU,IAAV,EAAgB;AAChD,qBAAO;AACL,gBAAA,KAAK,EAAE,CAAC,IAAD,CADF;AAEL,gBAAA,IAAI,EAAE,IAAI,CAAC,IAFN;AAGL,gBAAA,MAAM,EAAE,IAAI,CAAC,KAHR;AAIL,gBAAA,aAAa,EAAE,IAAI,CAAC,UAJf;AAKL,gBAAA,SAAS,EAAE;AALN,eAAP;AAOD,aARiB,CAAlB;AASD,WAnCwB,CAmCxB;;;AAGD,iBAAO,OAAO,CAAC,eAAD,EAAkB,UAAU,SAAV,EAAqB;AACnD,mBAAO,YAAY,CAAC,MAAD,EAAS,KAAK,GAAG,CAAjB,EAAoB,WAAW,CAAC,MAAZ,CAAmB,CAAC,SAAD,CAAnB,CAApB,CAAnB;AACD,WAFa,CAAd;AAGD,SAzCD,MAyCO;AACb;AACQ,iBAAO,CAAC,WAAD,CAAP;AACD;AACF;;AAED,aAAO,YAAY,CAAC,MAAD,EAAS,CAAT,EAAY,EAAZ,CAAnB;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,OAArB,EAA8B,OAA9B,EAAuC;AACrC,UAAI,EAAE,GAAG,IAAI,CAAC,GAAL,CAAS,OAAO,CAAC,MAAjB,EAAyB,OAAO,CAAC,MAAjC,CAAT;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,YAAI,QAAQ,GAAG,iBAAiB,CAAC,OAAD,EAAU,CAAV,CAAhC;AACA,YAAI,QAAQ,GAAG,iBAAiB,CAAC,OAAD,EAAU,CAAV,CAAhC;AACA,YAAI,OAAO,GAAG,KAAd;AACA,YAAI,IAAI,GAAG,KAAK,CAAhB;;AAEA,YAAI,UAAU,GAAG,0BAA0B,CAAC,QAAD,CAA3C;AAAA,YACI,MADJ;;AAGA,YAAI;AACF,eAAK,UAAU,CAAC,CAAX,EAAL,EAAqB,CAAC,CAAC,MAAM,GAAG,UAAU,CAAC,CAAX,EAAV,EAA0B,IAAhD,GAAuD;AACrD,YAAA,IAAI,GAAG,MAAM,CAAC,KAAd;;AAEA,gBAAI,QAAQ,CAAC,GAAT,CAAa,IAAb,CAAJ,EAAwB;AACtB,cAAA,OAAO,GAAG,IAAV;AACA;AACD;AACF;AACF,SATD,CASE,OAAO,GAAP,EAAY;AACZ,UAAA,UAAU,CAAC,CAAX,CAAa,GAAb;AACD,SAXD,SAWU;AACR,UAAA,UAAU,CAAC,CAAX;AACD;;AAED,YAAI,CAAC,OAAL,EAAc;AACZ,iBAAO,KAAP;AACD;AACF;;AAED,UAAI,IAAI,GAAG,OAAO,CAAC,MAAnB;AACA,UAAI,IAAI,GAAG,OAAO,CAAC,MAAnB;AACA,UAAI,UAAU,GAAG,YAAY,CAAC,OAAD,CAA7B;AACA,UAAI,UAAU,GAAG,YAAY,CAAC,OAAD,CAA7B;AACA,aAAO,UAAU,GAAG,UAAU,GAAG,IAAI,KAAK,IAAZ,GAAmB,IAAI,IAAI,IAAxC,GAA+C,UAAU,GAAG,IAAI,IAAI,IAAX,GAAkB,IAAI,KAAK,IAArG;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,gBAAT,CAA0B,YAA1B,EAAwC;AACtC,aAAO,YAAY,CAAC,GAAb,CAAiB,UAAU,EAAV,EAAc;AACpC,YAAI,aAAa,CAAC,EAAD,CAAjB,EAAuB;AACrB,iBAAO,WAAW,CAAC,EAAE,CAAC,WAAH,CAAe,QAAhB,CAAlB;AACD;;AAED,YAAI,SAAS,CAAC,EAAD,CAAb,EAAmB;AACjB,iBAAO,WAAW,CAAC,EAAE,CAAC,OAAH,CAAW,UAAZ,EAAwB,EAAE,CAAC,OAAH,CAAW,QAAnC,CAAlB;AACD;;AAED,eAAO,EAAP;AACD,OAVM,CAAP;AAWD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,kBAAT,CAA4B,UAA5B,EAAwC,YAAxC,EAAsD,YAAtD,EAAoE;AAClE,UAAI,kBAAkB,GAAG,EAAzB;AACA,UAAI,SAAJ;;AAEA,UAAI,WAAW,GAAG,0BAA0B,CAAC,UAAD,CAA5C;AAAA,UACI,OADJ;;AAGA,UAAI;AACF,aAAK,WAAW,CAAC,CAAZ,EAAL,EAAsB,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,CAAZ,EAAX,EAA4B,IAAnD,GAA0D;AACxD,UAAA,SAAS,GAAG,OAAO,CAAC,KAApB;AACA,cAAI,UAAU,GAAG,YAAY,CAAC,SAAD,CAA7B;;AAEA,cAAI,OAAO,UAAP,KAAsB,QAA1B,EAAoC;AAClC,kBAAM,IAAI,SAAJ,CAAc,6CAA6C,SAA7C,GAAyD,GAAvE,CAAN;AACD;;AAED,UAAA,UAAU,GAAG,YAAY,CAAC,UAAD,CAAzB;;AAEA,cAAI,OAAO,UAAP,KAAsB,UAA1B,EAAsC;AACpC,mBAAO,KAAP;AACD;;AAED,UAAA,kBAAkB,CAAC,IAAnB,CAAwB,UAAxB;AACD;AACF,OAjBD,CAiBE,OAAO,GAAP,EAAY;AACZ,QAAA,WAAW,CAAC,CAAZ,CAAc,GAAd;AACD,OAnBD,SAmBU;AACR,QAAA,WAAW,CAAC,CAAZ;AACD;;AAED,aAAO,kBAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,iBAAT,CAA2B,YAA3B,EAAyC,YAAzC,EAAuD,IAAvD,EAA6D;AAC3D,UAAI,iBAAiB,GAAG,gBAAgB,CAAC,YAAD,CAAxC;AACA,UAAI,UAAU,GAAG,IAAI,KAAJ,CAAU,iBAAiB,CAAC,MAA5B,EAAoC,IAApC,CAAyC,KAAzC,CAAjB;AACA,UAAI,cAAc,GAAG,IAArB;;AAEA,aAAO,cAAP,EAAuB;AACrB,QAAA,cAAc,GAAG,KAAjB;AACA,YAAI,eAAe,GAAG,IAAtB;;AAEA,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,iBAAiB,CAAC,MAAtC,EAA8C,EAAE,CAAhD,EAAmD;AACjD,cAAI,UAAU,CAAC,CAAD,CAAd,EAAmB;AACnB,cAAI,EAAE,GAAG,iBAAiB,CAAC,CAAD,CAA1B;;AAEA,cAAI,aAAa,CAAC,EAAD,CAAjB,EAAuB;AACrB,YAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EAAE,CAAC,WAAH,CAAe,QAAf,CAAwB,IAAxB,CAAvB,CADqB,CACgC;;AAErD,YAAA,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,GAAmC,EAAE,CAAC,WAAtC;AACA,YAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,IAAhB;AACA,YAAA,eAAe,GAAG,KAAlB;AACD,WAND,MAMO,IAAI,SAAS,CAAC,EAAD,CAAb,EAAmB;AACxB,gBAAI,kBAAkB,GAAG,kBAAkB,CAAC,EAAE,CAAC,OAAH,CAAW,UAAZ,EAAwB,iBAAxB,EAA2C,YAA3C,CAA3C;;AAEA,gBAAI,kBAAJ,EAAwB;AACtB,cAAA,iBAAiB,CAAC,CAAD,CAAjB,GAAuB,EAAE,CAAC,OAAH,CAAW,QAAX,CAAoB,KAApB,CAA0B,IAA1B,EAAgC,kBAAhC,CAAvB,CADsB,CACqD;;AAE3E,cAAA,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,OAArB,GAA+B,EAAE,CAAC,OAAlC;AACA,cAAA,UAAU,CAAC,CAAD,CAAV,GAAgB,IAAhB;AACA,cAAA,eAAe,GAAG,KAAlB;AACD,aAND,MAMO;AACL,cAAA,cAAc,GAAG,IAAjB;AACD;AACF;AACF;;AAED,YAAI,eAAe,IAAI,cAAvB,EAAuC;AACrC,gBAAM,IAAI,WAAJ,CAAgB,wDAAhB,CAAN;AACD;AACF;;AAED,aAAO,iBAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,sBAAT,CAAgC,aAAhC,EAA+C;AACjD;AACA;AACI,UAAI,mBAAmB,GAAG,2BAA1B;AACA,MAAA,MAAM,CAAC,IAAP,CAAY,aAAZ,EAA2B,OAA3B,CAAmC,UAAU,SAAV,EAAqB;AACtD,YAAI,EAAE,GAAG,aAAa,CAAC,SAAD,CAAtB;;AAEA,YAAI,mBAAmB,CAAC,IAApB,CAAyB,EAAE,CAAC,QAAH,EAAzB,CAAJ,EAA6C;AAC3C,gBAAM,IAAI,WAAJ,CAAgB,+CAA+C,wCAA/C,GAA0F,kDAA1G,CAAN;AACD;AACF,OAND;AAOD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,mBAAT,CAA6B,IAA7B,EAAmC,gBAAnC,EAAqD;AACnD,MAAA,KAAK,CAAC,WAAN;;AAEA,UAAI,MAAM,CAAC,IAAP,CAAY,gBAAZ,EAA8B,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,cAAM,IAAI,WAAJ,CAAgB,wBAAhB,CAAN;AACD;;AAED,UAAI,KAAK,CAAC,yBAAV,EAAqC;AACnC,QAAA,sBAAsB,CAAC,gBAAD,CAAtB;AACD,OATkD,CASlD;;;AAGD,UAAI,YAAY,GAAG,EAAnB;AACA,UAAI,iBAAiB,GAAG,EAAxB;AACA,UAAI,aAAa,GAAG,EAApB;AACA,UAAI,qBAAqB,GAAG,EAA5B,CAfmD,CAepB;;AAE/B,UAAI,SAAJ;;AAEA,UAAI,MAAM,GAAG,SAAS,MAAT,GAAkB;AACnC;AACM,YAAI,CAAC,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,gBAArC,EAAuD,SAAvD,CAAL,EAAwE;AACtE,iBAAO,UAAP;AACD,SAJ4B,CAI5B;;;AAGD,YAAI,MAAM,GAAG,cAAc,CAAC,SAAD,CAA3B;AACA,YAAI,CAAC,MAAL,EAAa,OAAO,UAAP,CARgB,CAQE;;AAE/B,QAAA,YAAY,CAAC,OAAb,CAAqB,UAAU,EAAV,EAAc;AACjC,cAAI,WAAW,CAAC,EAAD,EAAK,MAAL,CAAf,EAA6B;AAC3B,kBAAM,IAAI,SAAJ,CAAc,6BAA6B,eAAe,CAAC,EAAD,CAA5C,GAAmD,SAAnD,GAA+D,eAAe,CAAC,MAAD,CAA9E,GAAyF,IAAvG,CAAN;AACD;AACF,SAJD;AAKA,QAAA,YAAY,CAAC,IAAb,CAAkB,MAAlB,EAf6B,CAeH;;AAE1B,YAAI,aAAa,GAAG,iBAAiB,CAAC,MAAtC;AACA,QAAA,iBAAiB,CAAC,IAAlB,CAAuB,gBAAgB,CAAC,SAAD,CAAvC;AACA,YAAI,gBAAgB,GAAG,MAAM,CAAC,GAAP,CAAW,WAAX,CAAvB,CAnB6B,CAmBkB;;AAE/C,YAAI,EAAE,GAAG,KAAK,CAAd;;AAEA,YAAI,WAAW,GAAG,0BAA0B,CAAC,WAAW,CAAC,gBAAD,CAAZ,CAA5C;AAAA,YACI,OADJ;;AAGA,YAAI;AACF,eAAK,WAAW,CAAC,CAAZ,EAAL,EAAsB,CAAC,CAAC,OAAO,GAAG,WAAW,CAAC,CAAZ,EAAX,EAA4B,IAAnD,GAA0D;AACxD,YAAA,EAAE,GAAG,OAAO,CAAC,KAAb;AACA,gBAAI,MAAM,GAAG,eAAe,CAAC,EAAD,CAA5B;AACA,YAAA,qBAAqB,CAAC,IAAtB,CAA2B;AACzB,cAAA,MAAM,EAAE,EADiB;AAEzB,cAAA,IAAI,EAAE,MAFmB;AAGzB,cAAA,EAAE,EAAE;AAHqB,aAA3B;;AAMA,gBAAI,EAAE,CAAC,KAAH,CAAS,UAAU,CAAV,EAAa;AACxB,qBAAO,CAAC,CAAC,CAAC,aAAV;AACD,aAFG,CAAJ,EAEI;AACF,cAAA,aAAa,CAAC,MAAD,CAAb,GAAwB,aAAxB;AACD;AACF;AACF,SAhBD,CAgBE,OAAO,GAAP,EAAY;AACZ,UAAA,WAAW,CAAC,CAAZ,CAAc,GAAd;AACD,SAlBD,SAkBU;AACR,UAAA,WAAW,CAAC,CAAZ;AACD;AACF,OA/CD;;AAiDA,WAAK,SAAL,IAAkB,gBAAlB,EAAoC;AAClC,YAAI,KAAK,GAAG,MAAM,EAAlB;;AAEA,YAAI,KAAK,KAAK,UAAd,EAA0B;AAC3B;;AAED,MAAA,qBAAqB,CAAC,IAAtB,CAA2B,iBAA3B,EA1EmD,CA0EL;;AAE9C,UAAI,iBAAiB,GAAG,iBAAiB,CAAC,iBAAD,EAAoB,aAApB,EAAmC,UAAnC,CAAzC,CA5EmD,CA4EqC;;AAExF,UAAI,CAAJ;;AAEA,WAAK,CAAL,IAAU,aAAV,EAAyB;AACvB,YAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,aAArC,EAAoD,CAApD,CAAJ,EAA4D;AAC1D,UAAA,aAAa,CAAC,CAAD,CAAb,GAAmB,iBAAiB,CAAC,aAAa,CAAC,CAAD,CAAd,CAApC;AACD;AACF;;AAED,UAAI,UAAU,GAAG,EAAjB;AACA,UAAI,oBAAoB,GAAG,IAAI,GAAJ,EAA3B,CAvFmD,CAuFd;;AAErC,WAAK,IAAI,GAAG,GAAG,CAAV,EAAa,qBAAqB,GAAG,qBAA1C,EAAiE,GAAG,GAAG,qBAAqB,CAAC,MAA7F,EAAqG,GAAG,EAAxG,EAA4G;AAC1G,QAAA,CAAC,GAAG,qBAAqB,CAAC,GAAD,CAAzB,CAD0G,CAGhH;AACA;AACA;;AACM,YAAI,CAAC,oBAAoB,CAAC,GAArB,CAAyB,CAAC,CAAC,IAA3B,CAAL,EAAuC;AACrC,UAAA,CAAC,CAAC,EAAF,GAAO,iBAAiB,CAAC,CAAC,CAAC,EAAH,CAAxB;AACA,UAAA,UAAU,CAAC,IAAX,CAAgB,CAAhB;AACA,UAAA,oBAAoB,CAAC,GAArB,CAAyB,CAAC,CAAC,IAA3B,EAAiC,CAAjC;AACD;AACF,OApGkD,CAoGlD;;;AAGD,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,IAAiB,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAArB,IAA+B,CAAhD,IAAqD,CAAC,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAA5E;AACA,UAAI,KAAK,GAAG,GAAG,IAAI,GAAP,IAAc,GAAd,IAAqB,GAArB,IAA4B,GAA5B,IAAmC,GAA/C,CA7GmD,CA6GA;;AAEnD,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,UAAU,CAAC,MAA/B,EAAuC,EAAE,CAAzC,EAA4C;AAC1C,QAAA,UAAU,CAAC,CAAD,CAAV,CAAc,IAAd,GAAqB,YAAY,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAf,CAAjC;AACD;;AAED,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D;AACA,UAAI,MAAM,GAAG,GAAG,GAAG,WAAW,CAAC,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,CAArB,CAAD,CAAd,GAA0C,KAA1D,CA9HmD,CA8Ha;;AAEhE,WAAK,IAAI,GAAG,GAAG,CAAf,EAAkB,GAAG,GAAG,UAAU,CAAC,MAAnC,EAA2C,EAAE,GAA7C,EAAkD;AAChD,QAAA,UAAU,CAAC,GAAD,CAAV,CAAgB,cAAhB,GAAiC,wBAAwB,CAAC,UAAU,CAAC,GAAD,CAAV,CAAgB,MAAjB,EAAyB,UAAU,CAAC,GAAD,CAAV,CAAgB,EAAzC,CAAzD;AACD;;AAED,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,GAAG,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,cAAjB,GAAkC,KAA/C;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD;AACA,UAAI,IAAI,GAAG,GAAG,GAAG,UAAU,CAAC,CAAD,CAAV,CAAc,MAAd,CAAqB,MAAxB,GAAiC,CAAC,CAAhD,CA/ImD,CA+ID;;AAElD,UAAI,MAAM,GAAG,KAAK,GAAG,CAAH,GAAO,CAAzB;AACA,UAAI,IAAI,GAAG,UAAU,CAAC,MAAtB,CAlJmD,CAkJtB;;AAE7B,UAAI,KAAK,GAAG,UAAU,CAAC,GAAX,CAAe,UAAU,CAAV,EAAa;AACtC,eAAO,CAAC,CAAC,IAAT;AACD,OAFW,CAAZ;AAGA,UAAI,GAAG,GAAG,UAAU,CAAC,GAAX,CAAe,UAAU,CAAV,EAAa;AACpC,eAAO,CAAC,CAAC,cAAT;AACD,OAFS,CAAV;;AAIA,UAAI,OAAO,GAAG,SAAS,OAAT,GAAmB;AAG/B,aAAK,IAAI,GAAG,GAAG,MAAf,EAAuB,GAAG,GAAG,IAA7B,EAAmC,GAAG,EAAtC,EAA0C;AACxC,cAAI,KAAK,CAAC,GAAD,CAAL,CAAW,SAAX,CAAJ,EAA2B;AACzB,mBAAO,GAAG,CAAC,GAAD,CAAH,CAAS,KAAT,CAAe,IAAf,EAAqB,SAArB,CAAP;AACD;AACF;;AAED,eAAO,KAAK,CAAC,UAAN,CAAiB,IAAjB,EAAuB,SAAvB,EAAkC,UAAlC,CAAP;AACD,OAVD,CA3JmD,CAqKjD;AACN;;;AAGI,eAAS,UAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAG9B,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,YAAI,SAAS,CAAC,MAAV,KAAqB,IAArB,IAA6B,MAAM,CAAC,IAAD,CAAnC,IAA6C,MAAM,CAAC,IAAD,CAAvD,EAA+D;AAC7D,iBAAO,GAAG,CAAC,KAAJ,CAAU,IAAV,EAAgB,SAAhB,CAAP;AACD;;AAED,eAAO,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,SAApB,CAAP;AACD,OArMkD,CAqMlD;;;AAGD,UAAI;AACF,QAAA,MAAM,CAAC,cAAP,CAAsB,UAAtB,EAAkC,MAAlC,EAA0C;AACxC,UAAA,KAAK,EAAE;AADiC,SAA1C;AAGD,OAJD,CAIE,OAAO,GAAP,EAAY,CAAA;AAClB;AACA;AACK,OA/MkD,CA+MlD;AACL;AACA;;;AAGI,MAAA,UAAU,CAAC,UAAX,GAAwB,aAAxB,CApNmD,CAoNb;AAC1C;;AAEI,MAAA,UAAU,CAAC,kBAAX,GAAgC;AAC9B,QAAA,UAAU,EAAE,UADkB;AAE9B,QAAA,YAAY,EAAE;AAFgB,OAAhC;AAIA,aAAO,UAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,IAArB,EAA2B,IAA3B,EAAiC,UAAjC,EAA6C;AAC3C,YAAM,WAAW,CAAC,IAAD,EAAO,IAAP,EAAa,UAAb,CAAjB;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,OAAT,CAAiB,GAAjB,EAAsB;AACpB,aAAO,KAAK,CAAC,GAAD,EAAM,CAAN,EAAS,GAAG,CAAC,MAAJ,GAAa,CAAtB,CAAZ;AACD;AACH;AACA;AACA;AACA;AACA;;;AAGE,aAAS,IAAT,CAAc,GAAd,EAAmB;AACjB,aAAO,GAAG,CAAC,GAAG,CAAC,MAAJ,GAAa,CAAd,CAAV;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,KAAT,CAAe,GAAf,EAAoB,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,aAAO,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,GAA3B,EAAgC,KAAhC,EAAuC,GAAvC,CAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,GAArB,EAA0B,IAA1B,EAAgC;AAC9B,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAAG,CAAC,MAAxB,EAAgC,CAAC,EAAjC,EAAqC;AACnC,YAAI,IAAI,CAAC,GAAG,CAAC,CAAD,CAAJ,CAAR,EAAkB;AAChB,iBAAO,GAAG,CAAC,CAAD,CAAV;AACD;AACF;;AAED,aAAO,SAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,OAAT,CAAiB,GAAjB,EAAsB,QAAtB,EAAgC;AAC9B,aAAO,KAAK,CAAC,SAAN,CAAgB,MAAhB,CAAuB,KAAvB,CAA6B,EAA7B,EAAiC,GAAG,CAAC,GAAJ,CAAQ,QAAR,CAAjC,CAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,OAAT,GAAmB;AACjB,UAAI,UAAU,GAAG,OAAO,CAAC,SAAD,CAAP,CAAmB,GAAnB,CAAuB,UAAU,CAAV,EAAa;AACnD,eAAO,eAAe,CAAC,cAAc,CAAC,CAAD,CAAf,CAAtB;AACD,OAFgB,CAAjB;AAGA,UAAI,QAAQ,GAAG,IAAI,CAAC,SAAD,CAAnB;;AAEA,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAI,SAAJ,CAAc,6CAAd,CAAN;AACD;;AAED,aAAO,WAAW,CAAC,UAAD,EAAa,QAAb,CAAlB;AACD;;AAED,aAAS,WAAT,CAAqB,UAArB,EAAiC,QAAjC,EAA2C;AACzC,aAAO;AACL,QAAA,OAAO,EAAE;AACP,UAAA,UAAU,EAAE,UADL;AAEP,UAAA,QAAQ,EAAE;AAFH;AADJ,OAAP;AAMD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,WAAT,CAAqB,QAArB,EAA+B;AAC7B,UAAI,OAAO,QAAP,KAAoB,UAAxB,EAAoC;AAClC,cAAM,IAAI,SAAJ,CAAc,8CAAd,CAAN;AACD;;AAED,aAAO;AACL,QAAA,WAAW,EAAE;AACX,UAAA,QAAQ,EAAE;AADC;AADR,OAAP;AAKD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,SAAT,CAAmB,UAAnB,EAA+B;AAC7B,aAAO,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,OAAZ,CAAP,KAAgC,QAA9C,IAA0D,KAAK,CAAC,OAAN,CAAc,UAAU,CAAC,OAAX,CAAmB,UAAjC,CAA1D,IAA0G,OAAO,UAAU,CAAC,OAAX,CAAmB,QAA1B,KAAuC,UAAxJ;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,aAAT,CAAuB,UAAvB,EAAmC;AACjC,aAAO,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,WAAZ,CAAP,KAAoC,QAAlD,IAA8D,OAAO,UAAU,CAAC,WAAX,CAAuB,QAA9B,KAA2C,UAAhH;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,SAAT,CAAmB,SAAnB,EAA8B,OAA9B,EAAuC;AACrC,UAAI,CAAC,SAAL,EAAgB;AACd,eAAO,OAAP;AACD;;AAED,UAAI,OAAO,IAAI,OAAO,KAAK,SAA3B,EAAsC;AACpC,YAAI,GAAG,GAAG,IAAI,KAAJ,CAAU,4CAA4C,SAA5C,GAAwD,YAAxD,GAAuE,OAAvE,GAAiF,GAA3F,CAAV;AACA,QAAA,GAAG,CAAC,IAAJ,GAAW;AACT,UAAA,MAAM,EAAE,OADC;AAET,UAAA,QAAQ,EAAE;AAFD,SAAX;AAIA,cAAM,GAAN;AACD;;AAED,aAAO,SAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,aAAT,CAAuB,GAAvB,EAA4B;AAC1B,UAAI,IAAJ;;AAEA,WAAK,IAAI,GAAT,IAAgB,GAAhB,EAAqB;AACzB;AACA;AACM,YAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,GAArC,EAA0C,GAA1C,MAAmD,eAAe,CAAC,GAAG,CAAC,GAAD,CAAJ,CAAf,IAA6B,OAAO,GAAG,CAAC,GAAD,CAAH,CAAS,SAAhB,KAA8B,QAA9G,CAAJ,EAA6H;AAC3H,UAAA,IAAI,GAAG,SAAS,CAAC,IAAD,EAAO,GAAG,CAAC,GAAD,CAAH,CAAS,IAAhB,CAAhB;AACD;AACF;;AAED,aAAO,IAAP;AACD;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,eAAT,CAAyB,IAAzB,EAA+B,MAA/B,EAAuC;AACrC,UAAI,GAAJ;;AAEA,WAAK,GAAL,IAAY,MAAZ,EAAoB;AAClB,YAAI,MAAM,CAAC,SAAP,CAAiB,cAAjB,CAAgC,IAAhC,CAAqC,MAArC,EAA6C,GAA7C,CAAJ,EAAuD;AACrD,cAAI,GAAG,IAAI,IAAX,EAAiB;AACf,gBAAI,MAAM,CAAC,GAAD,CAAN,KAAgB,IAAI,CAAC,GAAD,CAAxB,EAA+B;AAC7B,kBAAI,GAAG,GAAG,IAAI,KAAJ,CAAU,gBAAgB,GAAhB,GAAsB,oBAAhC,CAAV;AACA,cAAA,GAAG,CAAC,IAAJ,GAAW;AACT,gBAAA,SAAS,EAAE,GADF;AAET,gBAAA,cAAc,EAAE,MAAM,CAAC,GAAD,CAFb;AAGT,gBAAA,YAAY,EAAE,IAAI,CAAC,GAAD;AAHT,eAAX;AAKA,oBAAM,GAAN;AACD,aATc,CASd;;AAEF;;AAED,UAAA,IAAI,CAAC,GAAD,CAAJ,GAAY,MAAM,CAAC,GAAD,CAAlB;AACD;AACF;AACF;;AAED,QAAI,SAAS,GAAG,KAAhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,IAAA,KAAK,GAAG,SAAS,KAAT,CAAe,SAAf,EAA0B;AAChC,UAAI,KAAK,GAAG,OAAO,SAAP,KAAqB,QAAjC;AACA,UAAI,KAAK,GAAG,KAAK,GAAG,CAAH,GAAO,CAAxB;AACA,UAAI,IAAI,GAAG,KAAK,GAAG,SAAH,GAAe,EAA/B;AACA,UAAI,aAAa,GAAG,EAApB;;AAEA,WAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,SAAS,CAAC,MAAlC,EAA0C,EAAE,CAA5C,EAA+C;AAC7C,YAAI,IAAI,GAAG,SAAS,CAAC,CAAD,CAApB;AACA,YAAI,eAAe,GAAG,EAAtB;AACA,YAAI,QAAQ,GAAG,KAAK,CAApB;;AAEA,YAAI,OAAO,IAAP,KAAgB,UAApB,EAAgC;AAC9B,UAAA,QAAQ,GAAG,IAAI,CAAC,IAAhB;;AAEA,cAAI,OAAO,IAAI,CAAC,SAAZ,KAA0B,QAA9B,EAAwC;AAChD;AACU,YAAA,eAAe,CAAC,IAAI,CAAC,SAAN,CAAf,GAAkC,IAAlC;AACD,WAHD,MAGO,IAAI,eAAe,CAAC,IAAD,CAAnB,EAA2B;AAC1C;AACU,YAAA,eAAe,GAAG,IAAI,CAAC,UAAvB;AACD;AACF,SAVD,MAUO,IAAI,aAAa,CAAC,IAAD,CAAjB,EAAyB;AACtC;AACQ,UAAA,eAAe,GAAG,IAAlB;;AAEA,cAAI,CAAC,KAAL,EAAY;AACV,YAAA,QAAQ,GAAG,aAAa,CAAC,IAAD,CAAxB;AACD;AACF;;AAED,YAAI,MAAM,CAAC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,KAAwC,CAA5C,EAA+C;AAC7C,cAAI,GAAG,GAAG,IAAI,SAAJ,CAAc,oCAAoC,CAApC,GAAwC,8BAAxC,GAAyE,gEAAvF,CAAV;AACA,UAAA,GAAG,CAAC,IAAJ,GAAW;AACT,YAAA,KAAK,EAAE,CADE;AAET,YAAA,QAAQ,EAAE;AAFD,WAAX;AAIA,gBAAM,GAAN;AACD;;AAED,YAAI,CAAC,KAAL,EAAY;AACV,UAAA,IAAI,GAAG,SAAS,CAAC,IAAD,EAAO,QAAP,CAAhB;AACD;;AAED,QAAA,eAAe,CAAC,aAAD,EAAgB,eAAhB,CAAf;AACD;;AAED,aAAO,mBAAmB,CAAC,IAAI,IAAI,EAAT,EAAa,aAAb,CAA1B;AACD,KA/CD;;AAiDA,IAAA,KAAK,CAAC,MAAN,GAAe,MAAf;AACA,IAAA,KAAK,CAAC,WAAN,GAAoB,SAAS,CAAC,WAA9B;AACA,IAAA,KAAK,CAAC,UAAN,GAAmB,WAAnB;AACA,IAAA,KAAK,CAAC,kBAAN,GAA2B,WAA3B;AACA,IAAA,KAAK,CAAC,WAAN,GAAoB,WAApB;AACA,IAAA,KAAK,CAAC,KAAN,GAAc,KAAd;AACA,IAAA,KAAK,CAAC,gBAAN,GAAyB,gBAAzB;AACA,IAAA,KAAK,CAAC,QAAN,GAAiB,QAAjB;AACA,IAAA,KAAK,CAAC,SAAN,GAAkB,QAAlB,CAriEgB,CAqiEW;;AAE3B,IAAA,KAAK,CAAC,OAAN,GAAgB,OAAhB;AACA,IAAA,KAAK,CAAC,WAAN,GAAoB,WAApB;AACA,IAAA,KAAK,CAAC,OAAN,GAAgB,OAAhB;AACA,IAAA,KAAK,CAAC,aAAN,GAAsB,aAAtB;AACA,IAAA,KAAK,CAAC,IAAN,GAAa,IAAb;AACA,IAAA,KAAK,CAAC,eAAN,GAAwB,eAAxB;AACA,IAAA,KAAK,CAAC,yBAAN,GAAkC,IAAlC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEE,IAAA,KAAK,CAAC,OAAN,GAAgB,UAAU,IAAV,EAAgB,gBAAhB,EAAkC;AAChD,UAAI,MAAM,GAAG,KAAb;;AAEA,UAAI,gBAAgB,KAAK,KAArB,IAA8B,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAlC,EAAyD;AACvD,QAAA,MAAM,GAAG,QAAT;AACD;;AAED,MAAA,KAAK,CAAC,QAAN,CAAe,CAAC,IAAD,CAAf,EAAuB,MAAvB;AACD,KARD;AASF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,aAAS,mBAAT,CAA6B,UAA7B,EAAyC;AACvC,UAAI,CAAC,UAAD,IAAe,OAAO,UAAU,CAAC,IAAlB,KAA2B,QAA1C,IAAsD,OAAO,UAAU,CAAC,EAAlB,KAAyB,QAA/E,IAA2F,OAAO,UAAU,CAAC,OAAlB,KAA8B,UAA7H,EAAyI;AACvI,cAAM,IAAI,SAAJ,CAAc,+EAAd,CAAN;AACD;;AAED,UAAI,UAAU,CAAC,EAAX,KAAkB,UAAU,CAAC,IAAjC,EAAuC;AACrC,cAAM,IAAI,WAAJ,CAAgB,wCAAwC,UAAU,CAAC,IAAnD,GAA0D,cAA1E,CAAN;AACD;AACF;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,IAAA,KAAK,CAAC,aAAN,GAAsB,UAAU,UAAV,EAAsB;AAC1C,MAAA,mBAAmB,CAAC,UAAD,CAAnB;;AAEA,UAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,EAAZ,CAAjB;;AAEA,UAAI,EAAE,CAAC,aAAH,CAAiB,KAAjB,CAAuB,UAAU,KAAV,EAAiB;AAC1C,eAAO,KAAK,CAAC,IAAN,KAAe,UAAU,CAAC,IAAjC;AACD,OAFG,CAAJ,EAEI;AACF,QAAA,EAAE,CAAC,aAAH,CAAiB,IAAjB,CAAsB;AACpB,UAAA,IAAI,EAAE,UAAU,CAAC,IADG;AAEpB,UAAA,OAAO,EAAE,UAAU,CAAC,OAFA;AAGpB,UAAA,KAAK,EAAE,YAAY;AAHC,SAAtB;AAKD,OARD,MAQO;AACL,cAAM,IAAI,KAAJ,CAAU,yCAAyC,UAAU,CAAC,IAApD,GAA2D,QAA3D,GAAsE,EAAE,CAAC,IAAzE,GAAgF,GAA1F,CAAN;AACD;AACF,KAhBD;AAiBF;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,IAAA,KAAK,CAAC,cAAN,GAAuB,UAAU,WAAV,EAAuB;AAC5C,MAAA,WAAW,CAAC,OAAZ,CAAoB,KAAK,CAAC,aAA1B;AACD,KAFD;AAGF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,IAAA,KAAK,CAAC,gBAAN,GAAyB,UAAU,UAAV,EAAsB;AAC7C,MAAA,mBAAmB,CAAC,UAAD,CAAnB;;AAEA,UAAI,EAAE,GAAG,QAAQ,CAAC,UAAU,CAAC,EAAZ,CAAjB;AACA,UAAI,kBAAkB,GAAG,WAAW,CAAC,EAAE,CAAC,aAAJ,EAAmB,UAAU,CAAV,EAAa;AAClE,eAAO,CAAC,CAAC,IAAF,KAAW,UAAU,CAAC,IAA7B;AACD,OAFmC,CAApC;;AAIA,UAAI,CAAC,kBAAL,EAAyB;AACvB,cAAM,IAAI,KAAJ,CAAU,mDAAmD,UAAU,CAAC,IAA9D,GAAqE,MAArE,GAA8E,UAAU,CAAC,EAAnG,CAAN;AACD;;AAED,UAAI,kBAAkB,CAAC,OAAnB,KAA+B,UAAU,CAAC,OAA9C,EAAuD;AACrD,cAAM,IAAI,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAED,UAAI,KAAK,GAAG,EAAE,CAAC,aAAH,CAAiB,OAAjB,CAAyB,kBAAzB,CAAZ;AACA,MAAA,EAAE,CAAC,aAAH,CAAiB,MAAjB,CAAwB,KAAxB,EAA+B,CAA/B;AACD,KAlBD;AAmBF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGE,IAAA,KAAK,CAAC,OAAN,GAAgB,UAAU,EAAV,EAAc,OAAd,EAAuB;AACrC,UAAI,CAAC,eAAe,CAAC,EAAD,CAApB,EAA0B;AACxB,cAAM,IAAI,SAAJ,CAAc,kBAAd,CAAN;AACD;;AAED,UAAI,IAAI,GAAG,EAAE,CAAC,kBAAH,CAAsB,UAAjC;;AAEA,WAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;AACpC,YAAI,IAAI,CAAC,CAAD,CAAJ,CAAQ,IAAR,CAAa,OAAb,CAAJ,EAA2B;AACzB,iBAAO,IAAI,CAAC,CAAD,CAAX;AACD;AACF;;AAED,aAAO,IAAP;AACD,KAdD;;AAgBA,WAAO,KAAP;AACD;;AAED,MAAA,aAAA,GAAe,MAAM,EAArB","sourcesContent":["function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\nfunction ok() {\n  return true;\n}\n\nfunction notOk() {\n  return false;\n}\n\nfunction undef() {\n  return undefined;\n}\n\nvar NOT_TYPED_FUNCTION = 'Argument is not a typed-function.';\n/**\n * @typedef {{\n *   params: Param[],\n *   fn: function,\n *   test: function,\n *   implementation: function\n * }} Signature\n *\n * @typedef {{\n *   types: Type[],\n *   hasAny: boolean,\n *   hasConversion: boolean,\n *   restParam: boolean\n * }} Param\n *\n * @typedef {{\n *   name: string,\n *   typeIndex: number,\n *   test: function,\n *   isAny: boolean,\n *   conversion?: ConversionDef,\n *   conversionIndex: number,\n * }} Type\n *\n * @typedef {{\n *   from: string,\n *   to: string,\n *   convert: function (*) : *\n * }} ConversionDef\n *\n * @typedef {{\n *   name: string,\n *   test: function(*) : boolean,\n *   isAny?: boolean\n * }} TypeDef\n */\n\n/**\n * @returns {() => function}\n */\n\nfunction create() {\n  // data type tests\n\n  /**\n   * Returns true if the argument is a non-null \"plain\" object\n   */\n  function isPlainObject(x) {\n    return _typeof(x) === 'object' && x !== null && x.constructor === Object;\n  }\n\n  var _types = [{\n    name: 'number',\n    test: function test(x) {\n      return typeof x === 'number';\n    }\n  }, {\n    name: 'string',\n    test: function test(x) {\n      return typeof x === 'string';\n    }\n  }, {\n    name: 'boolean',\n    test: function test(x) {\n      return typeof x === 'boolean';\n    }\n  }, {\n    name: 'Function',\n    test: function test(x) {\n      return typeof x === 'function';\n    }\n  }, {\n    name: 'Array',\n    test: Array.isArray\n  }, {\n    name: 'Date',\n    test: function test(x) {\n      return x instanceof Date;\n    }\n  }, {\n    name: 'RegExp',\n    test: function test(x) {\n      return x instanceof RegExp;\n    }\n  }, {\n    name: 'Object',\n    test: isPlainObject\n  }, {\n    name: 'null',\n    test: function test(x) {\n      return x === null;\n    }\n  }, {\n    name: 'undefined',\n    test: function test(x) {\n      return x === undefined;\n    }\n  }];\n  var anyType = {\n    name: 'any',\n    test: ok,\n    isAny: true\n  }; // Data structures to track the types. As these are local variables in\n  // create(), each typed universe will get its own copy, but the variables\n  // will only be accessible through the (closures of the) functions supplied\n  // as properties of the typed object, not directly.\n  // These will be initialized in clear() below\n\n  var typeMap; // primary store of all types\n\n  var typeList; // Array of just type names, for the sake of ordering\n  // And similar data structures for the type conversions:\n\n  var nConversions = 0; // the actual conversions are stored on a property of the destination types\n  // This is a temporary object, will be replaced with a function at the end\n\n  var typed = {\n    createCount: 0\n  };\n  /**\n   * Takes a type name and returns the corresponding official type object\n   * for that type.\n   *\n   * @param {string} typeName\n   * @returns {TypeDef} type\n   */\n\n  function findType(typeName) {\n    var type = typeMap.get(typeName);\n\n    if (type) {\n      return type;\n    } // Remainder is error handling\n\n\n    var message = 'Unknown type \"' + typeName + '\"';\n    var name = typeName.toLowerCase();\n    var otherName;\n\n    var _iterator = _createForOfIteratorHelper(typeList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        otherName = _step.value;\n\n        if (otherName.toLowerCase() === name) {\n          message += '. Did you mean \"' + otherName + '\" ?';\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new TypeError(message);\n  }\n  /**\n   * Adds an array `types` of type definitions to this typed instance.\n   * Each type definition should be an object with properties:\n   * 'name' - a string giving the name of the type; 'test' - function\n   * returning a boolean that tests membership in the type; and optionally\n   * 'isAny' - true only for the 'any' type.\n   *\n   * The second optional argument, `before`, gives the name of a type that\n   * these types should be added before. The new types are added in the\n   * order specified.\n   * @param {TypeDef[]} types\n   * @param {string | boolean} [beforeSpec='any'] before\n   */\n\n\n  function addTypes(types) {\n    var beforeSpec = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'any';\n    var beforeIndex = beforeSpec ? findType(beforeSpec).index : typeList.length;\n    var newTypes = [];\n\n    for (var i = 0; i < types.length; ++i) {\n      if (!types[i] || typeof types[i].name !== 'string' || typeof types[i].test !== 'function') {\n        throw new TypeError('Object with properties {name: string, test: function} expected');\n      }\n\n      var typeName = types[i].name;\n\n      if (typeMap.has(typeName)) {\n        throw new TypeError('Duplicate type name \"' + typeName + '\"');\n      }\n\n      newTypes.push(typeName);\n      typeMap.set(typeName, {\n        name: typeName,\n        test: types[i].test,\n        isAny: types[i].isAny,\n        index: beforeIndex + i,\n        conversionsTo: [] // Newly added type can't have any conversions to it\n\n      });\n    } // update the typeList\n\n\n    var affectedTypes = typeList.slice(beforeIndex);\n    typeList = typeList.slice(0, beforeIndex).concat(newTypes).concat(affectedTypes); // Fix the indices\n\n    for (var _i = beforeIndex + newTypes.length; _i < typeList.length; ++_i) {\n      typeMap.get(typeList[_i]).index = _i;\n    }\n  }\n  /**\n   * Removes all types and conversions from this typed instance.\n   * May cause previously constructed typed-functions to throw\n   * strange errors when they are called with types that do not\n   * match any of their signatures.\n   */\n\n\n  function clear() {\n    typeMap = new Map();\n    typeList = [];\n    nConversions = 0;\n    addTypes([anyType], false);\n  } // initialize the types to the default list\n\n\n  clear();\n  addTypes(_types);\n  /**\n   * Removes all conversions, leaving the types alone.\n   */\n\n  function clearConversions() {\n    var typeName;\n\n    var _iterator2 = _createForOfIteratorHelper(typeList),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        typeName = _step2.value;\n        typeMap.get(typeName).conversionsTo = [];\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    nConversions = 0;\n  }\n  /**\n   * Find the type names that match a value.\n   * @param {*} value\n   * @return {string[]} Array of names of types for which\n   *                  the type test matches the value.\n   */\n\n\n  function findTypeNames(value) {\n    var matches = typeList.filter(function (name) {\n      var type = typeMap.get(name);\n      return !type.isAny && type.test(value);\n    });\n\n    if (matches.length) {\n      return matches;\n    }\n\n    return ['any'];\n  }\n  /**\n   * Check if an entity is a typed function created by any instance\n   * @param {any} entity\n   * @returns {boolean}\n   */\n\n\n  function isTypedFunction(entity) {\n    return entity && typeof entity === 'function' && '_typedFunctionData' in entity;\n  }\n  /**\n   * Find a specific signature from a (composed) typed function, for example:\n   *\n   *   typed.findSignature(fn, ['number', 'string'])\n   *   typed.findSignature(fn, 'number, string')\n   *   typed.findSignature(fn, 'number,string', {exact: true})\n   *\n   * This function findSignature will by default return the best match to\n   * the given signature, possibly employing type conversions.\n   *\n   * The (optional) third argument is a plain object giving options\n   * controlling the signature search. Currently the only implemented\n   * option is `exact`: if specified as true (default is false), only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Note that a (possibly different) type matching\n   * `any`, or one or more instances of TYPE matching `...TYPE` are\n   * considered exact matches in this regard, as no conversions are used.\n   *\n   * This function returns a \"signature\" object, as does `typed.resolve()`,\n   * which is a plain object with four keys: `params` (the array of parameters\n   * for this signature), `fn` (the originally supplied function for this\n   * signature), `test` (a generated function that determines if an argument\n   * list matches this signature, and `implementation` (the function to call\n   * on a matching argument list, that performs conversions if necessary and\n   * then calls the originally supplied function).\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature search as documented\n   * @return {{ params: Param[], fn: function, test: function, implementation: function }}\n   *     Returns the matching signature, or throws an error when no signature\n   *     is found.\n   */\n\n\n  function findSignature(fn, signature, options) {\n    if (!isTypedFunction(fn)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    } // Canonicalize input\n\n\n    var exact = options && options.exact;\n    var stringSignature = Array.isArray(signature) ? signature.join(',') : signature;\n    var params = parseSignature(stringSignature);\n    var canonicalSignature = stringifyParams(params); // First hope we get lucky and exactly match a signature\n\n    if (!exact || canonicalSignature in fn.signatures) {\n      // OK, we can check the internal signatures\n      var match = fn._typedFunctionData.signatureMap.get(canonicalSignature);\n\n      if (match) {\n        return match;\n      }\n    } // Oh well, we did not; so we have to go back and check the parameters\n    // one by one, in order to catch things like `any` and rest params.\n    // Note here we can assume there is at least one parameter, because\n    // the empty signature would have matched successfully above.\n\n\n    var nParams = params.length;\n    var remainingSignatures;\n\n    if (exact) {\n      remainingSignatures = [];\n      var name;\n\n      for (name in fn.signatures) {\n        remainingSignatures.push(fn._typedFunctionData.signatureMap.get(name));\n      }\n    } else {\n      remainingSignatures = fn._typedFunctionData.signatures;\n    }\n\n    for (var i = 0; i < nParams; ++i) {\n      var want = params[i];\n      var filteredSignatures = [];\n      var possibility = void 0;\n\n      var _iterator3 = _createForOfIteratorHelper(remainingSignatures),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          possibility = _step3.value;\n          var have = getParamAtIndex(possibility.params, i);\n\n          if (!have || want.restParam && !have.restParam) {\n            continue;\n          }\n\n          if (!have.hasAny) {\n            var _ret = function () {\n              // have to check all of the wanted types are available\n              var haveTypes = paramTypeSet(have);\n\n              if (want.types.some(function (wtype) {\n                return !haveTypes.has(wtype.name);\n              })) {\n                return \"continue\";\n              }\n            }();\n\n            if (_ret === \"continue\") continue;\n          } // OK, this looks good\n\n\n          filteredSignatures.push(possibility);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      remainingSignatures = filteredSignatures;\n      if (remainingSignatures.length === 0) break;\n    } // Return the first remaining signature that was totally matched:\n\n\n    var candidate;\n\n    var _iterator4 = _createForOfIteratorHelper(remainingSignatures),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        candidate = _step4.value;\n\n        if (candidate.params.length <= nParams) {\n          return candidate;\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    throw new TypeError('Signature not found (signature: ' + (fn.name || 'unnamed') + '(' + stringifyParams(params, ', ') + '))');\n  }\n  /**\n   * Find the proper function to call for a specific signature from\n   * a (composed) typed function, for example:\n   *\n   *   typed.find(fn, ['number', 'string'])\n   *   typed.find(fn, 'number, string')\n   *   typed.find(fn, 'number,string', {exact: true})\n   *\n   * This function find will by default return the best match to\n   * the given signature, possibly employing type conversions (and returning\n   * a function that will perform those conversions as needed). The\n   * (optional) third argument is a plain object giving options contolling\n   * the signature search. Currently only the option `exact` is implemented,\n   * which defaults to \"false\". If `exact` is specified as true, then only\n   * exact matches will be returned (i.e. signatures for which `fn` was\n   * directly defined). Uses of `any` and `...TYPE` are considered exact if\n   * no conversions are necessary to apply the corresponding function.\n   *\n   * @param {Function} fn                   A typed-function\n   * @param {string | string[]} signature\n   *     Signature to be found, can be an array or a comma separated string.\n   * @param {object} options  Controls the signature match as documented\n   * @return {function}\n   *     Returns the function to call for the given signature, or throws an\n   *     error if no match is found.\n   */\n\n\n  function find(fn, signature, options) {\n    return findSignature(fn, signature, options).implementation;\n  }\n  /**\n   * Convert a given value to another data type, specified by type name.\n   *\n   * @param {*} value\n   * @param {string} typeName\n   */\n\n\n  function convert(value, typeName) {\n    // check conversion is needed\n    var type = findType(typeName);\n\n    if (type.test(value)) {\n      return value;\n    }\n\n    var conversions = type.conversionsTo;\n\n    if (conversions.length === 0) {\n      throw new Error('There are no conversions to ' + typeName + ' defined.');\n    }\n\n    for (var i = 0; i < conversions.length; i++) {\n      var fromType = findType(conversions[i].from);\n\n      if (fromType.test(value)) {\n        return conversions[i].convert(value);\n      }\n    }\n\n    throw new Error('Cannot convert ' + value + ' to ' + typeName);\n  }\n  /**\n   * Stringify parameters in a normalized way\n   * @param {Param[]} params\n   * @param {string} [','] separator\n   * @return {string}\n   */\n\n\n  function stringifyParams(params) {\n    var separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ',';\n    return params.map(function (p) {\n      return p.name;\n    }).join(separator);\n  }\n  /**\n   * Parse a parameter, like \"...number | boolean\"\n   * @param {string} param\n   * @return {Param} param\n   */\n\n\n  function parseParam(param) {\n    var restParam = param.indexOf('...') === 0;\n    var types = !restParam ? param : param.length > 3 ? param.slice(3) : 'any';\n    var typeDefs = types.split('|').map(function (s) {\n      return findType(s.trim());\n    });\n    var hasAny = false;\n    var paramName = restParam ? '...' : '';\n    var exactTypes = typeDefs.map(function (type) {\n      hasAny = type.isAny || hasAny;\n      paramName += type.name + '|';\n      return {\n        name: type.name,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: null,\n        conversionIndex: -1\n      };\n    });\n    return {\n      types: exactTypes,\n      name: paramName.slice(0, -1),\n      // remove trailing '|' from above\n      hasAny: hasAny,\n      hasConversion: false,\n      restParam: restParam\n    };\n  }\n  /**\n   * Expands a parsed parameter with the types available from currently\n   * defined conversions.\n   * @param {Param} param\n   * @return {Param} param\n   */\n\n\n  function expandParam(param) {\n    var typeNames = param.types.map(function (t) {\n      return t.name;\n    });\n    var matchingConversions = availableConversions(typeNames);\n    var hasAny = param.hasAny;\n    var newName = param.name;\n    var convertibleTypes = matchingConversions.map(function (conversion) {\n      var type = findType(conversion.from);\n      hasAny = type.isAny || hasAny;\n      newName += '|' + conversion.from;\n      return {\n        name: conversion.from,\n        typeIndex: type.index,\n        test: type.test,\n        isAny: type.isAny,\n        conversion: conversion,\n        conversionIndex: conversion.index\n      };\n    });\n    return {\n      types: param.types.concat(convertibleTypes),\n      name: newName,\n      hasAny: hasAny,\n      hasConversion: convertibleTypes.length > 0,\n      restParam: param.restParam\n    };\n  }\n  /**\n   * Return the set of type names in a parameter.\n   * Caches the result for efficiency\n   *\n   * @param {Param} param\n   * @return {Set<string>} typenames\n   */\n\n\n  function paramTypeSet(param) {\n    if (!param.typeSet) {\n      param.typeSet = new Set();\n      param.types.forEach(function (type) {\n        return param.typeSet.add(type.name);\n      });\n    }\n\n    return param.typeSet;\n  }\n  /**\n   * Parse a signature with comma separated parameters,\n   * like \"number | boolean, ...string\"\n   *\n   * @param {string} signature\n   * @return {Param[]} params\n   */\n\n\n  function parseSignature(rawSignature) {\n    var params = [];\n\n    if (typeof rawSignature !== 'string') {\n      throw new TypeError('Signatures must be strings');\n    }\n\n    var signature = rawSignature.trim();\n\n    if (signature === '') {\n      return params;\n    }\n\n    var rawParams = signature.split(',');\n\n    for (var i = 0; i < rawParams.length; ++i) {\n      var parsedParam = parseParam(rawParams[i].trim());\n\n      if (parsedParam.restParam && i !== rawParams.length - 1) {\n        throw new SyntaxError('Unexpected rest parameter \"' + rawParams[i] + '\": ' + 'only allowed for the last parameter');\n      } // if invalid, short-circuit (all the types may have been filtered)\n\n\n      if (parsedParam.types.length === 0) {\n        return null;\n      }\n\n      params.push(parsedParam);\n    }\n\n    return params;\n  }\n  /**\n   * Test whether a set of params contains a restParam\n   * @param {Param[]} params\n   * @return {boolean} Returns true when the last parameter is a restParam\n   */\n\n\n  function hasRestParam(params) {\n    var param = last(params);\n    return param ? param.restParam : false;\n  }\n  /**\n   * Create a type test for a single parameter, which can have one or multiple\n   * types.\n   * @param {Param} param\n   * @return {function(x: *) : boolean} Returns a test function\n   */\n\n\n  function compileTest(param) {\n    if (!param || param.types.length === 0) {\n      // nothing to do\n      return ok;\n    } else if (param.types.length === 1) {\n      return findType(param.types[0].name).test;\n    } else if (param.types.length === 2) {\n      var test0 = findType(param.types[0].name).test;\n      var test1 = findType(param.types[1].name).test;\n      return function or(x) {\n        return test0(x) || test1(x);\n      };\n    } else {\n      // param.types.length > 2\n      var tests = param.types.map(function (type) {\n        return findType(type.name).test;\n      });\n      return function or(x) {\n        for (var i = 0; i < tests.length; i++) {\n          if (tests[i](x)) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n    }\n  }\n  /**\n   * Create a test for all parameters of a signature\n   * @param {Param[]} params\n   * @return {function(args: Array<*>) : boolean}\n   */\n\n\n  function compileTests(params) {\n    var tests, test0, test1;\n\n    if (hasRestParam(params)) {\n      // variable arguments like '...number'\n      tests = initial(params).map(compileTest);\n      var varIndex = tests.length;\n      var lastTest = compileTest(last(params));\n\n      var testRestParam = function testRestParam(args) {\n        for (var i = varIndex; i < args.length; i++) {\n          if (!lastTest(args[i])) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      return function testArgs(args) {\n        for (var i = 0; i < tests.length; i++) {\n          if (!tests[i](args[i])) {\n            return false;\n          }\n        }\n\n        return testRestParam(args) && args.length >= varIndex + 1;\n      };\n    } else {\n      // no variable arguments\n      if (params.length === 0) {\n        return function testArgs(args) {\n          return args.length === 0;\n        };\n      } else if (params.length === 1) {\n        test0 = compileTest(params[0]);\n        return function testArgs(args) {\n          return test0(args[0]) && args.length === 1;\n        };\n      } else if (params.length === 2) {\n        test0 = compileTest(params[0]);\n        test1 = compileTest(params[1]);\n        return function testArgs(args) {\n          return test0(args[0]) && test1(args[1]) && args.length === 2;\n        };\n      } else {\n        // arguments.length > 2\n        tests = params.map(compileTest);\n        return function testArgs(args) {\n          for (var i = 0; i < tests.length; i++) {\n            if (!tests[i](args[i])) {\n              return false;\n            }\n          }\n\n          return args.length === tests.length;\n        };\n      }\n    }\n  }\n  /**\n   * Find the parameter at a specific index of a Params list.\n   * Handles rest parameters.\n   * @param {Param[]} params\n   * @param {number} index\n   * @return {Param | null} Returns the matching parameter when found,\n   *                        null otherwise.\n   */\n\n\n  function getParamAtIndex(params, index) {\n    return index < params.length ? params[index] : hasRestParam(params) ? last(params) : null;\n  }\n  /**\n   * Get all type names of a parameter\n   * @param {Params[]} params\n   * @param {number} index\n   * @return {string[]} Returns an array with type names\n   */\n\n\n  function getTypeSetAtIndex(params, index) {\n    var param = getParamAtIndex(params, index);\n\n    if (!param) {\n      return new Set();\n    }\n\n    return paramTypeSet(param);\n  }\n  /**\n   * Test whether a type is an exact type or conversion\n   * @param {Type} type\n   * @return {boolean} Returns true when\n   */\n\n\n  function isExactType(type) {\n    return type.conversion === null || type.conversion === undefined;\n  }\n  /**\n   * Helper function for creating error messages: create an array with\n   * all available types on a specific argument index.\n   * @param {Signature[]} signatures\n   * @param {number} index\n   * @return {string[]} Returns an array with available types\n   */\n\n\n  function mergeExpectedParams(signatures, index) {\n    var typeSet = new Set();\n    signatures.forEach(function (signature) {\n      var paramSet = getTypeSetAtIndex(signature.params, index);\n      var name;\n\n      var _iterator5 = _createForOfIteratorHelper(paramSet),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          name = _step5.value;\n          typeSet.add(name);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n    });\n    return typeSet.has('any') ? ['any'] : Array.from(typeSet);\n  }\n  /**\n   * Create\n   * @param {string} name             The name of the function\n   * @param {array.<*>} args          The actual arguments passed to the function\n   * @param {Signature[]} signatures  A list with available signatures\n   * @return {TypeError} Returns a type error with additional data\n   *                     attached to it in the property `data`\n   */\n\n\n  function createError(name, args, signatures) {\n    var err, expected;\n\n    var _name = name || 'unnamed'; // test for wrong type at some index\n\n\n    var matchingSignatures = signatures;\n    var index;\n\n    var _loop = function _loop() {\n      var nextMatchingDefs = [];\n      matchingSignatures.forEach(function (signature) {\n        var param = getParamAtIndex(signature.params, index);\n        var test = compileTest(param);\n\n        if ((index < signature.params.length || hasRestParam(signature.params)) && test(args[index])) {\n          nextMatchingDefs.push(signature);\n        }\n      });\n\n      if (nextMatchingDefs.length === 0) {\n        // no matching signatures anymore, throw error \"wrong type\"\n        expected = mergeExpectedParams(matchingSignatures, index);\n\n        if (expected.length > 0) {\n          var actualTypes = findTypeNames(args[index]);\n          err = new TypeError('Unexpected type of argument in function ' + _name + ' (expected: ' + expected.join(' or ') + ', actual: ' + actualTypes.join(' | ') + ', index: ' + index + ')');\n          err.data = {\n            category: 'wrongType',\n            fn: _name,\n            index: index,\n            actual: actualTypes,\n            expected: expected\n          };\n          return {\n            v: err\n          };\n        }\n      } else {\n        matchingSignatures = nextMatchingDefs;\n      }\n    };\n\n    for (index = 0; index < args.length; index++) {\n      var _ret2 = _loop();\n\n      if (_typeof(_ret2) === \"object\") return _ret2.v;\n    } // test for too few arguments\n\n\n    var lengths = matchingSignatures.map(function (signature) {\n      return hasRestParam(signature.params) ? Infinity : signature.params.length;\n    });\n\n    if (args.length < Math.min.apply(null, lengths)) {\n      expected = mergeExpectedParams(matchingSignatures, index);\n      err = new TypeError('Too few arguments in function ' + _name + ' (expected: ' + expected.join(' or ') + ', index: ' + args.length + ')');\n      err.data = {\n        category: 'tooFewArgs',\n        fn: _name,\n        index: args.length,\n        expected: expected\n      };\n      return err;\n    } // test for too many arguments\n\n\n    var maxLength = Math.max.apply(null, lengths);\n\n    if (args.length > maxLength) {\n      err = new TypeError('Too many arguments in function ' + _name + ' (expected: ' + maxLength + ', actual: ' + args.length + ')');\n      err.data = {\n        category: 'tooManyArgs',\n        fn: _name,\n        index: args.length,\n        expectedLength: maxLength\n      };\n      return err;\n    } // Generic error\n\n\n    var argTypes = [];\n\n    for (var i = 0; i < args.length; ++i) {\n      argTypes.push(findTypeNames(args[i]).join('|'));\n    }\n\n    err = new TypeError('Arguments of type \"' + argTypes.join(', ') + '\" do not match any of the defined signatures of function ' + _name + '.');\n    err.data = {\n      category: 'mismatch',\n      actual: argTypes\n    };\n    return err;\n  }\n  /**\n   * Find the lowest index of all exact types of a parameter (no conversions)\n   * @param {Param} param\n   * @return {number} Returns the index of the lowest type in typed.types\n   */\n\n\n  function getLowestTypeIndex(param) {\n    var min = typeList.length + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].typeIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Find the lowest index of the conversion of all types of the parameter\n   * having a conversion\n   * @param {Param} param\n   * @return {number} Returns the lowest index of the conversions of this type\n   */\n\n\n  function getLowestConversionIndex(param) {\n    var min = nConversions + 1;\n\n    for (var i = 0; i < param.types.length; i++) {\n      if (!isExactType(param.types[i])) {\n        min = Math.min(min, param.types[i].conversionIndex);\n      }\n    }\n\n    return min;\n  }\n  /**\n   * Compare two params\n   * @param {Param} param1\n   * @param {Param} param2\n   * @return {number} returns -1 when param1 must get a lower\n   *                  index than param2, 1 when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareParams(param1, param2) {\n    // We compare a number of metrics on a param in turn:\n    // 1) 'any' parameters are the least preferred\n    if (param1.hasAny) {\n      if (!param2.hasAny) {\n        return 1;\n      }\n    } else if (param2.hasAny) {\n      return -1;\n    } // 2) Prefer non-rest to rest parameters\n\n\n    if (param1.restParam) {\n      if (!param2.restParam) {\n        return 1;\n      }\n    } else if (param2.restParam) {\n      return -1;\n    } // 3) Prefer exact type match to conversions\n\n\n    if (param1.hasConversion) {\n      if (!param2.hasConversion) {\n        return 1;\n      }\n    } else if (param2.hasConversion) {\n      return -1;\n    } // 4) Prefer lower type index:\n\n\n    var typeDiff = getLowestTypeIndex(param1) - getLowestTypeIndex(param2);\n\n    if (typeDiff < 0) {\n      return -1;\n    }\n\n    if (typeDiff > 0) {\n      return 1;\n    } // 5) Prefer lower conversion index\n\n\n    var convDiff = getLowestConversionIndex(param1) - getLowestConversionIndex(param2);\n\n    if (convDiff < 0) {\n      return -1;\n    }\n\n    if (convDiff > 0) {\n      return 1;\n    } // Don't have a basis for preference\n\n\n    return 0;\n  }\n  /**\n   * Compare two signatures\n   * @param {Signature} signature1\n   * @param {Signature} signature2\n   * @return {number} returns a negative number when param1 must get a lower\n   *                  index than param2, a positive number when the opposite,\n   *                  or zero when both are equal\n   */\n\n\n  function compareSignatures(signature1, signature2) {\n    var pars1 = signature1.params;\n    var pars2 = signature2.params;\n    var last1 = last(pars1);\n    var last2 = last(pars2);\n    var hasRest1 = hasRestParam(pars1);\n    var hasRest2 = hasRestParam(pars2); // We compare a number of metrics on signatures in turn:\n    // 1) An \"any rest param\" is least preferred\n\n    if (hasRest1 && last1.hasAny) {\n      if (!hasRest2 || !last2.hasAny) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasAny) {\n      return -1;\n    } // 2) Minimize the number of 'any' parameters\n\n\n    var any1 = 0;\n    var conv1 = 0;\n    var par;\n\n    var _iterator6 = _createForOfIteratorHelper(pars1),\n        _step6;\n\n    try {\n      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n        par = _step6.value;\n        if (par.hasAny) ++any1;\n        if (par.hasConversion) ++conv1;\n      }\n    } catch (err) {\n      _iterator6.e(err);\n    } finally {\n      _iterator6.f();\n    }\n\n    var any2 = 0;\n    var conv2 = 0;\n\n    var _iterator7 = _createForOfIteratorHelper(pars2),\n        _step7;\n\n    try {\n      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n        par = _step7.value;\n        if (par.hasAny) ++any2;\n        if (par.hasConversion) ++conv2;\n      }\n    } catch (err) {\n      _iterator7.e(err);\n    } finally {\n      _iterator7.f();\n    }\n\n    if (any1 !== any2) {\n      return any1 - any2;\n    } // 3) A conversion rest param is less preferred\n\n\n    if (hasRest1 && last1.hasConversion) {\n      if (!hasRest2 || !last2.hasConversion) {\n        return 1;\n      }\n    } else if (hasRest2 && last2.hasConversion) {\n      return -1;\n    } // 4) Minimize the number of conversions\n\n\n    if (conv1 !== conv2) {\n      return conv1 - conv2;\n    } // 5) Prefer no rest param\n\n\n    if (hasRest1) {\n      if (!hasRest2) {\n        return 1;\n      }\n    } else if (hasRest2) {\n      return -1;\n    } // 6) Prefer shorter with rest param, longer without\n\n\n    var lengthCriterion = (pars1.length - pars2.length) * (hasRest1 ? -1 : 1);\n\n    if (lengthCriterion !== 0) {\n      return lengthCriterion;\n    } // Signatures are identical in each of the above metrics.\n    // In particular, they are the same length.\n    // We can therefore compare the parameters one by one.\n    // First we count which signature has more preferred parameters.\n\n\n    var comparisons = [];\n    var tc = 0;\n\n    for (var i = 0; i < pars1.length; ++i) {\n      var thisComparison = compareParams(pars1[i], pars2[i]);\n      comparisons.push(thisComparison);\n      tc += thisComparison;\n    }\n\n    if (tc !== 0) {\n      return tc;\n    } // They have the same number of preferred parameters, so go by the\n    // earliest parameter in which we have a preference.\n    // In other words, dispatch is driven somewhat more by earlier\n    // parameters than later ones.\n\n\n    var c;\n\n    for (var _i2 = 0, _comparisons = comparisons; _i2 < _comparisons.length; _i2++) {\n      c = _comparisons[_i2];\n\n      if (c !== 0) {\n        return c;\n      }\n    } // It's a tossup:\n\n\n    return 0;\n  }\n  /**\n   * Produce a list of all conversions from distinct types to one of\n   * the given types.\n   *\n   * @param {string[]} typeNames\n   * @return {ConversionDef[]} Returns the conversions that are available\n   *                        resulting in any given type (if any)\n   */\n\n\n  function availableConversions(typeNames) {\n    if (typeNames.length === 0) {\n      return [];\n    }\n\n    var types = typeNames.map(findType);\n\n    if (typeNames.length > 1) {\n      types.sort(function (t1, t2) {\n        return t1.index - t2.index;\n      });\n    }\n\n    var matches = types[0].conversionsTo;\n\n    if (typeNames.length === 1) {\n      return matches;\n    }\n\n    matches = matches.concat([]); // shallow copy the matches\n    // Since the types are now in index order, we just want the first\n    // occurrence of any from type:\n\n    var knownTypes = new Set(typeNames);\n\n    for (var i = 1; i < types.length; ++i) {\n      var newMatch = void 0;\n\n      var _iterator8 = _createForOfIteratorHelper(types[i].conversionsTo),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          newMatch = _step8.value;\n\n          if (!knownTypes.has(newMatch.from)) {\n            matches.push(newMatch);\n            knownTypes.add(newMatch.from);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n    }\n\n    return matches;\n  }\n  /**\n   * Preprocess arguments before calling the original function:\n   * - if needed convert the parameters\n   * - in case of rest parameters, move the rest parameters into an Array\n   * @param {Param[]} params\n   * @param {function} fn\n   * @return {function} Returns a wrapped function\n   */\n\n\n  function compileArgsPreprocessing(params, fn) {\n    var fnConvert = fn; // TODO: can we make this wrapper function smarter/simpler?\n\n    if (params.some(function (p) {\n      return p.hasConversion;\n    })) {\n      var restParam = hasRestParam(params);\n      var compiledConversions = params.map(compileArgConversion);\n\n      fnConvert = function convertArgs() {\n        var args = [];\n        var last = restParam ? arguments.length - 1 : arguments.length;\n\n        for (var i = 0; i < last; i++) {\n          args[i] = compiledConversions[i](arguments[i]);\n        }\n\n        if (restParam) {\n          args[last] = arguments[last].map(compiledConversions[last]);\n        }\n\n        return fn.apply(this, args);\n      };\n    }\n\n    var fnPreprocess = fnConvert;\n\n    if (hasRestParam(params)) {\n      var offset = params.length - 1;\n\n      fnPreprocess = function preprocessRestParams() {\n        return fnConvert.apply(this, slice(arguments, 0, offset).concat([slice(arguments, offset)]));\n      };\n    }\n\n    return fnPreprocess;\n  }\n  /**\n   * Compile conversion for a parameter to the right type\n   * @param {Param} param\n   * @return {function} Returns the wrapped function that will convert arguments\n   *\n   */\n\n\n  function compileArgConversion(param) {\n    var test0, test1, conversion0, conversion1;\n    var tests = [];\n    var conversions = [];\n    param.types.forEach(function (type) {\n      if (type.conversion) {\n        tests.push(findType(type.conversion.from).test);\n        conversions.push(type.conversion.convert);\n      }\n    }); // create optimized conversion functions depending on the number of conversions\n\n    switch (conversions.length) {\n      case 0:\n        return function convertArg(arg) {\n          return arg;\n        };\n\n      case 1:\n        test0 = tests[0];\n        conversion0 = conversions[0];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          return arg;\n        };\n\n      case 2:\n        test0 = tests[0];\n        test1 = tests[1];\n        conversion0 = conversions[0];\n        conversion1 = conversions[1];\n        return function convertArg(arg) {\n          if (test0(arg)) {\n            return conversion0(arg);\n          }\n\n          if (test1(arg)) {\n            return conversion1(arg);\n          }\n\n          return arg;\n        };\n\n      default:\n        return function convertArg(arg) {\n          for (var i = 0; i < conversions.length; i++) {\n            if (tests[i](arg)) {\n              return conversions[i](arg);\n            }\n          }\n\n          return arg;\n        };\n    }\n  }\n  /**\n   * Split params with union types in to separate params.\n   *\n   * For example:\n   *\n   *     splitParams([['Array', 'Object'], ['string', 'RegExp'])\n   *     // returns:\n   *     // [\n   *     //   ['Array', 'string'],\n   *     //   ['Array', 'RegExp'],\n   *     //   ['Object', 'string'],\n   *     //   ['Object', 'RegExp']\n   *     // ]\n   *\n   * @param {Param[]} params\n   * @return {Param[]}\n   */\n\n\n  function splitParams(params) {\n    function _splitParams(params, index, paramsSoFar) {\n      if (index < params.length) {\n        var param = params[index];\n        var resultingParams = [];\n\n        if (param.restParam) {\n          // split the types of a rest parameter in two:\n          // one with only exact types, and one with exact types and conversions\n          var exactTypes = param.types.filter(isExactType);\n\n          if (exactTypes.length < param.types.length) {\n            resultingParams.push({\n              types: exactTypes,\n              name: '...' + exactTypes.map(function (t) {\n                return t.name;\n              }).join('|'),\n              hasAny: exactTypes.some(function (t) {\n                return t.isAny;\n              }),\n              hasConversion: false,\n              restParam: true\n            });\n          }\n\n          resultingParams.push(param);\n        } else {\n          // split all the types of a regular parameter into one type per param\n          resultingParams = param.types.map(function (type) {\n            return {\n              types: [type],\n              name: type.name,\n              hasAny: type.isAny,\n              hasConversion: type.conversion,\n              restParam: false\n            };\n          });\n        } // recurse over the groups with types\n\n\n        return flatMap(resultingParams, function (nextParam) {\n          return _splitParams(params, index + 1, paramsSoFar.concat([nextParam]));\n        });\n      } else {\n        // we've reached the end of the parameters.\n        return [paramsSoFar];\n      }\n    }\n\n    return _splitParams(params, 0, []);\n  }\n  /**\n   * Test whether two param lists represent conflicting signatures\n   * @param {Param[]} params1\n   * @param {Param[]} params2\n   * @return {boolean} Returns true when the signatures conflict, false otherwise.\n   */\n\n\n  function conflicting(params1, params2) {\n    var ii = Math.max(params1.length, params2.length);\n\n    for (var i = 0; i < ii; i++) {\n      var typeSet1 = getTypeSetAtIndex(params1, i);\n      var typeSet2 = getTypeSetAtIndex(params2, i);\n      var overlap = false;\n      var name = void 0;\n\n      var _iterator9 = _createForOfIteratorHelper(typeSet2),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          name = _step9.value;\n\n          if (typeSet1.has(name)) {\n            overlap = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      if (!overlap) {\n        return false;\n      }\n    }\n\n    var len1 = params1.length;\n    var len2 = params2.length;\n    var restParam1 = hasRestParam(params1);\n    var restParam2 = hasRestParam(params2);\n    return restParam1 ? restParam2 ? len1 === len2 : len2 >= len1 : restParam2 ? len1 >= len2 : len1 === len2;\n  }\n  /**\n   * Helper function for `resolveReferences` that returns a copy of\n   * functionList wihe any prior resolutions cleared out, in case we are\n   * recycling signatures from a prior typed function construction.\n   *\n   * @param {Array.<function|typed-reference>} functionList\n   * @return {Array.<function|typed-reference>}\n   */\n\n\n  function clearResolutions(functionList) {\n    return functionList.map(function (fn) {\n      if (isReferToSelf(fn)) {\n        return referToSelf(fn.referToSelf.callback);\n      }\n\n      if (isReferTo(fn)) {\n        return makeReferTo(fn.referTo.references, fn.referTo.callback);\n      }\n\n      return fn;\n    });\n  }\n  /**\n   * Take a list of references, a list of functions functionList, and a\n   * signatureMap indexing signatures into functionList, and return\n   * the list of resolutions, or a false-y value if they don't all\n   * resolve in a valid way (yet).\n   *\n   * @param {string[]} references\n   * @param {Array<function|typed-reference} functionList\n   * @param {Object.<string, integer>} signatureMap\n   * @return {function[] | false} resolutions\n   */\n\n\n  function collectResolutions(references, functionList, signatureMap) {\n    var resolvedReferences = [];\n    var reference;\n\n    var _iterator10 = _createForOfIteratorHelper(references),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        reference = _step10.value;\n        var resolution = signatureMap[reference];\n\n        if (typeof resolution !== 'number') {\n          throw new TypeError('No definition for referenced signature \"' + reference + '\"');\n        }\n\n        resolution = functionList[resolution];\n\n        if (typeof resolution !== 'function') {\n          return false;\n        }\n\n        resolvedReferences.push(resolution);\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n\n    return resolvedReferences;\n  }\n  /**\n   * Resolve any references in the functionList for the typed function\n   * itself. The signatureMap tells which index in the functionList a\n   * given signature should be mapped to (for use in resolving typed.referTo)\n   * and self provides the destions of a typed.referToSelf.\n   *\n   * @param {Array<function | typed-reference-object>} functionList\n   * @param {Object.<string, function>} signatureMap\n   * @param {function} self  The typed-function itself\n   * @return {Array<function>} The list of resolved functions\n   */\n\n\n  function resolveReferences(functionList, signatureMap, self) {\n    var resolvedFunctions = clearResolutions(functionList);\n    var isResolved = new Array(resolvedFunctions.length).fill(false);\n    var leftUnresolved = true;\n\n    while (leftUnresolved) {\n      leftUnresolved = false;\n      var nothingResolved = true;\n\n      for (var i = 0; i < resolvedFunctions.length; ++i) {\n        if (isResolved[i]) continue;\n        var fn = resolvedFunctions[i];\n\n        if (isReferToSelf(fn)) {\n          resolvedFunctions[i] = fn.referToSelf.callback(self); // Preserve reference in case signature is reused someday:\n\n          resolvedFunctions[i].referToSelf = fn.referToSelf;\n          isResolved[i] = true;\n          nothingResolved = false;\n        } else if (isReferTo(fn)) {\n          var resolvedReferences = collectResolutions(fn.referTo.references, resolvedFunctions, signatureMap);\n\n          if (resolvedReferences) {\n            resolvedFunctions[i] = fn.referTo.callback.apply(this, resolvedReferences); // Preserve reference in case signature is reused someday:\n\n            resolvedFunctions[i].referTo = fn.referTo;\n            isResolved[i] = true;\n            nothingResolved = false;\n          } else {\n            leftUnresolved = true;\n          }\n        }\n      }\n\n      if (nothingResolved && leftUnresolved) {\n        throw new SyntaxError('Circular reference detected in resolving typed.referTo');\n      }\n    }\n\n    return resolvedFunctions;\n  }\n  /**\n   * Validate whether any of the function bodies contains a self-reference\n   * usage like `this(...)` or `this.signatures`. This self-referencing is\n   * deprecated since typed-function v3. It has been replaced with\n   * the functions typed.referTo and typed.referToSelf.\n   * @param {Object.<string, function>} signaturesMap\n   */\n\n\n  function validateDeprecatedThis(signaturesMap) {\n    // TODO: remove this deprecation warning logic some day (it's introduced in v3)\n    // match occurrences like 'this(' and 'this.signatures'\n    var deprecatedThisRegex = /\\bthis(\\(|\\.signatures\\b)/;\n    Object.keys(signaturesMap).forEach(function (signature) {\n      var fn = signaturesMap[signature];\n\n      if (deprecatedThisRegex.test(fn.toString())) {\n        throw new SyntaxError('Using `this` to self-reference a function ' + 'is deprecated since typed-function@3. ' + 'Use typed.referTo and typed.referToSelf instead.');\n      }\n    });\n  }\n  /**\n   * Create a typed function\n   * @param {String} name               The name for the typed function\n   * @param {Object.<string, function>} rawSignaturesMap\n   *                                    An object with one or\n   *                                    multiple signatures as key, and the\n   *                                    function corresponding to the\n   *                                    signature as value.\n   * @return {function}  Returns the created typed function.\n   */\n\n\n  function createTypedFunction(name, rawSignaturesMap) {\n    typed.createCount++;\n\n    if (Object.keys(rawSignaturesMap).length === 0) {\n      throw new SyntaxError('No signatures provided');\n    }\n\n    if (typed.warnAgainstDeprecatedThis) {\n      validateDeprecatedThis(rawSignaturesMap);\n    } // Main processing loop for signatures\n\n\n    var parsedParams = [];\n    var originalFunctions = [];\n    var signaturesMap = {};\n    var preliminarySignatures = []; // may have duplicates from conversions\n\n    var signature;\n\n    var _loop2 = function _loop2() {\n      // A) Protect against polluted Object prototype:\n      if (!Object.prototype.hasOwnProperty.call(rawSignaturesMap, signature)) {\n        return \"continue\";\n      } // B) Parse the signature\n\n\n      var params = parseSignature(signature);\n      if (!params) return \"continue\"; // C) Check for conflicts\n\n      parsedParams.forEach(function (pp) {\n        if (conflicting(pp, params)) {\n          throw new TypeError('Conflicting signatures \"' + stringifyParams(pp) + '\" and \"' + stringifyParams(params) + '\".');\n        }\n      });\n      parsedParams.push(params); // D) Store the provided function and add conversions\n\n      var functionIndex = originalFunctions.length;\n      originalFunctions.push(rawSignaturesMap[signature]);\n      var conversionParams = params.map(expandParam); // E) Split the signatures and collect them up\n\n      var sp = void 0;\n\n      var _iterator11 = _createForOfIteratorHelper(splitParams(conversionParams)),\n          _step11;\n\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          sp = _step11.value;\n          var spName = stringifyParams(sp);\n          preliminarySignatures.push({\n            params: sp,\n            name: spName,\n            fn: functionIndex\n          });\n\n          if (sp.every(function (p) {\n            return !p.hasConversion;\n          })) {\n            signaturesMap[spName] = functionIndex;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n    };\n\n    for (signature in rawSignaturesMap) {\n      var _ret3 = _loop2();\n\n      if (_ret3 === \"continue\") continue;\n    }\n\n    preliminarySignatures.sort(compareSignatures); // Note the forward reference to theTypedFn\n\n    var resolvedFunctions = resolveReferences(originalFunctions, signaturesMap, theTypedFn); // Fill in the proper function for each signature\n\n    var s;\n\n    for (s in signaturesMap) {\n      if (Object.prototype.hasOwnProperty.call(signaturesMap, s)) {\n        signaturesMap[s] = resolvedFunctions[signaturesMap[s]];\n      }\n    }\n\n    var signatures = [];\n    var internalSignatureMap = new Map(); // benchmarks faster than object\n\n    for (var _i3 = 0, _preliminarySignature = preliminarySignatures; _i3 < _preliminarySignature.length; _i3++) {\n      s = _preliminarySignature[_i3];\n\n      // Note it's only safe to eliminate duplicates like this\n      // _after_ the signature sorting step above; otherwise we might\n      // remove the wrong one.\n      if (!internalSignatureMap.has(s.name)) {\n        s.fn = resolvedFunctions[s.fn];\n        signatures.push(s);\n        internalSignatureMap.set(s.name, s);\n      }\n    } // we create a highly optimized checks for the first couple of signatures with max 2 arguments\n\n\n    var ok0 = signatures[0] && signatures[0].params.length <= 2 && !hasRestParam(signatures[0].params);\n    var ok1 = signatures[1] && signatures[1].params.length <= 2 && !hasRestParam(signatures[1].params);\n    var ok2 = signatures[2] && signatures[2].params.length <= 2 && !hasRestParam(signatures[2].params);\n    var ok3 = signatures[3] && signatures[3].params.length <= 2 && !hasRestParam(signatures[3].params);\n    var ok4 = signatures[4] && signatures[4].params.length <= 2 && !hasRestParam(signatures[4].params);\n    var ok5 = signatures[5] && signatures[5].params.length <= 2 && !hasRestParam(signatures[5].params);\n    var allOk = ok0 && ok1 && ok2 && ok3 && ok4 && ok5; // compile the tests\n\n    for (var i = 0; i < signatures.length; ++i) {\n      signatures[i].test = compileTests(signatures[i].params);\n    }\n\n    var test00 = ok0 ? compileTest(signatures[0].params[0]) : notOk;\n    var test10 = ok1 ? compileTest(signatures[1].params[0]) : notOk;\n    var test20 = ok2 ? compileTest(signatures[2].params[0]) : notOk;\n    var test30 = ok3 ? compileTest(signatures[3].params[0]) : notOk;\n    var test40 = ok4 ? compileTest(signatures[4].params[0]) : notOk;\n    var test50 = ok5 ? compileTest(signatures[5].params[0]) : notOk;\n    var test01 = ok0 ? compileTest(signatures[0].params[1]) : notOk;\n    var test11 = ok1 ? compileTest(signatures[1].params[1]) : notOk;\n    var test21 = ok2 ? compileTest(signatures[2].params[1]) : notOk;\n    var test31 = ok3 ? compileTest(signatures[3].params[1]) : notOk;\n    var test41 = ok4 ? compileTest(signatures[4].params[1]) : notOk;\n    var test51 = ok5 ? compileTest(signatures[5].params[1]) : notOk; // compile the functions\n\n    for (var _i4 = 0; _i4 < signatures.length; ++_i4) {\n      signatures[_i4].implementation = compileArgsPreprocessing(signatures[_i4].params, signatures[_i4].fn);\n    }\n\n    var fn0 = ok0 ? signatures[0].implementation : undef;\n    var fn1 = ok1 ? signatures[1].implementation : undef;\n    var fn2 = ok2 ? signatures[2].implementation : undef;\n    var fn3 = ok3 ? signatures[3].implementation : undef;\n    var fn4 = ok4 ? signatures[4].implementation : undef;\n    var fn5 = ok5 ? signatures[5].implementation : undef;\n    var len0 = ok0 ? signatures[0].params.length : -1;\n    var len1 = ok1 ? signatures[1].params.length : -1;\n    var len2 = ok2 ? signatures[2].params.length : -1;\n    var len3 = ok3 ? signatures[3].params.length : -1;\n    var len4 = ok4 ? signatures[4].params.length : -1;\n    var len5 = ok5 ? signatures[5].params.length : -1; // simple and generic, but also slow\n\n    var iStart = allOk ? 6 : 0;\n    var iEnd = signatures.length; // de-reference ahead for execution speed:\n\n    var tests = signatures.map(function (s) {\n      return s.test;\n    });\n    var fns = signatures.map(function (s) {\n      return s.implementation;\n    });\n\n    var generic = function generic() {\n      'use strict';\n\n      for (var _i5 = iStart; _i5 < iEnd; _i5++) {\n        if (tests[_i5](arguments)) {\n          return fns[_i5].apply(this, arguments);\n        }\n      }\n\n      return typed.onMismatch(name, arguments, signatures);\n    }; // create the typed function\n    // fast, specialized version. Falls back to the slower, generic one if needed\n\n\n    function theTypedFn(arg0, arg1) {\n      'use strict';\n\n      if (arguments.length === len0 && test00(arg0) && test01(arg1)) {\n        return fn0.apply(this, arguments);\n      }\n\n      if (arguments.length === len1 && test10(arg0) && test11(arg1)) {\n        return fn1.apply(this, arguments);\n      }\n\n      if (arguments.length === len2 && test20(arg0) && test21(arg1)) {\n        return fn2.apply(this, arguments);\n      }\n\n      if (arguments.length === len3 && test30(arg0) && test31(arg1)) {\n        return fn3.apply(this, arguments);\n      }\n\n      if (arguments.length === len4 && test40(arg0) && test41(arg1)) {\n        return fn4.apply(this, arguments);\n      }\n\n      if (arguments.length === len5 && test50(arg0) && test51(arg1)) {\n        return fn5.apply(this, arguments);\n      }\n\n      return generic.apply(this, arguments);\n    } // attach name the typed function\n\n\n    try {\n      Object.defineProperty(theTypedFn, 'name', {\n        value: name\n      });\n    } catch (err) {// old browsers do not support Object.defineProperty and some don't support setting the name property\n      // the function name is not essential for the functioning, it's mostly useful for debugging,\n      // so it's fine to have unnamed functions.\n    } // attach signatures to the function.\n    // This property is close to the original collection of signatures\n    // used to create the typed-function, just with unions split:\n\n\n    theTypedFn.signatures = signaturesMap; // Store internal data for functions like resolve, find, etc.\n    // Also serves as the flag that this is a typed-function\n\n    theTypedFn._typedFunctionData = {\n      signatures: signatures,\n      signatureMap: internalSignatureMap\n    };\n    return theTypedFn;\n  }\n  /**\n   * Action to take on mismatch\n   * @param {string} name      Name of function that was attempted to be called\n   * @param {Array} args       Actual arguments to the call\n   * @param {Array} signatures Known signatures of the named typed-function\n   */\n\n\n  function _onMismatch(name, args, signatures) {\n    throw createError(name, args, signatures);\n  }\n  /**\n   * Return all but the last items of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {Array}\n   */\n\n\n  function initial(arr) {\n    return slice(arr, 0, arr.length - 1);\n  }\n  /**\n   * return the last item of an array or function Arguments\n   * @param {Array | Arguments} arr\n   * @return {*}\n   */\n\n\n  function last(arr) {\n    return arr[arr.length - 1];\n  }\n  /**\n   * Slice an array or function Arguments\n   * @param {Array | Arguments | IArguments} arr\n   * @param {number} start\n   * @param {number} [end]\n   * @return {Array}\n   */\n\n\n  function slice(arr, start, end) {\n    return Array.prototype.slice.call(arr, start, end);\n  }\n  /**\n   * Return the first item from an array for which test(arr[i]) returns true\n   * @param {Array} arr\n   * @param {function} test\n   * @return {* | undefined} Returns the first matching item\n   *                         or undefined when there is no match\n   */\n\n\n  function findInArray(arr, test) {\n    for (var i = 0; i < arr.length; i++) {\n      if (test(arr[i])) {\n        return arr[i];\n      }\n    }\n\n    return undefined;\n  }\n  /**\n   * Flat map the result invoking a callback for every item in an array.\n   * https://gist.github.com/samgiles/762ee337dff48623e729\n   * @param {Array} arr\n   * @param {function} callback\n   * @return {Array}\n   */\n\n\n  function flatMap(arr, callback) {\n    return Array.prototype.concat.apply([], arr.map(callback));\n  }\n  /**\n   * Create a reference callback to one or multiple signatures\n   *\n   * Syntax:\n   *\n   *     typed.referTo(signature1, signature2, ..., function callback(fn1, fn2, ...) {\n   *       // ...\n   *     })\n   *\n   * @returns {{referTo: {references: string[], callback}}}\n   */\n\n\n  function referTo() {\n    var references = initial(arguments).map(function (s) {\n      return stringifyParams(parseSignature(s));\n    });\n    var callback = last(arguments);\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as last argument');\n    }\n\n    return makeReferTo(references, callback);\n  }\n\n  function makeReferTo(references, callback) {\n    return {\n      referTo: {\n        references: references,\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Create a reference callback to the typed-function itself\n   *\n   * @param {(self: function) => function} callback\n   * @returns {{referToSelf: { callback: function }}}\n   */\n\n\n  function referToSelf(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('Callback function expected as first argument');\n    }\n\n    return {\n      referToSelf: {\n        callback: callback\n      }\n    };\n  }\n  /**\n   * Test whether something is a referTo object, holding a list with reference\n   * signatures and a callback.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferTo(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referTo) === 'object' && Array.isArray(objectOrFn.referTo.references) && typeof objectOrFn.referTo.callback === 'function';\n  }\n  /**\n   * Test whether something is a referToSelf object, holding a callback where\n   * to pass `self`.\n   *\n   * @param {Object | function} objectOrFn\n   * @returns {boolean}\n   */\n\n\n  function isReferToSelf(objectOrFn) {\n    return objectOrFn && _typeof(objectOrFn.referToSelf) === 'object' && typeof objectOrFn.referToSelf.callback === 'function';\n  }\n  /**\n   * Check if name is (A) new, (B) a match, or (C) a mismatch; and throw\n   * an error in case (C).\n   *\n   * @param { string | undefined } nameSoFar\n   * @param { string | undefined } newName\n   * @returns { string } updated name\n   */\n\n\n  function checkName(nameSoFar, newName) {\n    if (!nameSoFar) {\n      return newName;\n    }\n\n    if (newName && newName !== nameSoFar) {\n      var err = new Error('Function names do not match (expected: ' + nameSoFar + ', actual: ' + newName + ')');\n      err.data = {\n        actual: newName,\n        expected: nameSoFar\n      };\n      throw err;\n    }\n\n    return nameSoFar;\n  }\n  /**\n   * Retrieve the implied name from an object with signature keys\n   * and function values, checking whether all value names match\n   *\n   * @param { {string: function} } obj\n   */\n\n\n  function getObjectName(obj) {\n    var name;\n\n    for (var key in obj) {\n      // Only pay attention to own properties, and only if their values\n      // are typed functions or functions with a signature property\n      if (Object.prototype.hasOwnProperty.call(obj, key) && (isTypedFunction(obj[key]) || typeof obj[key].signature === 'string')) {\n        name = checkName(name, obj[key].name);\n      }\n    }\n\n    return name;\n  }\n  /**\n   * Copy all of the signatures from the second argument into the first,\n   * which is modified by side effect, checking for conflicts\n   *\n   * @param {Object.<string, function|typed-reference>} dest\n   * @param {Object.<string, function|typed-reference>} source\n   */\n\n\n  function mergeSignatures(dest, source) {\n    var key;\n\n    for (key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        if (key in dest) {\n          if (source[key] !== dest[key]) {\n            var err = new Error('Signature \"' + key + '\" is defined twice');\n            err.data = {\n              signature: key,\n              sourceFunction: source[key],\n              destFunction: dest[key]\n            };\n            throw err;\n          } // else: both signatures point to the same function, that's fine\n\n        }\n\n        dest[key] = source[key];\n      }\n    }\n  }\n\n  var saveTyped = typed;\n  /**\n   * Originally the main function was a typed function itself, but then\n   * it might not be able to generate error messages if the client\n   * replaced the type system with different names.\n   *\n   * Main entry: typed([name], functions/objects with signatures...)\n   *\n   * Assembles and returns a new typed-function from the given items\n   * that provide signatures and implementations, each of which may be\n   * * a plain object mapping (string) signatures to implementing functions,\n   * * a previously constructed typed function, or\n   * * any other single function with a string-valued property `signature`.\n    * The name of the resulting typed-function will be given by the\n   * string-valued name argument if present, or if not, by the name\n   * of any of the arguments that have one, as long as any that do are\n   * consistent with each other. If no name is specified, the name will be\n   * an empty string.\n   *\n   * @param {string} maybeName [optional]\n   * @param {(function|object)[]} signature providers\n   * @returns {typed-function}\n   */\n\n  typed = function typed(maybeName) {\n    var named = typeof maybeName === 'string';\n    var start = named ? 1 : 0;\n    var name = named ? maybeName : '';\n    var allSignatures = {};\n\n    for (var i = start; i < arguments.length; ++i) {\n      var item = arguments[i];\n      var theseSignatures = {};\n      var thisName = void 0;\n\n      if (typeof item === 'function') {\n        thisName = item.name;\n\n        if (typeof item.signature === 'string') {\n          // Case 1: Ordinary function with a string 'signature' property\n          theseSignatures[item.signature] = item;\n        } else if (isTypedFunction(item)) {\n          // Case 2: Existing typed function\n          theseSignatures = item.signatures;\n        }\n      } else if (isPlainObject(item)) {\n        // Case 3: Plain object, assume keys = signatures, values = functions\n        theseSignatures = item;\n\n        if (!named) {\n          thisName = getObjectName(item);\n        }\n      }\n\n      if (Object.keys(theseSignatures).length === 0) {\n        var err = new TypeError('Argument to \\'typed\\' at index ' + i + ' is not a (typed) function, ' + 'nor an object with signatures as keys and functions as values.');\n        err.data = {\n          index: i,\n          argument: item\n        };\n        throw err;\n      }\n\n      if (!named) {\n        name = checkName(name, thisName);\n      }\n\n      mergeSignatures(allSignatures, theseSignatures);\n    }\n\n    return createTypedFunction(name || '', allSignatures);\n  };\n\n  typed.create = create;\n  typed.createCount = saveTyped.createCount;\n  typed.onMismatch = _onMismatch;\n  typed.throwMismatchError = _onMismatch;\n  typed.createError = createError;\n  typed.clear = clear;\n  typed.clearConversions = clearConversions;\n  typed.addTypes = addTypes;\n  typed._findType = findType; // For unit testing only\n\n  typed.referTo = referTo;\n  typed.referToSelf = referToSelf;\n  typed.convert = convert;\n  typed.findSignature = findSignature;\n  typed.find = find;\n  typed.isTypedFunction = isTypedFunction;\n  typed.warnAgainstDeprecatedThis = true;\n  /**\n   * add a type (convenience wrapper for typed.addTypes)\n   * @param {{name: string, test: function}} type\n   * @param {boolean} [beforeObjectTest=true]\n   *                          If true, the new test will be inserted before\n   *                          the test with name 'Object' (if any), since\n   *                          tests for Object match Array and classes too.\n   */\n\n  typed.addType = function (type, beforeObjectTest) {\n    var before = 'any';\n\n    if (beforeObjectTest !== false && typeMap.has('Object')) {\n      before = 'Object';\n    }\n\n    typed.addTypes([type], before);\n  };\n  /**\n   * Verify that the ConversionDef conversion has a valid format.\n   *\n   * @param {conversionDef} conversion\n   * @return {void}\n   * @throws {TypeError|SyntaxError}\n   */\n\n\n  function _validateConversion(conversion) {\n    if (!conversion || typeof conversion.from !== 'string' || typeof conversion.to !== 'string' || typeof conversion.convert !== 'function') {\n      throw new TypeError('Object with properties {from: string, to: string, convert: function} expected');\n    }\n\n    if (conversion.to === conversion.from) {\n      throw new SyntaxError('Illegal to define conversion from \"' + conversion.from + '\" to itself.');\n    }\n  }\n  /**\n   * Add a conversion\n   *\n   * @param {ConversionDef} conversion\n   * @returns {void}\n   * @throws {TypeError}\n   */\n\n\n  typed.addConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n\n    if (to.conversionsTo.every(function (other) {\n      return other.from !== conversion.from;\n    })) {\n      to.conversionsTo.push({\n        from: conversion.from,\n        convert: conversion.convert,\n        index: nConversions++\n      });\n    } else {\n      throw new Error('There is already a conversion from \"' + conversion.from + '\" to \"' + to.name + '\"');\n    }\n  };\n  /**\n   * Convenience wrapper to call addConversion on each conversion in a list.\n   *\n   @param {ConversionDef[]} conversions\n   @returns {void}\n   @throws {TypeError}\n   */\n\n\n  typed.addConversions = function (conversions) {\n    conversions.forEach(typed.addConversion);\n  };\n  /**\n   * Remove the specified conversion. The format is the same as for\n   * addConversion, and the convert function must match or an error\n   * is thrown.\n   *\n   * @param {{from: string, to: string, convert: function}} conversion\n   * @returns {void}\n   * @throws {TypeError|SyntaxError|Error}\n   */\n\n\n  typed.removeConversion = function (conversion) {\n    _validateConversion(conversion);\n\n    var to = findType(conversion.to);\n    var existingConversion = findInArray(to.conversionsTo, function (c) {\n      return c.from === conversion.from;\n    });\n\n    if (!existingConversion) {\n      throw new Error('Attempt to remove nonexistent conversion from ' + conversion.from + ' to ' + conversion.to);\n    }\n\n    if (existingConversion.convert !== conversion.convert) {\n      throw new Error('Conversion to remove does not match existing conversion');\n    }\n\n    var index = to.conversionsTo.indexOf(existingConversion);\n    to.conversionsTo.splice(index, 1);\n  };\n  /**\n   * Produce the specific signature that a typed function\n   * will execute on the given arguments. Here, a \"signature\" is an\n   * object with properties 'params', 'test', 'fn', and 'implementation'.\n   * This last property is a function that converts params as necessary\n   * and then calls 'fn'. Returns null if there is no matching signature.\n   * @param {typed-function} tf\n   * @param {any[]} argList\n   * @returns {{params: string, test: function, fn: function, implementation: function}}\n   */\n\n\n  typed.resolve = function (tf, argList) {\n    if (!isTypedFunction(tf)) {\n      throw new TypeError(NOT_TYPED_FUNCTION);\n    }\n\n    var sigs = tf._typedFunctionData.signatures;\n\n    for (var i = 0; i < sigs.length; ++i) {\n      if (sigs[i].test(argList)) {\n        return sigs[i];\n      }\n    }\n\n    return null;\n  };\n\n  return typed;\n}\n\nexport default create();\n//# sourceMappingURL=typed-function.mjs.map"]},"metadata":{},"sourceType":"script"}