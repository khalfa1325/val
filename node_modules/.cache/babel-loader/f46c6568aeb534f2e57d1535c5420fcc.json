{"ast":null,"code":"import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype; // datatype\n\n    var dt; // callback signature to use\n\n    var cf = callback; // process data types\n\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt; // convert b to the same datatype\n\n      b = typed.convert(b, dt); // callback\n\n      cf = typed.find(callback, [dt, dt]);\n    } // populate cdata, iterate through dimensions\n\n\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : []; // c matrix\n\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  }; // recursive function\n\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = []; // check we reach the last level\n\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n\n    return cv;\n  }\n});","map":{"version":3,"sources":["/home/radhouene/Bureau/admin/folder/VALENTANO/node_modules/mathjs/lib/esm/type/matrix/utils/matAlgo14xDs.js"],"names":["factory","clone","name","dependencies","createMatAlgo14xDs","_ref","typed","matAlgo14xDs","a","b","callback","inverse","adata","_data","asize","_size","adt","_datatype","dt","cf","convert","find","cdata","length","_iterate","createDenseMatrix","data","size","datatype","f","level","s","n","av","bv","cv","i","j"],"mappings":"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","sourcesContent":["import { factory } from '../../../utils/factory.js';\nimport { clone } from '../../../utils/object.js';\nvar name = 'matAlgo14xDs';\nvar dependencies = ['typed'];\nexport var createMatAlgo14xDs = /* #__PURE__ */factory(name, dependencies, _ref => {\n  var {\n    typed\n  } = _ref;\n  /**\n   * Iterates over DenseMatrix items and invokes the callback function f(Aij..z, b).\n   * Callback function invoked MxN times.\n   *\n   * C(i,j,...z) = f(Aij..z, b)\n   *\n   * @param {Matrix}   a                 The DenseMatrix instance (A)\n   * @param {Scalar}   b                 The Scalar value\n   * @param {Function} callback          The f(Aij..z,b) operation to invoke\n   * @param {boolean}  inverse           A true value indicates callback should be invoked f(b,Aij..z)\n   *\n   * @return {Matrix}                    DenseMatrix (C)\n   *\n   * https://github.com/josdejong/mathjs/pull/346#issuecomment-97659042\n   */\n  return function matAlgo14xDs(a, b, callback, inverse) {\n    // a arrays\n    var adata = a._data;\n    var asize = a._size;\n    var adt = a._datatype;\n\n    // datatype\n    var dt;\n    // callback signature to use\n    var cf = callback;\n\n    // process data types\n    if (typeof adt === 'string') {\n      // datatype\n      dt = adt;\n      // convert b to the same datatype\n      b = typed.convert(b, dt);\n      // callback\n      cf = typed.find(callback, [dt, dt]);\n    }\n\n    // populate cdata, iterate through dimensions\n    var cdata = asize.length > 0 ? _iterate(cf, 0, asize, asize[0], adata, b, inverse) : [];\n\n    // c matrix\n    return a.createDenseMatrix({\n      data: cdata,\n      size: clone(asize),\n      datatype: dt\n    });\n  };\n\n  // recursive function\n  function _iterate(f, level, s, n, av, bv, inverse) {\n    // initialize array for this level\n    var cv = [];\n    // check we reach the last level\n    if (level === s.length - 1) {\n      // loop arrays in last level\n      for (var i = 0; i < n; i++) {\n        // invoke callback and store value\n        cv[i] = inverse ? f(bv, av[i]) : f(av[i], bv);\n      }\n    } else {\n      // iterate current level\n      for (var j = 0; j < n; j++) {\n        // iterate next level\n        cv[j] = _iterate(f, level + 1, s, s[level + 1], av[j], bv, inverse);\n      }\n    }\n    return cv;\n  }\n});"]},"metadata":{},"sourceType":"module"}